
/home/kbpoyo/code/uC-OS2-s3c2440/build/src/ucos/ucos.elf:     file format elf32-littlearm
/home/kbpoyo/code/uC-OS2-s3c2440/build/src/ucos/ucos.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x30000000

Program Header:
    LOAD off    0x00008000 vaddr 0x30000000 paddr 0x30000000 align 2**15
         filesz 0x0000c328 memsz 0x000187d4 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags rwx
PAX_FLAGS off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags --- 2800
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c0e4  30000000  30000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000001f0  3000c0e4  3000c0e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000054  3000c2d4  3000c2d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000c4ac  3000c328  3000c328  00014328  2**2
                  ALLOC
  4 .ARM.attributes 00000026  00000000  00000000  00014328  2**0
                  CONTENTS, READONLY
  5 .comment      00000018  00000000  00000000  0001434e  2**0
                  CONTENTS, READONLY
  6 .debug_line   000018c7  00000000  00000000  00014366  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004d74  00000000  00000000  00015c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000089e  00000000  00000000  0001a9a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000180  00000000  00000000  0001b240  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001658  00000000  00000000  0001b3c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e54  00000000  00000000  0001ca18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00000e0b  00000000  00000000  0001e86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016af  00000000  00000000  0001f677  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
30000000 l    d  .text	00000000 .text
3000c0e4 l    d  .rodata	00000000 .rodata
3000c2d4 l    d  .data	00000000 .data
3000c328 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_str	00000000 .debug_str
30000024 l       .text	00000000 _os_init
300001b4 l       .text	00000000 _undef_handler
300001b8 l       .text	00000000 _swi_handler
300001bc l       .text	00000000 _prefetch_abort_handler
300001c0 l       .text	00000000 _data_abort_handler
30000064 l       .text	00000000 _irq_handler
300001c4 l       .text	00000000 _fiq_handler
00000000 l    df *ABS*	00000000 klib.c
3000c2d4 l     O .data	00000004 num_to_char.1396
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 irq.c
30000d50 l     F .text	00000020 cpu_irq_start
30000d70 l     F .text	00000020 cpu_irq_close
3000c328 l     O .bss	00000080 irq_handler_call
00000000 l    df *ABS*	00000000 timer.c
30001288 l     F .text	00000020 cpu_irq_start
300012a8 l     F .text	00000020 cpu_irq_close
300012c8 l     F .text	00000024 irq_handler_for_timer4
00000000 l    df *ABS*	00000000 uart.c
300013c0 l     F .text	00000020 cpu_irq_start
300013e0 l     F .text	00000020 cpu_irq_close
3000c2d8 l     O .data	00000024 uart_table
3000c2fc l     O .data	00000004 curr_uart_index
00000000 l    df *ABS*	00000000 div-faker.c
00000000 l    df *ABS*	00000000 main.c
300017f0 l     F .text	00000020 cpu_irq_start
30001810 l     F .text	00000020 cpu_irq_close
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000000 l    df *ABS*	00000000 ucos_ii.c
300031dc l     F .text	000000c4 OS_InitMisc
300032a0 l     F .text	000000a0 OS_InitRdyList
30003438 l     F .text	0000014c OS_InitTCBList
300030b8 l     F .text	00000124 OS_InitEventList
30003340 l     F .text	0000007c OS_InitTaskIdle
300033bc l     F .text	0000007c OS_InitTaskStat
3000371c l     F .text	0000006c OS_SchedNew
30005274 l     F .text	000000f8 OS_FlagTaskRdy
30004ff8 l     F .text	00000188 OS_FlagBlock
30007524 l     F .text	00000184 OSMutex_RdyAtPrio
3000b7a0 l     F .text	000000b4 OSTmr_Alloc
3000bd30 l     F .text	00000138 OSTmr_Unlink
3000b854 l     F .text	000000e0 OSTmr_Free
3000bba4 l     F .text	0000018c OSTmr_Link
3000bb28 l     F .text	0000007c OSTmr_InitTask
3000be68 l     F .text	00000154 OSTmr_Task
300004c8 g     F .text	000000c4 kernel_memcpy
300173ac g     O .bss	00000004 OSTmrFreeList
30000f78 g     F .text	00000044 irq_disable_all
30006470 g     F .text	000000fc OS_MemInit
3000ad94 g     F .text	00000048 OSTimeSet
300173b0 g     O .bss	00000038 OSTmrWheelTbl
3000c300 g     O .data	00000028 arr
30001dbc g     F .text	000006b8 OSEventPendMulti
30001a70 g     F .text	0000001c OSTaskCreateHook
30001624 g     F .text	00000054 uart_send_str
3000c3a8 g     O .bss	00001000 Task3Stk
300024b8 g     F .text	00000054 OSIntEnter
3000a6e8 g     F .text	000000a0 OSTaskRegGetID
3000d3a8 g     O .bss	00001000 Task7Stk
3000058c g     F .text	0000009c kernel_memset
30001abc g     F .text	00000014 OSTaskStatHook
300173e8 g     O .bss	00000001 OSLockNesting
300173ec g     O .bss	00000004 OSTmrSemSignal
3000e3a8 g     O .bss	00001000 Task4Stk
300173f0 g     O .bss	00000001 OSTaskRegNextAvailID
300173f1 g     O .bss	00000001 OSRunning
30001a38 g     F .text	00000024 OSInitHookBegin
30000be0 g     F .text	00000074 strings_count
300010ac g     F .text	00000050 irq_clear_all
300173f4 g     O .bss	00000004 OSIdleCtr
30003a9c g     F .text	00000338 OS_TCBInit
3000a86c g     F .text	00000030 OS_TaskReturn
300173f8 g     O .bss	00000002 OSTmrUsed
300016d4 g     F .text	00000024 uart_control
300001e0 g     F .text	000000a0 kernel_strcpy
300173fa g     O .bss	00000001 OSPrioHighRdy
30001a8c g     F .text	0000001c OSTaskDelHook
3000018c g       .text	00000000 OSStartHighRdy
30009774 g     F .text	00000178 OSTaskCreateExt
30004b7c g     F .text	00000050 OSFlagPendGetFlagsRdy
30003dd4 g     F .text	00000304 OSFlagAccept
30007c08 g     F .text	000000a4 OSQFlush
300076a8 g     F .text	00000128 OSQAccept
30009610 g     F .text	00000164 OSTaskCreate
30000138 g       .text	00000000 OS_CPU_RestoreSR
3000913c g     F .text	000004d4 OSTaskChangePrio
30000d90 g     F .text	000000d8 irq_enable
300098ec g     F .text	00000354 OSTaskDel
3000656c g     F .text	00000190 OSMutexAccept
300173fc g     O .bss	00000050 OSFlagTbl
30002e80 g     F .text	000000c8 OS_EventTaskRemove
3001744c g     O .bss	00000280 OSTmrTbl
30001bd4 g     F .text	0000010c OSEventNameGet
30006bd8 g     F .text	000005d0 OSMutexPend
3000250c g     F .text	00000110 OSIntExit
300176cc g     O .bss	00000001 OSPrioCur
3000bfbc g     F .text	000000fc .hidden __udivsi3
300016f8 g     F .text	000000d0 irq_handler_for_uartRX0
30000140 g       .text	00000000 OSCtxSw
300176d0 g     O .bss	00000004 OSTCBList
3000a788 g     F .text	000000e4 OSTaskRegSet
3000b764 g     F .text	0000003c OSTmrSignal
300176d4 g     O .bss	00000078 OSMemTbl
3000113c g     F .text	00000034 irq_handler_register
300068b4 g     F .text	00000324 OSMutexDel
3001774c g     O .bss	00000200 OSTaskStatStk
3000613c g     F .text	000000e4 OSMemNameGet
300080a4 g     F .text	0000013c OSQPost
3000536c g     F .text	000000b8 OS_FlagUnlink
300035dc g     F .text	0000006c OS_MemCopy
30003648 g     F .text	000000d4 OS_Sched
30006070 g     F .text	000000cc OSMemGet
30005d84 g     F .text	00000108 OSMboxQuery
30009ec4 g     F .text	00000140 OSTaskNameSet
3001794c g     O .bss	00000004 OSCtxSwCtr
30001b80 g     F .text	00000014 OSTimeTickHook
30002f48 g     F .text	00000108 OS_EventTaskRemoveMulti
30002cf8 g     F .text	00000188 OS_EventTaskWaitMulti
30008b18 g     F .text	0000021c OSSemPend
30001b64 g     F .text	0000001c OSTCBInitHook
30005b5c g     F .text	000000e8 OSMboxPost
30017950 g     O .bss	00000002 OSTmrFree
30005180 g     F .text	000000f4 OS_FlagInit
3000af64 g     F .text	0000012c OSTmrDel
30008760 g     F .text	000000a0 OSSemAccept
300062d4 g     F .text	000000c4 OSMemPut
30005e8c g     F .text	000001e4 OSMemCreate
30017954 g     O .bss	00000004 OSIdleCtrMax
30001830 g     F .text	0000005c os_init
30001bb8 g     F .text	0000001c OSTaskReturnHook
30001b94 g     F .text	00000024 OSIntCtxSw
3000a5f8 g     F .text	000000f0 OSTaskRegGet
30017958 g     O .bss	00000004 OSTCBFreeList
30008d34 g     F .text	00000140 OSSemPendAbort
300012ec g     F .text	000000d4 timer_init
3000b1d4 g     F .text	000001a4 OSTmrRemainGet
3000b378 g     F .text	000000d4 OSTmrStateGet
30003840 g     F .text	000001a0 OS_TaskStat
30001170 g     F .text	0000009c irq_handler_for_eint8_23
30000280 g     F .text	000000d0 kernel_strncpy
30001400 g     F .text	000001a8 uart_init
3000b934 g     F .text	000001f4 OSTmr_Init
30003584 g     F .text	00000058 OS_MemClr
30001ad0 g     F .text	00000080 OSTaskStkInit
30002a30 g     F .text	0000018c OS_EventTaskRdy
3001795c g     O .bss	00000001 OSCPUUsage
30000000 g       .text	00000000 _start
30007cac g     F .text	000002b8 OSQPend
30000758 g     F .text	00000270 kernel_vsprintf
30000c54 g     F .text	00000090 get_file_name
3000a91c g     F .text	00000120 OSTimeDly
3000f3a8 g     O .bss	00001000 Task2Stk
3001795d g     O .bss	00000001 OSTaskCtr
3000aa3c g     F .text	0000017c OSTimeDlyHMSM
30008e74 g     F .text	000000e8 OSSemPost
300026a4 g     F .text	000000c0 OSSchedUnlock
300017c8 g     F .text	00000014 uart_close
30017960 g     O .bss	00000004 OSMemFreeList
300027e4 g     F .text	0000008c OSStatInit
30004f58 g     F .text	000000a0 OSFlagQuery
300103a8 g     O .bss	00001000 Task6Stk
30002a1c g     F .text	00000014 OS_Dummy
30017964 g     O .bss	00000060 OSQTbl
300113a8 g     O .bss	00001000 MainTaskStk
300179c4 g     O .bss	00000004 OSTCBHighRdy
30000e68 g     F .text	000000cc irq_disable
300179c8 g     O .bss	00000004 OSQFreeList
30001ce0 g     F .text	000000dc OSEventNameSet
300179cc g     O .bss	00000001 OSRdyGrp
3000b44c g     F .text	00000134 OSTmrStart
3000c0d0 g     F .text	00000014 .hidden __div0
3000c178 g     O .rodata	00000100 OSUnMapTbl
3000bfbc g     F .text	00000000 .hidden __aeabi_uidiv
30004bcc g     F .text	0000038c OSFlagPost
30002bbc g     F .text	0000013c OS_EventTaskWait
300123a8 g     O .bss	00001000 Task1Stk
300039e0 g     F .text	000000bc OS_TaskStatStkChk
30009c40 g     F .text	0000010c OSTaskDelReq
300066fc g     F .text	000001b8 OSMutexCreate
30002764 g     F .text	00000080 OSStart
3000a004 g     F .text	00000190 OSTaskResume
30006398 g     F .text	000000d8 OSMemQuery
300081e0 g     F .text	00000144 OSQPostFront
300179d0 g     O .bss	00000008 OSRdyTbl
300133a8 g     O .bss	00001000 Task9Stk
300077d0 g     F .text	000001ac OSQCreate
30009d4c g     F .text	00000178 OSTaskNameGet
30008324 g     F .text	000001f4 OSQPostOpt
30002870 g     F .text	0000018c OSTimeTick
30008800 g     F .text	000000e0 OSSemCreate
300073b4 g     F .text	00000170 OSMutexQuery
30000628 g     F .text	000000f4 kernel_memcmp
30008f5c g     F .text	00000108 OSSemQuery
3000797c g     F .text	0000028c OSQDel
30007f64 g     F .text	00000140 OSQPendAbort
30001678 g     F .text	0000005c uart_printf
3000b580 g     F .text	000001e4 OSTmrStop
3000261c g     F .text	00000088 OSSchedLock
300179d8 g     O .bss	00000200 OSTmrTaskStk
300040d8 g     F .text	000000fc OSFlagCreate
3000120c g     F .text	0000007c irq_init
30000090 g       .text	00000000 OS_IntCtxSw
3000addc g     F .text	00000188 OSTmrCreate
300041d4 g     F .text	00000244 OSFlagDel
30017bd8 g     O .bss	00000004 OSEventFreeList
30005a1c g     F .text	00000140 OSMboxPendAbort
300010fc g     F .text	00000040 irq_handler
300143a8 g     O .bss	00001000 Task8Stk
30004608 g     F .text	00000574 OSFlagPend
3000044c g     F .text	0000007c kernel_strlen
3000b090 g     F .text	00000144 OSTmrNameGet
300015a8 g     F .text	0000007c uart_send_byte
30001a5c g     F .text	00000014 OSInitHookEnd
3000c0b8 g     F .text	00000018 .hidden __aeabi_uidivmod
300054a8 g     F .text	000000dc OSMboxCreate
30000350 g     F .text	000000fc kernel_strncmp
300153a8 g     O .bss	00001000 Task0Stk
30017bdc g     O .bss	00000001 OSIntNesting
30000fbc g     F .text	000000f0 irq_clear
3000abb8 g     F .text	00000190 OSTimeDlyResume
30004528 g     F .text	000000e0 OSFlagNameSet
300057bc g     F .text	00000260 OSMboxPend
3000a194 g     F .text	000001a0 OSTaskStkChk
3000188c g     F .text	00000178 MainTask
30017be0 g     O .bss	00000004 OSTCBCur
30001a04 g     F .text	00000034 Task0
300071a8 g     F .text	0000020c OSMutexPost
30005424 g     F .text	00000084 OSMboxAccept
30002474 g     F .text	00000044 OSInit
30017be4 g     O .bss	00000004 OSTmrTime
3000a4f8 g     F .text	00000100 OSTaskQuery
30008670 g     F .text	000000f0 OS_QInit
30003788 g     F .text	0000006c OS_StrLen
300163a8 g     O .bss	00001000 Task5Stk
30006220 g     F .text	000000b4 OSMemNameSet
30017be8 g     O .bss	00000004 OSTime
30017bec g     O .bss	00000004 OSTmrSem
30017bf0 g     O .bss	00000200 OSTaskIdleStk
30005c44 g     F .text	00000140 OSMboxPostOpt
30004418 g     F .text	00000110 OSFlagNameGet
3000ad48 g     F .text	0000004c OSTimeGet
30001b50 g     F .text	00000014 OSTaskSwHook
30017df0 g     O .bss	000000f0 OSEventTbl
30017ee0 g     O .bss	000007e8 OSTCBTbl
30009064 g     F .text	000000d8 OSSemSet
3000071c g     F .text	0000003c kernel_sprintf
30000ce4 g     F .text	0000006c gpio_init
300088e0 g     F .text	00000238 OSSemDel
300186c8 g     O .bss	00000004 OSFlagFreeList
30005584 g     F .text	00000238 OSMboxDel
300186cc g     O .bss	00000001 OSStatRdy
300186d0 g     O .bss	00000100 OSTCBPrioTbl
30000118 g       .text	00000000 OS_CPU_SaveSR
300009c8 g     F .text	00000218 kernel_itoa
300173a8 g     O .bss	00000004 OSIntCtxSwFlag
30000f34 g     F .text	00000044 irq_enable_all
300187d0 g     O .bss	00000004 OSIdleCtrRun
300029fc g     F .text	00000020 OSVersion
3000a89c g     F .text	00000080 OS_TaskStkClr
30003050 g     F .text	00000068 OS_EventWaitListInit
300017dc g     F .text	00000014 raise
30001aa8 g     F .text	00000014 OSTaskIdleHook
3000a334 g     F .text	000001c4 OSTaskSuspend
300037f4 g     F .text	0000004c OS_TaskIdle
30008518 g     F .text	00000158 OSQQuery



Disassembly of section .text:

30000000 <_start>:
        .global  OS_CPU_RestoreSR

    .text

_start:
    mov r1, pc;
30000000:	e1a0100f 	mov	r1, pc
    ldr pc, [r1, r0, lsl#2]
30000004:	e791f100 	ldr	pc, [r1, r0, lsl #2]
30000008:	30000024 	.word	0x30000024
3000000c:	300001b4 	.word	0x300001b4
30000010:	300001b8 	.word	0x300001b8
30000014:	300001bc 	.word	0x300001bc
30000018:	300001c0 	.word	0x300001c0
3000001c:	30000064 	.word	0x30000064
30000020:	300001c4 	.word	0x300001c4

30000024 <_os_init>:


_os_init:

        @关闭中断
    msr cpsr_c, (CPU_MASK_IRQ | CPU_MODE_SVC)
30000024:	e321f093 	msr	CPSR_c, #147	; 0x93
    mov r0, #0
30000028:	e3a00000 	mov	r0, #0
    mov r1, r0
3000002c:	e1a01000 	mov	r1, r0
    mov r2, r0
30000030:	e1a02000 	mov	r2, r0
    mov r3, r0
30000034:	e1a03000 	mov	r3, r0
    mov r4, r0
30000038:	e1a04000 	mov	r4, r0
    mov r5, r0
3000003c:	e1a05000 	mov	r5, r0
    mov r6, r0
30000040:	e1a06000 	mov	r6, r0
    mov r7, r0
30000044:	e1a07000 	mov	r7, r0
    mov r8, r0
30000048:	e1a08000 	mov	r8, r0
    mov r9, r0
3000004c:	e1a09000 	mov	r9, r0
    mov r10, r0
30000050:	e1a0a000 	mov	sl, r0
    mov r11, r0
30000054:	e1a0b000 	mov	fp, r0
    mov r12, r0
30000058:	e1a0c000 	mov	ip, r0
    mov r14, r0
3000005c:	e1a0e000 	mov	lr, r0

    bl os_init
30000060:	eb0005f2 	bl	30001830 <os_init>

30000064 <_irq_handler>:



_irq_handler:
    @ 告知ucos系统进入中断,以增加一次中断记录次数
    bl  OSIntEnter                      
30000064:	eb000913 	bl	300024b8 <OSIntEnter>
    
    @执行中断服务程序,允许在部分中断中打开中断进行中断嵌套
    bl irq_handler
30000068:	eb000423 	bl	300010fc <irq_handler>
    
    @确保中断关闭
    msr cpsr_c, (CPU_MASK_IRQ | CPU_MODE_IRQ)
3000006c:	e321f092 	msr	CPSR_c, #146	; 0x92

    @告知ucos系统离开中断,以取消一次中断记录次数
    bl   OSIntExit           
30000070:	eb000925 	bl	3000250c <OSIntExit>
    
    @判断是否需要进行任务切换
    @当完成所有中断服务程序时才判断是否执行任务切换
    ldr     R0,=OSIntCtxSwFlag              
30000074:	e59f014c 	ldr	r0, [pc, #332]	; 300001c8 <_fiq_handler+0x4>
    ldr     R1,[R0]
30000078:	e5901000 	ldr	r1, [r0]
    cmp     R1,#1
3000007c:	e3510001 	cmp	r1, #1
    beq     OS_IntCtxSw                     
30000080:	0a000002 	beq	30000090 <OS_IntCtxSw>
    
    @恢复cpu上下文
    pop {r0}
30000084:	e8bd0001 	pop	{r0}
    msr spsr, r0    @恢复进入当前中断服务程序的任务的cpsr到irq的spsr
30000088:	e169f000 	msr	SPSR_fc, r0
    ldmfd sp!, {r0-r12, pc}^    @恢复任务寄存器组或返回到上一次的中断服务程序
3000008c:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

30000090 <OS_IntCtxSw>:


OS_IntCtxSw:
    @重置中断上下文切换标志
    ldr r0, =OSIntCtxSwFlag
30000090:	e59f0130 	ldr	r0, [pc, #304]	; 300001c8 <_fiq_handler+0x4>
    mov r1, #0
30000094:	e3a01000 	mov	r1, #0
    str r1, [r0]
30000098:	e5801000 	str	r1, [r0]

    @切换到svc模式获取任务栈指针和lr寄存器
    mrs r0, cpsr
3000009c:	e10f0000 	mrs	r0, CPSR
    msr cpsr_c, (CPU_MASK_IRQ | CPU_MODE_SVC)
300000a0:	e321f093 	msr	CPSR_c, #147	; 0x93
    mov r1, sp  @记录任务的sp
300000a4:	e1a0100d 	mov	r1, sp
    mov r2, lr  @记录任务的lr
300000a8:	e1a0200e 	mov	r2, lr
    msr cpsr, r0
300000ac:	e129f000 	msr	CPSR_fc, r0

    @将中断保存的上下文环境保存到任务栈中
    add r0, sp, #56     @r0->{pc}，r1指向当前任务的栈顶
300000b0:	e28d0038 	add	r0, sp, #56	; 0x38
    ldmfd r0, {r3}      
300000b4:	e8900008 	ldm	r0, {r3}
    stmfd r1!, {r2-r3}  @保存{lr, pc}
300000b8:	e921000c 	stmdb	r1!, {r2, r3}
    add r0, sp, #28     @r0->{r6, r7, r8, r9, r10, r11,r12}
300000bc:	e28d001c 	add	r0, sp, #28
    ldmfd r0, {r2-r8}
300000c0:	e89001fc 	ldm	r0, {r2, r3, r4, r5, r6, r7, r8}
    stmfd r1!, {r2-r8}  @保存{r6-r12}
300000c4:	e92101fc 	stmdb	r1!, {r2, r3, r4, r5, r6, r7, r8}
    add r0, sp, #0      @r0->{spsr, r0, r1, r2, r3, r4, r5}，r1指向当前任务的栈顶
300000c8:	e28d0000 	add	r0, sp, #0
    ldmfd r0, {r2-r8} 
300000cc:	e89001fc 	ldm	r0, {r2, r3, r4, r5, r6, r7, r8}
    stmfd r1!, {r2-r8}  @保存{spsr, r0-r5}
300000d0:	e92101fc 	stmdb	r1!, {r2, r3, r4, r5, r6, r7, r8}

    @清空当前irq栈中的内容
    add sp, #60
300000d4:	e28dd03c 	add	sp, sp, #60	; 0x3c

    @获取当前任务的TCB地址
    ldr r3, =OSTCBCur @OSTCBCur 符号的地址存储的是当前任务的TCB的地址
300000d8:	e59f30ec 	ldr	r3, [pc, #236]	; 300001cc <_fiq_handler+0x8>
    ldr r0, [r3] @加载当前任务的TCB结构地址
300000dc:	e5930000 	ldr	r0, [r3]
    str r1, [r0] @更新当前任务的栈指针，(栈指针是TCB结构的第一个成员)
300000e0:	e5801000 	str	r1, [r0]

    @调用OSTaskSwHook函数,以在任务切换时执行一些特定的操作
    @必须在切换为svc模式前调用，不然之后的压栈会覆盖之前在svc中保存的上下文
    bl      OSTaskSwHook
300000e4:	eb000699 	bl	30001b50 <OSTaskSwHook>

    @切换cpu模式为svc模式，并保持中断关闭,准备进行任务返回
    msr cpsr_c, (CPU_MASK_IRQ | CPU_MODE_SVC)   
300000e8:	e321f093 	msr	CPSR_c, #147	; 0x93

    @更新当前任务优先级标志
    ldr r0,=OSPrioCur
300000ec:	e59f00dc 	ldr	r0, [pc, #220]	; 300001d0 <_fiq_handler+0xc>
    ldr r1,=OSPrioHighRdy
300000f0:	e59f10dc 	ldr	r1, [pc, #220]	; 300001d4 <_fiq_handler+0x10>
    ldrb r1,[r1]
300000f4:	e5d11000 	ldrb	r1, [r1]
    strb r1,[r0]
300000f8:	e5c01000 	strb	r1, [r0]

    @获取最高优先级任务的TCB地址
    ldr r0, =OSTCBHighRdy
300000fc:	e59f00d4 	ldr	r0, [pc, #212]	; 300001d8 <_fiq_handler+0x14>
    ldr r0, [r0] @加载最高优先级任务的TCB结构地址
30000100:	e5900000 	ldr	r0, [r0]
    ldr sp, [r0] @加载最高优先级任务的栈顶指针
30000104:	e590d000 	ldr	sp, [r0]

    @更换当前任务TCB为最高优先级TCB
    str r0, [r3] 
30000108:	e5830000 	str	r0, [r3]

    @恢复cpu上下文
    pop {r0}
3000010c:	e8bd0001 	pop	{r0}
    msr spsr, r0    @恢复spsr,在最后模式返回的时候再将其拷贝到cpsr
30000110:	e169f000 	msr	SPSR_fc, r0
    ldmfd sp!, {r0-r12, lr, pc}^    @任务寄存器恢复，并将spsr拷贝到cpsr以回到之前的任务状态
30000114:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^

30000118 <OS_CPU_SaveSR>:



OS_CPU_SaveSR:
        @保存cpsr到r0中，作为返回值传递给外部函数
        mrs r0, cpsr
30000118:	e10f0000 	mrs	r0, CPSR

        @关闭中断，进入临界区
        orr r1, r0, #CPU_MASK_IRQ
3000011c:	e3801080 	orr	r1, r0, #128	; 0x80
        msr cpsr_c, r1
30000120:	e121f001 	msr	CPSR_c, r1

        @读取cpsr判断中断是否关闭成功,不成功则重新执行
        mrs r1, cpsr
30000124:	e10f1000 	mrs	r1, CPSR
        and r1, r1, #CPU_MASK_IRQ
30000128:	e2011080 	and	r1, r1, #128	; 0x80
        cmp r1, #CPU_MASK_IRQ
3000012c:	e3510080 	cmp	r1, #128	; 0x80
        bne OS_CPU_SaveSR
30000130:	1afffff8 	bne	30000118 <OS_CPU_SaveSR>

        @关闭成功，直接返回
        mov pc, lr
30000134:	e1a0f00e 	mov	pc, lr

30000138 <OS_CPU_RestoreSR>:
                     

OS_CPU_RestoreSR:
        msr     cpsr,r0
30000138:	e129f000 	msr	CPSR_fc, r0
        mov     pc,lr   
3000013c:	e1a0f00e 	mov	pc, lr

30000140 <OSCtxSw>:


@外部调用者已做了临界区保护，关闭了中断
OSCtxSw:    @在svc模式中直接进行任务切换
        @保存当前任务的上下文环境到当前任务栈中
        push {lr}@保存返回地址
30000140:	e92d4000 	push	{lr}
        stmfd   sp!,{r0-r12,lr}
30000144:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
        mrs r0, cpsr
30000148:	e10f0000 	mrs	r0, CPSR
        push {r0}
3000014c:	e92d0001 	push	{r0}

        
        @获取当前任务的TCB地址
        ldr r3, =OSTCBCur @OSTCBCur 符号的地址存储的是当前任务的TCB的地址
30000150:	e59f3074 	ldr	r3, [pc, #116]	; 300001cc <_fiq_handler+0x8>
        ldr r0, [r3] @加载当前任务的TCB结构地址
30000154:	e5930000 	ldr	r0, [r3]
        str sp, [r0] @更新当前任务的栈指针，(栈指针是TCB结构的第一个成员)
30000158:	e580d000 	str	sp, [r0]


        @调用OSTaskSwHook函数,以在任务切换时执行一些特定的操作
        bl      OSTaskSwHook
3000015c:	eb00067b 	bl	30001b50 <OSTaskSwHook>


        @更新当前任务优先级标志
        ldr r0,=OSPrioCur
30000160:	e59f0068 	ldr	r0, [pc, #104]	; 300001d0 <_fiq_handler+0xc>
        ldr r1,=OSPrioHighRdy
30000164:	e59f1068 	ldr	r1, [pc, #104]	; 300001d4 <_fiq_handler+0x10>
        ldrb r1,[r1]
30000168:	e5d11000 	ldrb	r1, [r1]
        strb r1,[r0]
3000016c:	e5c01000 	strb	r1, [r0]

        @获取最高优先级任务的TCB地址
        ldr r0, =OSTCBHighRdy
30000170:	e59f0060 	ldr	r0, [pc, #96]	; 300001d8 <_fiq_handler+0x14>
        ldr r0, [r0] @加载最高优先级任务的TCB结构地址
30000174:	e5900000 	ldr	r0, [r0]
        ldr sp, [r0] @加载最高优先级任务的栈顶指针
30000178:	e590d000 	ldr	sp, [r0]

        @更新最高优先级任务TCB为当前任务TCB
        str r0, [r3]
3000017c:	e5830000 	str	r0, [r3]


        @恢复cpu上下文
        pop {r0}
30000180:	e8bd0001 	pop	{r0}
        @将要调度的任务可能未关闭中断，所以要确保任务返回时中断关闭，
        @主要是系统自己的三个任务在初始化的时候cpsr没有关中断，但却在
        @此处调度，外部环境是
        @ orr r0, #CPU_MASK_IRQ   
        msr spsr, r0    @恢复spsr,在最后模式返回的时候再将其拷贝到cpsr
30000184:	e169f000 	msr	SPSR_fc, r0
        ldmfd sp!, {r0-r12, lr, pc}^    @任务寄存器恢复，并将spsr拷贝到cpsr以回到之前的任务状态
30000188:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^

3000018c <OSStartHighRdy>:

@进行第一个任务的上下文加载
OSStartHighRdy:

        @进行上下文切换的钩子函数调用
        bl      OSTaskSwHook                   
3000018c:	eb00066f 	bl	30001b50 <OSTaskSwHook>

        @设置OSRunning标志，标志多任务已启动
        ldr     r0,=OSRunning                   
30000190:	e59f0044 	ldr	r0, [pc, #68]	; 300001dc <_fiq_handler+0x18>
        mov     r1,#1
30000194:	e3a01001 	mov	r1, #1
        strb    r1,[r0]
30000198:	e5c01000 	strb	r1, [r0]

        @获取最高优先级任务的TCB地址
        ldr     r0,=OSTCBHighRdy               
3000019c:	e59f0034 	ldr	r0, [pc, #52]	; 300001d8 <_fiq_handler+0x14>
        ldr r0, [r0] @加载最高优先级任务的TCB结构地址
300001a0:	e5900000 	ldr	r0, [r0]
        ldr sp, [r0] @加载最高优先级任务的栈顶指针
300001a4:	e590d000 	ldr	sp, [r0]

        @恢复cpu上下文，第一个任务被调度即会打开中断
        pop {r0}
300001a8:	e8bd0001 	pop	{r0}
        msr spsr, r0    @恢复spsr,在最后模式返回的时候再将其拷贝到cpsr
300001ac:	e169f000 	msr	SPSR_fc, r0
        ldmfd sp!, {r0-r12, lr, pc}^    @任务寄存器恢复，并将spsr拷贝到cpsr以回到之前的任务状态
300001b0:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^

300001b4 <_undef_handler>:
                     

_undef_handler:
        bl _undef_handler
300001b4:	ebfffffe 	bl	300001b4 <_undef_handler>

300001b8 <_swi_handler>:
_swi_handler:
        bl _swi_handler
300001b8:	ebfffffe 	bl	300001b8 <_swi_handler>

300001bc <_prefetch_abort_handler>:

_prefetch_abort_handler:
        bl _prefetch_abort_handler
300001bc:	ebfffffe 	bl	300001bc <_prefetch_abort_handler>

300001c0 <_data_abort_handler>:

_data_abort_handler:
        bl _data_abort_handler
300001c0:	ebfffffe 	bl	300001c0 <_data_abort_handler>

300001c4 <_fiq_handler>:

_fiq_handler:
        bl _fiq_handler
300001c4:	ebfffffe 	bl	300001c4 <_fiq_handler>
300001c8:	300173a8 	.word	0x300173a8
300001cc:	30017be0 	.word	0x30017be0
300001d0:	300176cc 	.word	0x300176cc
300001d4:	300173fa 	.word	0x300173fa
300001d8:	300179c4 	.word	0x300179c4
300001dc:	300173f1 	.word	0x300173f1

300001e0 <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
300001e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300001e4:	e28db000 	add	fp, sp, #0
300001e8:	e24dd00c 	sub	sp, sp, #12
300001ec:	e50b0008 	str	r0, [fp, #-8]
300001f0:	e50b100c 	str	r1, [fp, #-12]
    // 1.判断是否为NULL
    if (!dest || !src)
300001f4:	e51b3008 	ldr	r3, [fp, #-8]
300001f8:	e3530000 	cmp	r3, #0
300001fc:	0a00001b 	beq	30000270 <kernel_strcpy+0x90>
30000200:	e51b300c 	ldr	r3, [fp, #-12]
30000204:	e3530000 	cmp	r3, #0
30000208:	1a00000b 	bne	3000023c <kernel_strcpy+0x5c>
        return;
3000020c:	ea000018 	b	30000274 <kernel_strcpy+0x94>

    // 2.拷贝 src '\0' 以前的部分到 dest中
    // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
        *(dest++) = *(src++);
30000210:	e51b300c 	ldr	r3, [fp, #-12]
30000214:	e5d32000 	ldrb	r2, [r3]
30000218:	e51b3008 	ldr	r3, [fp, #-8]
3000021c:	e5c32000 	strb	r2, [r3]
30000220:	e51b3008 	ldr	r3, [fp, #-8]
30000224:	e2833001 	add	r3, r3, #1
30000228:	e50b3008 	str	r3, [fp, #-8]
3000022c:	e51b300c 	ldr	r3, [fp, #-12]
30000230:	e2833001 	add	r3, r3, #1
30000234:	e50b300c 	str	r3, [fp, #-12]
30000238:	ea000000 	b	30000240 <kernel_strcpy+0x60>
    if (!dest || !src)
        return;

    // 2.拷贝 src '\0' 以前的部分到 dest中
    // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
3000023c:	e1a00000 	nop			; (mov r0, r0)
30000240:	e51b3008 	ldr	r3, [fp, #-8]
30000244:	e5d33000 	ldrb	r3, [r3]
30000248:	e3530000 	cmp	r3, #0
3000024c:	0a000003 	beq	30000260 <kernel_strcpy+0x80>
30000250:	e51b300c 	ldr	r3, [fp, #-12]
30000254:	e5d33000 	ldrb	r3, [r3]
30000258:	e3530000 	cmp	r3, #0
3000025c:	1affffeb 	bne	30000210 <kernel_strcpy+0x30>
        *(dest++) = *(src++);
    }

    // 3.添加结束符
    *dest = '\0';
30000260:	e51b3008 	ldr	r3, [fp, #-8]
30000264:	e3a02000 	mov	r2, #0
30000268:	e5c32000 	strb	r2, [r3]
3000026c:	ea000000 	b	30000274 <kernel_strcpy+0x94>
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
    // 1.判断是否为NULL
    if (!dest || !src)
        return;
30000270:	e1a00000 	nop			; (mov r0, r0)
        *(dest++) = *(src++);
    }

    // 3.添加结束符
    *dest = '\0';
}
30000274:	e28bd000 	add	sp, fp, #0
30000278:	e8bd0800 	pop	{fp}
3000027c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30000280 <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
30000280:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000284:	e28db000 	add	fp, sp, #0
30000288:	e24dd014 	sub	sp, sp, #20
3000028c:	e50b0008 	str	r0, [fp, #-8]
30000290:	e50b100c 	str	r1, [fp, #-12]
30000294:	e50b2010 	str	r2, [fp, #-16]
    // 1.判断是否需要拷贝
    if (!dest || !src || !size)
30000298:	e51b3008 	ldr	r3, [fp, #-8]
3000029c:	e3530000 	cmp	r3, #0
300002a0:	0a000024 	beq	30000338 <kernel_strncpy+0xb8>
300002a4:	e51b300c 	ldr	r3, [fp, #-12]
300002a8:	e3530000 	cmp	r3, #0
300002ac:	0a000023 	beq	30000340 <kernel_strncpy+0xc0>
300002b0:	e51b3010 	ldr	r3, [fp, #-16]
300002b4:	e3530000 	cmp	r3, #0
300002b8:	1a00000b 	bne	300002ec <kernel_strncpy+0x6c>
        return;
300002bc:	ea000020 	b	30000344 <kernel_strncpy+0xc4>

    // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
        *(dest++) = *(src++);
300002c0:	e51b300c 	ldr	r3, [fp, #-12]
300002c4:	e5d32000 	ldrb	r2, [r3]
300002c8:	e51b3008 	ldr	r3, [fp, #-8]
300002cc:	e5c32000 	strb	r2, [r3]
300002d0:	e51b3008 	ldr	r3, [fp, #-8]
300002d4:	e2833001 	add	r3, r3, #1
300002d8:	e50b3008 	str	r3, [fp, #-8]
300002dc:	e51b300c 	ldr	r3, [fp, #-12]
300002e0:	e2833001 	add	r3, r3, #1
300002e4:	e50b300c 	str	r3, [fp, #-12]
300002e8:	ea000000 	b	300002f0 <kernel_strncpy+0x70>
    // 1.判断是否需要拷贝
    if (!dest || !src || !size)
        return;

    // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
300002ec:	e1a00000 	nop			; (mov r0, r0)
300002f0:	e51b3010 	ldr	r3, [fp, #-16]
300002f4:	e3530001 	cmp	r3, #1
300002f8:	d3a03000 	movle	r3, #0
300002fc:	c3a03001 	movgt	r3, #1
30000300:	e20330ff 	and	r3, r3, #255	; 0xff
30000304:	e51b2010 	ldr	r2, [fp, #-16]
30000308:	e2422001 	sub	r2, r2, #1
3000030c:	e50b2010 	str	r2, [fp, #-16]
30000310:	e3530000 	cmp	r3, #0
30000314:	0a000003 	beq	30000328 <kernel_strncpy+0xa8>
30000318:	e51b300c 	ldr	r3, [fp, #-12]
3000031c:	e5d33000 	ldrb	r3, [r3]
30000320:	e3530000 	cmp	r3, #0
30000324:	1affffe5 	bne	300002c0 <kernel_strncpy+0x40>
        *(dest++) = *(src++);
    }

    // 3.添加结束符
    *dest = '\0';
30000328:	e51b3008 	ldr	r3, [fp, #-8]
3000032c:	e3a02000 	mov	r2, #0
30000330:	e5c32000 	strb	r2, [r3]
30000334:	ea000002 	b	30000344 <kernel_strncpy+0xc4>
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
    // 1.判断是否需要拷贝
    if (!dest || !src || !size)
        return;
30000338:	e1a00000 	nop			; (mov r0, r0)
3000033c:	ea000000 	b	30000344 <kernel_strncpy+0xc4>
30000340:	e1a00000 	nop			; (mov r0, r0)
        *(dest++) = *(src++);
    }

    // 3.添加结束符
    *dest = '\0';
}
30000344:	e28bd000 	add	sp, fp, #0
30000348:	e8bd0800 	pop	{fp}
3000034c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30000350 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
30000350:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000354:	e28db000 	add	fp, sp, #0
30000358:	e24dd014 	sub	sp, sp, #20
3000035c:	e50b0008 	str	r0, [fp, #-8]
30000360:	e50b100c 	str	r1, [fp, #-12]
30000364:	e50b2010 	str	r2, [fp, #-16]
    if (!s1 || !s2)
30000368:	e51b3008 	ldr	r3, [fp, #-8]
3000036c:	e3530000 	cmp	r3, #0
30000370:	0a000002 	beq	30000380 <kernel_strncmp+0x30>
30000374:	e51b300c 	ldr	r3, [fp, #-12]
30000378:	e3530000 	cmp	r3, #0
3000037c:	1a000008 	bne	300003a4 <kernel_strncmp+0x54>
        return 0;
30000380:	e3a03000 	mov	r3, #0
30000384:	ea00002c 	b	3000043c <kernel_strncmp+0xec>

    while (*s1 && *s2 && --size && *s1 == *s2) {
        ++s1;
30000388:	e51b3008 	ldr	r3, [fp, #-8]
3000038c:	e2833001 	add	r3, r3, #1
30000390:	e50b3008 	str	r3, [fp, #-8]
        ++s2;
30000394:	e51b300c 	ldr	r3, [fp, #-12]
30000398:	e2833001 	add	r3, r3, #1
3000039c:	e50b300c 	str	r3, [fp, #-12]
300003a0:	ea000000 	b	300003a8 <kernel_strncmp+0x58>
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
    if (!s1 || !s2)
        return 0;

    while (*s1 && *s2 && --size && *s1 == *s2) {
300003a4:	e1a00000 	nop			; (mov r0, r0)
300003a8:	e51b3008 	ldr	r3, [fp, #-8]
300003ac:	e5d33000 	ldrb	r3, [r3]
300003b0:	e3530000 	cmp	r3, #0
300003b4:	0a00000f 	beq	300003f8 <kernel_strncmp+0xa8>
300003b8:	e51b300c 	ldr	r3, [fp, #-12]
300003bc:	e5d33000 	ldrb	r3, [r3]
300003c0:	e3530000 	cmp	r3, #0
300003c4:	0a00000b 	beq	300003f8 <kernel_strncmp+0xa8>
300003c8:	e51b3010 	ldr	r3, [fp, #-16]
300003cc:	e2433001 	sub	r3, r3, #1
300003d0:	e50b3010 	str	r3, [fp, #-16]
300003d4:	e51b3010 	ldr	r3, [fp, #-16]
300003d8:	e3530000 	cmp	r3, #0
300003dc:	0a000005 	beq	300003f8 <kernel_strncmp+0xa8>
300003e0:	e51b3008 	ldr	r3, [fp, #-8]
300003e4:	e5d32000 	ldrb	r2, [r3]
300003e8:	e51b300c 	ldr	r3, [fp, #-12]
300003ec:	e5d33000 	ldrb	r3, [r3]
300003f0:	e1520003 	cmp	r2, r3
300003f4:	0affffe3 	beq	30000388 <kernel_strncmp+0x38>
        ++s1;
        ++s2;
    }

    if (*s1 > *s2) {
300003f8:	e51b3008 	ldr	r3, [fp, #-8]
300003fc:	e5d32000 	ldrb	r2, [r3]
30000400:	e51b300c 	ldr	r3, [fp, #-12]
30000404:	e5d33000 	ldrb	r3, [r3]
30000408:	e1520003 	cmp	r2, r3
3000040c:	9a000001 	bls	30000418 <kernel_strncmp+0xc8>
        return 1;
30000410:	e3a03001 	mov	r3, #1
30000414:	ea000008 	b	3000043c <kernel_strncmp+0xec>
    } else if (*s1 < *s2) {
30000418:	e51b3008 	ldr	r3, [fp, #-8]
3000041c:	e5d32000 	ldrb	r2, [r3]
30000420:	e51b300c 	ldr	r3, [fp, #-12]
30000424:	e5d33000 	ldrb	r3, [r3]
30000428:	e1520003 	cmp	r2, r3
3000042c:	2a000001 	bcs	30000438 <kernel_strncmp+0xe8>
        return -1;
30000430:	e3e03000 	mvn	r3, #0
30000434:	ea000000 	b	3000043c <kernel_strncmp+0xec>
    } else {
        return 0;
30000438:	e3a03000 	mov	r3, #0
    }
}
3000043c:	e1a00003 	mov	r0, r3
30000440:	e28bd000 	add	sp, fp, #0
30000444:	e8bd0800 	pop	{fp}
30000448:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

3000044c <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
3000044c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000450:	e28db000 	add	fp, sp, #0
30000454:	e24dd014 	sub	sp, sp, #20
30000458:	e50b0010 	str	r0, [fp, #-16]
    if (!str)
3000045c:	e51b3010 	ldr	r3, [fp, #-16]
30000460:	e3530000 	cmp	r3, #0
30000464:	1a000001 	bne	30000470 <kernel_strlen+0x24>
        return 0;
30000468:	e3a03000 	mov	r3, #0
3000046c:	ea000011 	b	300004b8 <kernel_strlen+0x6c>

    int len = 0;
30000470:	e3a03000 	mov	r3, #0
30000474:	e50b3008 	str	r3, [fp, #-8]
    while (*(str++)) len++;
30000478:	ea000002 	b	30000488 <kernel_strlen+0x3c>
3000047c:	e51b3008 	ldr	r3, [fp, #-8]
30000480:	e2833001 	add	r3, r3, #1
30000484:	e50b3008 	str	r3, [fp, #-8]
30000488:	e51b3010 	ldr	r3, [fp, #-16]
3000048c:	e5d33000 	ldrb	r3, [r3]
30000490:	e3530000 	cmp	r3, #0
30000494:	03a03000 	moveq	r3, #0
30000498:	13a03001 	movne	r3, #1
3000049c:	e20330ff 	and	r3, r3, #255	; 0xff
300004a0:	e51b2010 	ldr	r2, [fp, #-16]
300004a4:	e2822001 	add	r2, r2, #1
300004a8:	e50b2010 	str	r2, [fp, #-16]
300004ac:	e3530000 	cmp	r3, #0
300004b0:	1afffff1 	bne	3000047c <kernel_strlen+0x30>

    return len;
300004b4:	e51b3008 	ldr	r3, [fp, #-8]
}
300004b8:	e1a00003 	mov	r0, r3
300004bc:	e28bd000 	add	sp, fp, #0
300004c0:	e8bd0800 	pop	{fp}
300004c4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300004c8 <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
300004c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300004cc:	e28db000 	add	fp, sp, #0
300004d0:	e24dd01c 	sub	sp, sp, #28
300004d4:	e50b0010 	str	r0, [fp, #-16]
300004d8:	e50b1014 	str	r1, [fp, #-20]
300004dc:	e50b2018 	str	r2, [fp, #-24]
    if (!dest || !src || !size)
300004e0:	e51b3010 	ldr	r3, [fp, #-16]
300004e4:	e3530000 	cmp	r3, #0
300004e8:	0a00001f 	beq	3000056c <kernel_memcpy+0xa4>
300004ec:	e51b3014 	ldr	r3, [fp, #-20]
300004f0:	e3530000 	cmp	r3, #0
300004f4:	0a00001e 	beq	30000574 <kernel_memcpy+0xac>
300004f8:	e51b3018 	ldr	r3, [fp, #-24]
300004fc:	e3530000 	cmp	r3, #0
30000500:	0a00001d 	beq	3000057c <kernel_memcpy+0xb4>
        return;

    uint8_t *d = (uint8_t *)dest;
30000504:	e51b3010 	ldr	r3, [fp, #-16]
30000508:	e50b300c 	str	r3, [fp, #-12]
    uint8_t *s = (uint8_t *)src;
3000050c:	e51b3014 	ldr	r3, [fp, #-20]
30000510:	e50b3008 	str	r3, [fp, #-8]

    while (size--) {
30000514:	ea000009 	b	30000540 <kernel_memcpy+0x78>
        *(d++) = *(s++);
30000518:	e51b3008 	ldr	r3, [fp, #-8]
3000051c:	e5d32000 	ldrb	r2, [r3]
30000520:	e51b300c 	ldr	r3, [fp, #-12]
30000524:	e5c32000 	strb	r2, [r3]
30000528:	e51b300c 	ldr	r3, [fp, #-12]
3000052c:	e2833001 	add	r3, r3, #1
30000530:	e50b300c 	str	r3, [fp, #-12]
30000534:	e51b3008 	ldr	r3, [fp, #-8]
30000538:	e2833001 	add	r3, r3, #1
3000053c:	e50b3008 	str	r3, [fp, #-8]
        return;

    uint8_t *d = (uint8_t *)dest;
    uint8_t *s = (uint8_t *)src;

    while (size--) {
30000540:	e51b3018 	ldr	r3, [fp, #-24]
30000544:	e3530000 	cmp	r3, #0
30000548:	03a03000 	moveq	r3, #0
3000054c:	13a03001 	movne	r3, #1
30000550:	e20330ff 	and	r3, r3, #255	; 0xff
30000554:	e51b2018 	ldr	r2, [fp, #-24]
30000558:	e2422001 	sub	r2, r2, #1
3000055c:	e50b2018 	str	r2, [fp, #-24]
30000560:	e3530000 	cmp	r3, #0
30000564:	1affffeb 	bne	30000518 <kernel_memcpy+0x50>
30000568:	ea000004 	b	30000580 <kernel_memcpy+0xb8>
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
    if (!dest || !src || !size)
        return;
3000056c:	e1a00000 	nop			; (mov r0, r0)
30000570:	ea000002 	b	30000580 <kernel_memcpy+0xb8>
30000574:	e1a00000 	nop			; (mov r0, r0)
30000578:	ea000000 	b	30000580 <kernel_memcpy+0xb8>
3000057c:	e1a00000 	nop			; (mov r0, r0)
    uint8_t *s = (uint8_t *)src;

    while (size--) {
        *(d++) = *(s++);
    }
}
30000580:	e28bd000 	add	sp, fp, #0
30000584:	e8bd0800 	pop	{fp}
30000588:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

3000058c <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
3000058c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000590:	e28db000 	add	fp, sp, #0
30000594:	e24dd01c 	sub	sp, sp, #28
30000598:	e50b0010 	str	r0, [fp, #-16]
3000059c:	e1a03001 	mov	r3, r1
300005a0:	e50b2018 	str	r2, [fp, #-24]
300005a4:	e54b3011 	strb	r3, [fp, #-17]
    if (!dest || !size)
300005a8:	e51b3010 	ldr	r3, [fp, #-16]
300005ac:	e3530000 	cmp	r3, #0
300005b0:	0a000016 	beq	30000610 <kernel_memset+0x84>
300005b4:	e51b3018 	ldr	r3, [fp, #-24]
300005b8:	e3530000 	cmp	r3, #0
300005bc:	0a000015 	beq	30000618 <kernel_memset+0x8c>
        return;

    uint8_t *d = (uint8_t *)dest;
300005c0:	e51b3010 	ldr	r3, [fp, #-16]
300005c4:	e50b3008 	str	r3, [fp, #-8]

    while (size--) {
300005c8:	ea000005 	b	300005e4 <kernel_memset+0x58>
        *(d++) = v;
300005cc:	e51b3008 	ldr	r3, [fp, #-8]
300005d0:	e55b2011 	ldrb	r2, [fp, #-17]
300005d4:	e5c32000 	strb	r2, [r3]
300005d8:	e51b3008 	ldr	r3, [fp, #-8]
300005dc:	e2833001 	add	r3, r3, #1
300005e0:	e50b3008 	str	r3, [fp, #-8]
    if (!dest || !size)
        return;

    uint8_t *d = (uint8_t *)dest;

    while (size--) {
300005e4:	e51b3018 	ldr	r3, [fp, #-24]
300005e8:	e3530000 	cmp	r3, #0
300005ec:	03a03000 	moveq	r3, #0
300005f0:	13a03001 	movne	r3, #1
300005f4:	e20330ff 	and	r3, r3, #255	; 0xff
300005f8:	e51b2018 	ldr	r2, [fp, #-24]
300005fc:	e2422001 	sub	r2, r2, #1
30000600:	e50b2018 	str	r2, [fp, #-24]
30000604:	e3530000 	cmp	r3, #0
30000608:	1affffef 	bne	300005cc <kernel_memset+0x40>
3000060c:	ea000002 	b	3000061c <kernel_memset+0x90>
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
    if (!dest || !size)
        return;
30000610:	e1a00000 	nop			; (mov r0, r0)
30000614:	ea000000 	b	3000061c <kernel_memset+0x90>
30000618:	e1a00000 	nop			; (mov r0, r0)
    uint8_t *d = (uint8_t *)dest;

    while (size--) {
        *(d++) = v;
    }
}
3000061c:	e28bd000 	add	sp, fp, #0
30000620:	e8bd0800 	pop	{fp}
30000624:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30000628 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
30000628:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
3000062c:	e28db000 	add	fp, sp, #0
30000630:	e24dd01c 	sub	sp, sp, #28
30000634:	e50b0010 	str	r0, [fp, #-16]
30000638:	e50b1014 	str	r1, [fp, #-20]
3000063c:	e50b2018 	str	r2, [fp, #-24]
    if (!dest1 || !dest2 || !size)
30000640:	e51b3010 	ldr	r3, [fp, #-16]
30000644:	e3530000 	cmp	r3, #0
30000648:	0a000005 	beq	30000664 <kernel_memcmp+0x3c>
3000064c:	e51b3014 	ldr	r3, [fp, #-20]
30000650:	e3530000 	cmp	r3, #0
30000654:	0a000002 	beq	30000664 <kernel_memcmp+0x3c>
30000658:	e51b3018 	ldr	r3, [fp, #-24]
3000065c:	e3530000 	cmp	r3, #0
30000660:	1a000001 	bne	3000066c <kernel_memcmp+0x44>
        return 0;
30000664:	e3a03000 	mov	r3, #0
30000668:	ea000027 	b	3000070c <kernel_memcmp+0xe4>

    uint8_t *d1 = (uint8_t *)dest1;
3000066c:	e51b3010 	ldr	r3, [fp, #-16]
30000670:	e50b300c 	str	r3, [fp, #-12]
    uint8_t *d2 = (uint8_t *)dest2;
30000674:	e51b3014 	ldr	r3, [fp, #-20]
30000678:	e50b3008 	str	r3, [fp, #-8]

    while (--size && *d1 == *d2) {
3000067c:	ea000005 	b	30000698 <kernel_memcmp+0x70>
        d1++;
30000680:	e51b300c 	ldr	r3, [fp, #-12]
30000684:	e2833001 	add	r3, r3, #1
30000688:	e50b300c 	str	r3, [fp, #-12]
        d2++;
3000068c:	e51b3008 	ldr	r3, [fp, #-8]
30000690:	e2833001 	add	r3, r3, #1
30000694:	e50b3008 	str	r3, [fp, #-8]
        return 0;

    uint8_t *d1 = (uint8_t *)dest1;
    uint8_t *d2 = (uint8_t *)dest2;

    while (--size && *d1 == *d2) {
30000698:	e51b3018 	ldr	r3, [fp, #-24]
3000069c:	e2433001 	sub	r3, r3, #1
300006a0:	e50b3018 	str	r3, [fp, #-24]
300006a4:	e51b3018 	ldr	r3, [fp, #-24]
300006a8:	e3530000 	cmp	r3, #0
300006ac:	0a000005 	beq	300006c8 <kernel_memcmp+0xa0>
300006b0:	e51b300c 	ldr	r3, [fp, #-12]
300006b4:	e5d32000 	ldrb	r2, [r3]
300006b8:	e51b3008 	ldr	r3, [fp, #-8]
300006bc:	e5d33000 	ldrb	r3, [r3]
300006c0:	e1520003 	cmp	r2, r3
300006c4:	0affffed 	beq	30000680 <kernel_memcmp+0x58>
        d1++;
        d2++;
    }

    if (*d1 > *d2)
300006c8:	e51b300c 	ldr	r3, [fp, #-12]
300006cc:	e5d32000 	ldrb	r2, [r3]
300006d0:	e51b3008 	ldr	r3, [fp, #-8]
300006d4:	e5d33000 	ldrb	r3, [r3]
300006d8:	e1520003 	cmp	r2, r3
300006dc:	9a000001 	bls	300006e8 <kernel_memcmp+0xc0>
        return 1;
300006e0:	e3a03001 	mov	r3, #1
300006e4:	ea000008 	b	3000070c <kernel_memcmp+0xe4>
    else if (*d1 < *d2)
300006e8:	e51b300c 	ldr	r3, [fp, #-12]
300006ec:	e5d32000 	ldrb	r2, [r3]
300006f0:	e51b3008 	ldr	r3, [fp, #-8]
300006f4:	e5d33000 	ldrb	r3, [r3]
300006f8:	e1520003 	cmp	r2, r3
300006fc:	2a000001 	bcs	30000708 <kernel_memcmp+0xe0>
        return -1;
30000700:	e3e03000 	mvn	r3, #0
30000704:	ea000000 	b	3000070c <kernel_memcmp+0xe4>
    else
        return 0;
30000708:	e3a03000 	mov	r3, #0
}
3000070c:	e1a00003 	mov	r0, r3
30000710:	e28bd000 	add	sp, fp, #0
30000714:	e8bd0800 	pop	{fp}
30000718:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

3000071c <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
3000071c:	e92d000e 	push	{r1, r2, r3}
30000720:	e92d4800 	push	{fp, lr}
30000724:	e28db004 	add	fp, sp, #4
30000728:	e24dd014 	sub	sp, sp, #20
3000072c:	e50b0014 	str	r0, [fp, #-20]
    // 获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
30000730:	e28b3008 	add	r3, fp, #8
30000734:	e50b300c 	str	r3, [fp, #-12]
    kernel_vsprintf(buf, formate, args);
30000738:	e51b0014 	ldr	r0, [fp, #-20]
3000073c:	e59b1004 	ldr	r1, [fp, #4]
30000740:	e51b200c 	ldr	r2, [fp, #-12]
30000744:	eb000003 	bl	30000758 <kernel_vsprintf>
    va_end(args);
}
30000748:	e24bd004 	sub	sp, fp, #4
3000074c:	e8bd4800 	pop	{fp, lr}
30000750:	e28dd00c 	add	sp, sp, #12
30000754:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30000758 <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
30000758:	e92d4800 	push	{fp, lr}
3000075c:	e28db004 	add	fp, sp, #4
30000760:	e24dd038 	sub	sp, sp, #56	; 0x38
30000764:	e50b0030 	str	r0, [fp, #-48]	; 0x30
30000768:	e50b1034 	str	r1, [fp, #-52]	; 0x34
3000076c:	e50b2038 	str	r2, [fp, #-56]	; 0x38
    // 定义状态机，包含两种状态
    enum { NORMAL,
           READ_FMT } state = NORMAL;
30000770:	e3a03000 	mov	r3, #0
30000774:	e50b3028 	str	r3, [fp, #-40]	; 0x28

    char *curr = buf;
30000778:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
3000077c:	e50b3024 	str	r3, [fp, #-36]	; 0x24

    char ch;

    while ((ch = *(formate++)) != '\0') {
30000780:	ea000080 	b	30000988 <kernel_vsprintf+0x230>
        switch (state) {
30000784:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30000788:	e3530000 	cmp	r3, #0
3000078c:	0a000002 	beq	3000079c <kernel_vsprintf+0x44>
30000790:	e3530001 	cmp	r3, #1
30000794:	0a00000d 	beq	300007d0 <kernel_vsprintf+0x78>
30000798:	ea00007a 	b	30000988 <kernel_vsprintf+0x230>
        case NORMAL:
            if (ch == '%')
3000079c:	e55b301d 	ldrb	r3, [fp, #-29]
300007a0:	e3530025 	cmp	r3, #37	; 0x25
300007a4:	1a000002 	bne	300007b4 <kernel_vsprintf+0x5c>
                state = READ_FMT;
300007a8:	e3a03001 	mov	r3, #1
300007ac:	e50b3028 	str	r3, [fp, #-40]	; 0x28
            else
                *(curr++) = ch;
            break;
300007b0:	ea000074 	b	30000988 <kernel_vsprintf+0x230>
        switch (state) {
        case NORMAL:
            if (ch == '%')
                state = READ_FMT;
            else
                *(curr++) = ch;
300007b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
300007b8:	e55b201d 	ldrb	r2, [fp, #-29]
300007bc:	e5c32000 	strb	r2, [r3]
300007c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
300007c4:	e2833001 	add	r3, r3, #1
300007c8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
            break;
300007cc:	ea00006d 	b	30000988 <kernel_vsprintf+0x230>
        case READ_FMT:
            if (ch == 's') {
300007d0:	e55b301d 	ldrb	r3, [fp, #-29]
300007d4:	e3530073 	cmp	r3, #115	; 0x73
300007d8:	1a00001e 	bne	30000858 <kernel_vsprintf+0x100>
                const char *str = va_arg(args, char *);
300007dc:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
300007e0:	e2832004 	add	r2, r3, #4
300007e4:	e50b2038 	str	r2, [fp, #-56]	; 0x38
300007e8:	e5933000 	ldr	r3, [r3]
300007ec:	e50b301c 	str	r3, [fp, #-28]
                int len = kernel_strlen(str);
300007f0:	e51b001c 	ldr	r0, [fp, #-28]
300007f4:	ebffff14 	bl	3000044c <kernel_strlen>
300007f8:	e1a03000 	mov	r3, r0
300007fc:	e50b3018 	str	r3, [fp, #-24]
                while (len--) {
30000800:	ea000009 	b	3000082c <kernel_vsprintf+0xd4>
                    *(curr++) = *(str++);
30000804:	e51b301c 	ldr	r3, [fp, #-28]
30000808:	e5d32000 	ldrb	r2, [r3]
3000080c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30000810:	e5c32000 	strb	r2, [r3]
30000814:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30000818:	e2833001 	add	r3, r3, #1
3000081c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
30000820:	e51b301c 	ldr	r3, [fp, #-28]
30000824:	e2833001 	add	r3, r3, #1
30000828:	e50b301c 	str	r3, [fp, #-28]
            break;
        case READ_FMT:
            if (ch == 's') {
                const char *str = va_arg(args, char *);
                int len = kernel_strlen(str);
                while (len--) {
3000082c:	e51b3018 	ldr	r3, [fp, #-24]
30000830:	e3530000 	cmp	r3, #0
30000834:	03a03000 	moveq	r3, #0
30000838:	13a03001 	movne	r3, #1
3000083c:	e20330ff 	and	r3, r3, #255	; 0xff
30000840:	e51b2018 	ldr	r2, [fp, #-24]
30000844:	e2422001 	sub	r2, r2, #1
30000848:	e50b2018 	str	r2, [fp, #-24]
3000084c:	e3530000 	cmp	r3, #0
30000850:	1affffeb 	bne	30000804 <kernel_vsprintf+0xac>
30000854:	ea000049 	b	30000980 <kernel_vsprintf+0x228>
                    *(curr++) = *(str++);
                }
            } else if (ch == 'd') {
30000858:	e55b301d 	ldrb	r3, [fp, #-29]
3000085c:	e3530064 	cmp	r3, #100	; 0x64
30000860:	1a00000f 	bne	300008a4 <kernel_vsprintf+0x14c>
                const int num = va_arg(args, int);
30000864:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
30000868:	e2832004 	add	r2, r3, #4
3000086c:	e50b2038 	str	r2, [fp, #-56]	; 0x38
30000870:	e5933000 	ldr	r3, [r3]
30000874:	e50b3014 	str	r3, [fp, #-20]
                kernel_itoa(curr, num, 10);
30000878:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
3000087c:	e51b1014 	ldr	r1, [fp, #-20]
30000880:	e3a0200a 	mov	r2, #10
30000884:	eb00004f 	bl	300009c8 <kernel_itoa>
                curr += kernel_strlen(curr);
30000888:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
3000088c:	ebfffeee 	bl	3000044c <kernel_strlen>
30000890:	e1a03000 	mov	r3, r0
30000894:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
30000898:	e0823003 	add	r3, r2, r3
3000089c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
300008a0:	ea000036 	b	30000980 <kernel_vsprintf+0x228>
            } else if (ch == 'x' || ch == 'X') {
300008a4:	e55b301d 	ldrb	r3, [fp, #-29]
300008a8:	e3530078 	cmp	r3, #120	; 0x78
300008ac:	0a000002 	beq	300008bc <kernel_vsprintf+0x164>
300008b0:	e55b301d 	ldrb	r3, [fp, #-29]
300008b4:	e3530058 	cmp	r3, #88	; 0x58
300008b8:	1a00000f 	bne	300008fc <kernel_vsprintf+0x1a4>
                const int num = va_arg(args, int);
300008bc:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
300008c0:	e2832004 	add	r2, r3, #4
300008c4:	e50b2038 	str	r2, [fp, #-56]	; 0x38
300008c8:	e5933000 	ldr	r3, [r3]
300008cc:	e50b3010 	str	r3, [fp, #-16]
                kernel_itoa(curr, num, 16);
300008d0:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
300008d4:	e51b1010 	ldr	r1, [fp, #-16]
300008d8:	e3a02010 	mov	r2, #16
300008dc:	eb000039 	bl	300009c8 <kernel_itoa>
                curr += kernel_strlen(curr);
300008e0:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
300008e4:	ebfffed8 	bl	3000044c <kernel_strlen>
300008e8:	e1a03000 	mov	r3, r0
300008ec:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
300008f0:	e0823003 	add	r3, r2, r3
300008f4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
                }
            } else if (ch == 'd') {
                const int num = va_arg(args, int);
                kernel_itoa(curr, num, 10);
                curr += kernel_strlen(curr);
            } else if (ch == 'x' || ch == 'X') {
300008f8:	ea000020 	b	30000980 <kernel_vsprintf+0x228>
                const int num = va_arg(args, int);
                kernel_itoa(curr, num, 16);
                curr += kernel_strlen(curr);
            } else if (ch == 'b') {
300008fc:	e55b301d 	ldrb	r3, [fp, #-29]
30000900:	e3530062 	cmp	r3, #98	; 0x62
30000904:	1a00000f 	bne	30000948 <kernel_vsprintf+0x1f0>
                const int num = va_arg(args, int);
30000908:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
3000090c:	e2832004 	add	r2, r3, #4
30000910:	e50b2038 	str	r2, [fp, #-56]	; 0x38
30000914:	e5933000 	ldr	r3, [r3]
30000918:	e50b300c 	str	r3, [fp, #-12]
                kernel_itoa(curr, num, 2);
3000091c:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
30000920:	e51b100c 	ldr	r1, [fp, #-12]
30000924:	e3a02002 	mov	r2, #2
30000928:	eb000026 	bl	300009c8 <kernel_itoa>
                curr += kernel_strlen(curr);
3000092c:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
30000930:	ebfffec5 	bl	3000044c <kernel_strlen>
30000934:	e1a03000 	mov	r3, r0
30000938:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
3000093c:	e0823003 	add	r3, r2, r3
30000940:	e50b3024 	str	r3, [fp, #-36]	; 0x24
30000944:	ea00000d 	b	30000980 <kernel_vsprintf+0x228>
            } else if (ch == 'c') {
30000948:	e55b301d 	ldrb	r3, [fp, #-29]
3000094c:	e3530063 	cmp	r3, #99	; 0x63
30000950:	1a00000a 	bne	30000980 <kernel_vsprintf+0x228>
                char c = va_arg(args, int);
30000954:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
30000958:	e2832004 	add	r2, r3, #4
3000095c:	e50b2038 	str	r2, [fp, #-56]	; 0x38
30000960:	e5933000 	ldr	r3, [r3]
30000964:	e54b3005 	strb	r3, [fp, #-5]
                *(curr++) = c;
30000968:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000096c:	e55b2005 	ldrb	r2, [fp, #-5]
30000970:	e5c32000 	strb	r2, [r3]
30000974:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30000978:	e2833001 	add	r3, r3, #1
3000097c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
            }
            state = NORMAL;
30000980:	e3a03000 	mov	r3, #0
30000984:	e50b3028 	str	r3, [fp, #-40]	; 0x28

    char *curr = buf;

    char ch;

    while ((ch = *(formate++)) != '\0') {
30000988:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
3000098c:	e5d33000 	ldrb	r3, [r3]
30000990:	e54b301d 	strb	r3, [fp, #-29]
30000994:	e55b301d 	ldrb	r3, [fp, #-29]
30000998:	e3530000 	cmp	r3, #0
3000099c:	03a03000 	moveq	r3, #0
300009a0:	13a03001 	movne	r3, #1
300009a4:	e20330ff 	and	r3, r3, #255	; 0xff
300009a8:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
300009ac:	e2822001 	add	r2, r2, #1
300009b0:	e50b2034 	str	r2, [fp, #-52]	; 0x34
300009b4:	e3530000 	cmp	r3, #0
300009b8:	1affff71 	bne	30000784 <kernel_vsprintf+0x2c>
            break;
        default:
            break;
        }
    }
}
300009bc:	e24bd004 	sub	sp, fp, #4
300009c0:	e8bd4800 	pop	{fp, lr}
300009c4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300009c8 <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
300009c8:	e92d4830 	push	{r4, r5, fp, lr}
300009cc:	e28db00c 	add	fp, sp, #12
300009d0:	e24dd0a0 	sub	sp, sp, #160	; 0xa0
300009d4:	e50b00a0 	str	r0, [fp, #-160]	; 0xa0
300009d8:	e50b10a4 	str	r1, [fp, #-164]	; 0xa4
300009dc:	e50b20a8 	str	r2, [fp, #-168]	; 0xa8
    if (base != 2 && base != 8 && base != 10 && base != 16) {
300009e0:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xa8
300009e4:	e3530002 	cmp	r3, #2
300009e8:	0a00000c 	beq	30000a20 <kernel_itoa+0x58>
300009ec:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xa8
300009f0:	e3530008 	cmp	r3, #8
300009f4:	0a000009 	beq	30000a20 <kernel_itoa+0x58>
300009f8:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xa8
300009fc:	e353000a 	cmp	r3, #10
30000a00:	0a000006 	beq	30000a20 <kernel_itoa+0x58>
30000a04:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xa8
30000a08:	e3530010 	cmp	r3, #16
30000a0c:	0a000003 	beq	30000a20 <kernel_itoa+0x58>
        *buf = '\0';
30000a10:	e51b30a0 	ldr	r3, [fp, #-160]	; 0xa0
30000a14:	e3a02000 	mov	r2, #0
30000a18:	e5c32000 	strb	r2, [r3]
        return;
30000a1c:	ea00006b 	b	30000bd0 <kernel_itoa+0x208>
    }

    if (num == 0) {
30000a20:	e51b30a4 	ldr	r3, [fp, #-164]	; 0xa4
30000a24:	e3530000 	cmp	r3, #0
30000a28:	1a000009 	bne	30000a54 <kernel_itoa+0x8c>
        *(buf++) = '0';
30000a2c:	e51b30a0 	ldr	r3, [fp, #-160]	; 0xa0
30000a30:	e3a02030 	mov	r2, #48	; 0x30
30000a34:	e5c32000 	strb	r2, [r3]
30000a38:	e51b30a0 	ldr	r3, [fp, #-160]	; 0xa0
30000a3c:	e2833001 	add	r3, r3, #1
30000a40:	e50b30a0 	str	r3, [fp, #-160]	; 0xa0
        *buf = '\0';
30000a44:	e51b30a0 	ldr	r3, [fp, #-160]	; 0xa0
30000a48:	e3a02000 	mov	r2, #0
30000a4c:	e5c32000 	strb	r2, [r3]
        return;
30000a50:	ea00005e 	b	30000bd0 <kernel_itoa+0x208>
    }

    char *p = buf;
30000a54:	e51b30a0 	ldr	r3, [fp, #-160]	; 0xa0
30000a58:	e50b301c 	str	r3, [fp, #-28]
    uint32_t u_num = 0;
30000a5c:	e3a03000 	mov	r3, #0
30000a60:	e50b3018 	str	r3, [fp, #-24]

    if (base == 10) {
30000a64:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xa8
30000a68:	e353000a 	cmp	r3, #10
30000a6c:	1a00001b 	bne	30000ae0 <kernel_itoa+0x118>
        u_num = num;
30000a70:	e51b30a4 	ldr	r3, [fp, #-164]	; 0xa4
30000a74:	e50b3018 	str	r3, [fp, #-24]
        if (num < 0) {
30000a78:	e51b30a4 	ldr	r3, [fp, #-164]	; 0xa4
30000a7c:	e3530000 	cmp	r3, #0
30000a80:	aa000009 	bge	30000aac <kernel_itoa+0xe4>
            *(p++) = '-';
30000a84:	e51b301c 	ldr	r3, [fp, #-28]
30000a88:	e3a0202d 	mov	r2, #45	; 0x2d
30000a8c:	e5c32000 	strb	r2, [r3]
30000a90:	e51b301c 	ldr	r3, [fp, #-28]
30000a94:	e2833001 	add	r3, r3, #1
30000a98:	e50b301c 	str	r3, [fp, #-28]
            u_num = -1 * num;
30000a9c:	e51b30a4 	ldr	r3, [fp, #-164]	; 0xa4
30000aa0:	e2633000 	rsb	r3, r3, #0
30000aa4:	e50b3018 	str	r3, [fp, #-24]
        } else if (num == 0) {
            *(p++) = '0';
            *p = '\0';
            return;
30000aa8:	ea000011 	b	30000af4 <kernel_itoa+0x12c>
    if (base == 10) {
        u_num = num;
        if (num < 0) {
            *(p++) = '-';
            u_num = -1 * num;
        } else if (num == 0) {
30000aac:	e51b30a4 	ldr	r3, [fp, #-164]	; 0xa4
30000ab0:	e3530000 	cmp	r3, #0
30000ab4:	1a00000d 	bne	30000af0 <kernel_itoa+0x128>
            *(p++) = '0';
30000ab8:	e51b301c 	ldr	r3, [fp, #-28]
30000abc:	e3a02030 	mov	r2, #48	; 0x30
30000ac0:	e5c32000 	strb	r2, [r3]
30000ac4:	e51b301c 	ldr	r3, [fp, #-28]
30000ac8:	e2833001 	add	r3, r3, #1
30000acc:	e50b301c 	str	r3, [fp, #-28]
            *p = '\0';
30000ad0:	e51b301c 	ldr	r3, [fp, #-28]
30000ad4:	e3a02000 	mov	r2, #0
30000ad8:	e5c32000 	strb	r2, [r3]
            return;
30000adc:	ea00003b 	b	30000bd0 <kernel_itoa+0x208>
        }
    } else {
        u_num = *((uint32_t *)&num);
30000ae0:	e24b30a4 	sub	r3, fp, #164	; 0xa4
30000ae4:	e5933000 	ldr	r3, [r3]
30000ae8:	e50b3018 	str	r3, [fp, #-24]
30000aec:	ea000000 	b	30000af4 <kernel_itoa+0x12c>
            *(p++) = '-';
            u_num = -1 * num;
        } else if (num == 0) {
            *(p++) = '0';
            *p = '\0';
            return;
30000af0:	e1a00000 	nop			; (mov r0, r0)
        u_num = *((uint32_t *)&num);
    }

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
30000af4:	e3a03000 	mov	r3, #0
30000af8:	e50b3014 	str	r3, [fp, #-20]
    while (u_num > 0) {
30000afc:	ea000018 	b	30000b64 <kernel_itoa+0x19c>
        arr[len++] = num_to_char[u_num % base];
30000b00:	e51b4014 	ldr	r4, [fp, #-20]
30000b04:	e59f30d0 	ldr	r3, [pc, #208]	; 30000bdc <kernel_itoa+0x214>
30000b08:	e5935000 	ldr	r5, [r3]
30000b0c:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xa8
30000b10:	e51b2018 	ldr	r2, [fp, #-24]
30000b14:	e1a00002 	mov	r0, r2
30000b18:	e1a01003 	mov	r1, r3
30000b1c:	eb002d65 	bl	3000c0b8 <__aeabi_uidivmod>
30000b20:	e1a03001 	mov	r3, r1
30000b24:	e0853003 	add	r3, r5, r3
30000b28:	e5d32000 	ldrb	r2, [r3]
30000b2c:	e3e0308f 	mvn	r3, #143	; 0x8f
30000b30:	e24b000c 	sub	r0, fp, #12
30000b34:	e0801004 	add	r1, r0, r4
30000b38:	e0813003 	add	r3, r1, r3
30000b3c:	e5c32000 	strb	r2, [r3]
30000b40:	e51b3014 	ldr	r3, [fp, #-20]
30000b44:	e2833001 	add	r3, r3, #1
30000b48:	e50b3014 	str	r3, [fp, #-20]
        u_num /= base;
30000b4c:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xa8
30000b50:	e51b0018 	ldr	r0, [fp, #-24]
30000b54:	e1a01003 	mov	r1, r3
30000b58:	eb002d17 	bl	3000bfbc <__aeabi_uidiv>
30000b5c:	e1a03000 	mov	r3, r0
30000b60:	e50b3018 	str	r3, [fp, #-24]
    }

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
    while (u_num > 0) {
30000b64:	e51b3018 	ldr	r3, [fp, #-24]
30000b68:	e3530000 	cmp	r3, #0
30000b6c:	1affffe3 	bne	30000b00 <kernel_itoa+0x138>
        arr[len++] = num_to_char[u_num % base];
        u_num /= base;
    }

    for (int i = len - 1; i >= 0; --i) {
30000b70:	e51b3014 	ldr	r3, [fp, #-20]
30000b74:	e2433001 	sub	r3, r3, #1
30000b78:	e50b3010 	str	r3, [fp, #-16]
30000b7c:	ea00000d 	b	30000bb8 <kernel_itoa+0x1f0>
        *(p++) = arr[i];
30000b80:	e51b2010 	ldr	r2, [fp, #-16]
30000b84:	e3e0308f 	mvn	r3, #143	; 0x8f
30000b88:	e24b100c 	sub	r1, fp, #12
30000b8c:	e0812002 	add	r2, r1, r2
30000b90:	e0823003 	add	r3, r2, r3
30000b94:	e5d32000 	ldrb	r2, [r3]
30000b98:	e51b301c 	ldr	r3, [fp, #-28]
30000b9c:	e5c32000 	strb	r2, [r3]
30000ba0:	e51b301c 	ldr	r3, [fp, #-28]
30000ba4:	e2833001 	add	r3, r3, #1
30000ba8:	e50b301c 	str	r3, [fp, #-28]
    while (u_num > 0) {
        arr[len++] = num_to_char[u_num % base];
        u_num /= base;
    }

    for (int i = len - 1; i >= 0; --i) {
30000bac:	e51b3010 	ldr	r3, [fp, #-16]
30000bb0:	e2433001 	sub	r3, r3, #1
30000bb4:	e50b3010 	str	r3, [fp, #-16]
30000bb8:	e51b3010 	ldr	r3, [fp, #-16]
30000bbc:	e3530000 	cmp	r3, #0
30000bc0:	aaffffee 	bge	30000b80 <kernel_itoa+0x1b8>
        *(p++) = arr[i];
    }
    *p = '\0';
30000bc4:	e51b301c 	ldr	r3, [fp, #-28]
30000bc8:	e3a02000 	mov	r2, #0
30000bcc:	e5c32000 	strb	r2, [r3]
}
30000bd0:	e24bd00c 	sub	sp, fp, #12
30000bd4:	e8bd4830 	pop	{r4, r5, fp, lr}
30000bd8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30000bdc:	3000c2d4 	.word	0x3000c2d4

30000be0 <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
30000be0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000be4:	e28db000 	add	fp, sp, #0
30000be8:	e24dd014 	sub	sp, sp, #20
30000bec:	e50b0010 	str	r0, [fp, #-16]
    int count = 0;
30000bf0:	e3a03000 	mov	r3, #0
30000bf4:	e50b3008 	str	r3, [fp, #-8]
    if (strs) {
30000bf8:	e51b3010 	ldr	r3, [fp, #-16]
30000bfc:	e3530000 	cmp	r3, #0
30000c00:	0a00000e 	beq	30000c40 <strings_count+0x60>
        while (*(strs++)) {
30000c04:	ea000002 	b	30000c14 <strings_count+0x34>
            count++;
30000c08:	e51b3008 	ldr	r3, [fp, #-8]
30000c0c:	e2833001 	add	r3, r3, #1
30000c10:	e50b3008 	str	r3, [fp, #-8]
 * @return int
 */
int strings_count(char *const *strs) {
    int count = 0;
    if (strs) {
        while (*(strs++)) {
30000c14:	e51b3010 	ldr	r3, [fp, #-16]
30000c18:	e5933000 	ldr	r3, [r3]
30000c1c:	e3530000 	cmp	r3, #0
30000c20:	03a03000 	moveq	r3, #0
30000c24:	13a03001 	movne	r3, #1
30000c28:	e20330ff 	and	r3, r3, #255	; 0xff
30000c2c:	e51b2010 	ldr	r2, [fp, #-16]
30000c30:	e2822004 	add	r2, r2, #4
30000c34:	e50b2010 	str	r2, [fp, #-16]
30000c38:	e3530000 	cmp	r3, #0
30000c3c:	1afffff1 	bne	30000c08 <strings_count+0x28>
            count++;
        }
    }

    return count;
30000c40:	e51b3008 	ldr	r3, [fp, #-8]
}
30000c44:	e1a00003 	mov	r0, r3
30000c48:	e28bd000 	add	sp, fp, #0
30000c4c:	e8bd0800 	pop	{fp}
30000c50:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30000c54 <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
30000c54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000c58:	e28db000 	add	fp, sp, #0
30000c5c:	e24dd014 	sub	sp, sp, #20
30000c60:	e50b0010 	str	r0, [fp, #-16]
    const char *s = path;
30000c64:	e51b3010 	ldr	r3, [fp, #-16]
30000c68:	e50b3008 	str	r3, [fp, #-8]
    while (*s != '\0') {
30000c6c:	ea000002 	b	30000c7c <get_file_name+0x28>
        s++;
30000c70:	e51b3008 	ldr	r3, [fp, #-8]
30000c74:	e2833001 	add	r3, r3, #1
30000c78:	e50b3008 	str	r3, [fp, #-8]
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
    const char *s = path;
    while (*s != '\0') {
30000c7c:	e51b3008 	ldr	r3, [fp, #-8]
30000c80:	e5d33000 	ldrb	r3, [r3]
30000c84:	e3530000 	cmp	r3, #0
30000c88:	1afffff8 	bne	30000c70 <get_file_name+0x1c>
        s++;
    }

    while ((*s != '/') && (*s != '\\') && (s >= path)) {
30000c8c:	ea000002 	b	30000c9c <get_file_name+0x48>
        s--;
30000c90:	e51b3008 	ldr	r3, [fp, #-8]
30000c94:	e2433001 	sub	r3, r3, #1
30000c98:	e50b3008 	str	r3, [fp, #-8]
    const char *s = path;
    while (*s != '\0') {
        s++;
    }

    while ((*s != '/') && (*s != '\\') && (s >= path)) {
30000c9c:	e51b3008 	ldr	r3, [fp, #-8]
30000ca0:	e5d33000 	ldrb	r3, [r3]
30000ca4:	e353002f 	cmp	r3, #47	; 0x2f
30000ca8:	0a000007 	beq	30000ccc <get_file_name+0x78>
30000cac:	e51b3008 	ldr	r3, [fp, #-8]
30000cb0:	e5d33000 	ldrb	r3, [r3]
30000cb4:	e353005c 	cmp	r3, #92	; 0x5c
30000cb8:	0a000003 	beq	30000ccc <get_file_name+0x78>
30000cbc:	e51b2008 	ldr	r2, [fp, #-8]
30000cc0:	e51b3010 	ldr	r3, [fp, #-16]
30000cc4:	e1520003 	cmp	r2, r3
30000cc8:	2afffff0 	bcs	30000c90 <get_file_name+0x3c>
        s--;
    }

    return s + 1;
30000ccc:	e51b3008 	ldr	r3, [fp, #-8]
30000cd0:	e2833001 	add	r3, r3, #1
30000cd4:	e1a00003 	mov	r0, r3
30000cd8:	e28bd000 	add	sp, fp, #0
30000cdc:	e8bd0800 	pop	{fp}
30000ce0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30000ce4 <gpio_init>:

/**
 * @brief 初始化使用到的引脚
 *
 */
void gpio_init() {
30000ce4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000ce8:	e28db000 	add	fp, sp, #0
  // 将key1按键初始化为EINT8中断，key2为EINT11中断
  rGPGCON = rGPGCON_INIT;
30000cec:	e59f3040 	ldr	r3, [pc, #64]	; 30000d34 <gpio_init+0x50>
30000cf0:	e3a02082 	mov	r2, #130	; 0x82
30000cf4:	e5832000 	str	r2, [r3]

  // 设置将三个串口的TXD和RXD引脚
  rGPHCON = rGPHCON_INIT;
30000cf8:	e59f3038 	ldr	r3, [pc, #56]	; 30000d38 <gpio_init+0x54>
30000cfc:	e59f2038 	ldr	r2, [pc, #56]	; 30000d3c <gpio_init+0x58>
30000d00:	e5832000 	str	r2, [r3]

  // 将外部中断全设置为下降沿触发
  rEXTINT0 = rEXTINT_INIT;
30000d04:	e59f3034 	ldr	r3, [pc, #52]	; 30000d40 <gpio_init+0x5c>
30000d08:	e59f2034 	ldr	r2, [pc, #52]	; 30000d44 <gpio_init+0x60>
30000d0c:	e5832000 	str	r2, [r3]
  rEXTINT1 = rEXTINT_INIT;
30000d10:	e59f3030 	ldr	r3, [pc, #48]	; 30000d48 <gpio_init+0x64>
30000d14:	e59f2028 	ldr	r2, [pc, #40]	; 30000d44 <gpio_init+0x60>
30000d18:	e5832000 	str	r2, [r3]
  rEXTINT2 = rEXTINT_INIT;
30000d1c:	e59f3028 	ldr	r3, [pc, #40]	; 30000d4c <gpio_init+0x68>
30000d20:	e59f201c 	ldr	r2, [pc, #28]	; 30000d44 <gpio_init+0x60>
30000d24:	e5832000 	str	r2, [r3]
30000d28:	e28bd000 	add	sp, fp, #0
30000d2c:	e8bd0800 	pop	{fp}
30000d30:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30000d34:	56000060 	.word	0x56000060
30000d38:	56000070 	.word	0x56000070
30000d3c:	0000aaa0 	.word	0x0000aaa0
30000d40:	56000088 	.word	0x56000088
30000d44:	22222222 	.word	0x22222222
30000d48:	5600008c 	.word	0x5600008c
30000d4c:	56000090 	.word	0x56000090

30000d50 <cpu_irq_start>:

/**
 * @brief 开中断
 *
 */
__attribute__((always_inline)) static void cpu_irq_start() {
30000d50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000d54:	e28db000 	add	fp, sp, #0
  __asm__ __volatile__(
30000d58:	e10f0000 	mrs	r0, CPSR
30000d5c:	e3c00080 	bic	r0, r0, #128	; 0x80
30000d60:	e129f000 	msr	CPSR_fc, r0
      "mrs r0, cpsr\n"
      "bic r0, #0x80\n"
      "msr cpsr, r0\n" ::
          : "r0");
}
30000d64:	e28bd000 	add	sp, fp, #0
30000d68:	e8bd0800 	pop	{fp}
30000d6c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30000d70 <cpu_irq_close>:

/**
 * @brief 关中断
 *
 */
__attribute__((always_inline)) static void cpu_irq_close() {
30000d70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000d74:	e28db000 	add	fp, sp, #0
  __asm__ __volatile__(
30000d78:	e10f0000 	mrs	r0, CPSR
30000d7c:	e3800080 	orr	r0, r0, #128	; 0x80
30000d80:	e129f000 	msr	CPSR_fc, r0
      "mrs r0, cpsr\n"
      "orr r0, #0x80\n"
      "msr cpsr, r0\n" ::
          : "r0");
}
30000d84:	e28bd000 	add	sp, fp, #0
30000d88:	e8bd0800 	pop	{fp}
30000d8c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30000d90 <irq_enable>:
 * @brief 使能某一中断
 *
 * @param irq_num_prim 主中断源号
 * @param irq_num_sub 次中断源号
 */
void irq_enable(int irq_num_prim, int irq_num_sub) {
30000d90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000d94:	e28db000 	add	fp, sp, #0
30000d98:	e24dd00c 	sub	sp, sp, #12
30000d9c:	e50b0008 	str	r0, [fp, #-8]
30000da0:	e50b100c 	str	r1, [fp, #-12]
  if (irq_num_prim >= 0) {
30000da4:	e51b3008 	ldr	r3, [fp, #-8]
30000da8:	e3530000 	cmp	r3, #0
30000dac:	ba000009 	blt	30000dd8 <irq_enable+0x48>
    rINTMSK = ((~(1 << irq_num_prim)) & rINTMSK);
30000db0:	e59f30a4 	ldr	r3, [pc, #164]	; 30000e5c <irq_enable+0xcc>
30000db4:	e3a01001 	mov	r1, #1
30000db8:	e51b2008 	ldr	r2, [fp, #-8]
30000dbc:	e1a02211 	lsl	r2, r1, r2
30000dc0:	e1e02002 	mvn	r2, r2
30000dc4:	e1a01002 	mov	r1, r2
30000dc8:	e59f208c 	ldr	r2, [pc, #140]	; 30000e5c <irq_enable+0xcc>
30000dcc:	e5922000 	ldr	r2, [r2]
30000dd0:	e0012002 	and	r2, r1, r2
30000dd4:	e5832000 	str	r2, [r3]
  }

  if (irq_num_sub >= 0) {
30000dd8:	e51b300c 	ldr	r3, [fp, #-12]
30000ddc:	e3530000 	cmp	r3, #0
30000de0:	ba00001a 	blt	30000e50 <irq_enable+0xc0>
    if (irq_num_prim == EINT4_7 ||
30000de4:	e51b3008 	ldr	r3, [fp, #-8]
30000de8:	e3530004 	cmp	r3, #4
30000dec:	0a000002 	beq	30000dfc <irq_enable+0x6c>
30000df0:	e51b3008 	ldr	r3, [fp, #-8]
30000df4:	e3530005 	cmp	r3, #5
30000df8:	1a00000a 	bne	30000e28 <irq_enable+0x98>
        irq_num_prim == EINT8_23) {  // 使能外部中断屏蔽寄存器
      rEINTMASK = ((~(1 << irq_num_sub)) & rEINTMASK);
30000dfc:	e59f305c 	ldr	r3, [pc, #92]	; 30000e60 <irq_enable+0xd0>
30000e00:	e3a01001 	mov	r1, #1
30000e04:	e51b200c 	ldr	r2, [fp, #-12]
30000e08:	e1a02211 	lsl	r2, r1, r2
30000e0c:	e1e02002 	mvn	r2, r2
30000e10:	e1a01002 	mov	r1, r2
30000e14:	e59f2044 	ldr	r2, [pc, #68]	; 30000e60 <irq_enable+0xd0>
30000e18:	e5922000 	ldr	r2, [r2]
30000e1c:	e0012002 	and	r2, r1, r2
30000e20:	e5832000 	str	r2, [r3]
  if (irq_num_prim >= 0) {
    rINTMSK = ((~(1 << irq_num_prim)) & rINTMSK);
  }

  if (irq_num_sub >= 0) {
    if (irq_num_prim == EINT4_7 ||
30000e24:	ea000009 	b	30000e50 <irq_enable+0xc0>
        irq_num_prim == EINT8_23) {  // 使能外部中断屏蔽寄存器
      rEINTMASK = ((~(1 << irq_num_sub)) & rEINTMASK);
    } else {  // 使能次中断源屏蔽寄存器
      rINTSUBMSK = ((~(1 << irq_num_sub)) & rINTSUBMSK);
30000e28:	e59f3034 	ldr	r3, [pc, #52]	; 30000e64 <irq_enable+0xd4>
30000e2c:	e3a01001 	mov	r1, #1
30000e30:	e51b200c 	ldr	r2, [fp, #-12]
30000e34:	e1a02211 	lsl	r2, r1, r2
30000e38:	e1e02002 	mvn	r2, r2
30000e3c:	e1a01002 	mov	r1, r2
30000e40:	e59f201c 	ldr	r2, [pc, #28]	; 30000e64 <irq_enable+0xd4>
30000e44:	e5922000 	ldr	r2, [r2]
30000e48:	e0012002 	and	r2, r1, r2
30000e4c:	e5832000 	str	r2, [r3]
    }
  }
}
30000e50:	e28bd000 	add	sp, fp, #0
30000e54:	e8bd0800 	pop	{fp}
30000e58:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30000e5c:	4a000008 	.word	0x4a000008
30000e60:	560000a4 	.word	0x560000a4
30000e64:	4a00001c 	.word	0x4a00001c

30000e68 <irq_disable>:
 * @brief 屏蔽某一中断
 *
 * @param irq_num_prim 主中断源号
 * @param irq_num_secon 次中断源号
 */
void irq_disable(int irq_num_prim, int irq_num_sub) {
30000e68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000e6c:	e28db000 	add	fp, sp, #0
30000e70:	e24dd00c 	sub	sp, sp, #12
30000e74:	e50b0008 	str	r0, [fp, #-8]
30000e78:	e50b100c 	str	r1, [fp, #-12]
  if (irq_num_prim >= 0) {
30000e7c:	e51b3008 	ldr	r3, [fp, #-8]
30000e80:	e3530000 	cmp	r3, #0
30000e84:	ba000008 	blt	30000eac <irq_disable+0x44>
    rINTMSK = ((1 << irq_num_prim) | rINTMSK);
30000e88:	e59f3098 	ldr	r3, [pc, #152]	; 30000f28 <irq_disable+0xc0>
30000e8c:	e3a01001 	mov	r1, #1
30000e90:	e51b2008 	ldr	r2, [fp, #-8]
30000e94:	e1a02211 	lsl	r2, r1, r2
30000e98:	e1a01002 	mov	r1, r2
30000e9c:	e59f2084 	ldr	r2, [pc, #132]	; 30000f28 <irq_disable+0xc0>
30000ea0:	e5922000 	ldr	r2, [r2]
30000ea4:	e1812002 	orr	r2, r1, r2
30000ea8:	e5832000 	str	r2, [r3]
  }

  if (irq_num_sub >= 0) {
30000eac:	e51b300c 	ldr	r3, [fp, #-12]
30000eb0:	e3530000 	cmp	r3, #0
30000eb4:	ba000018 	blt	30000f1c <irq_disable+0xb4>
    if (irq_num_prim == EINT4_7 || irq_num_prim == EINT8_23) {
30000eb8:	e51b3008 	ldr	r3, [fp, #-8]
30000ebc:	e3530004 	cmp	r3, #4
30000ec0:	0a000002 	beq	30000ed0 <irq_disable+0x68>
30000ec4:	e51b3008 	ldr	r3, [fp, #-8]
30000ec8:	e3530005 	cmp	r3, #5
30000ecc:	1a000009 	bne	30000ef8 <irq_disable+0x90>
      rEINTMASK = ((1 << irq_num_sub) | rEINTMASK);  // 操作外部中断屏蔽寄存器
30000ed0:	e59f3054 	ldr	r3, [pc, #84]	; 30000f2c <irq_disable+0xc4>
30000ed4:	e3a01001 	mov	r1, #1
30000ed8:	e51b200c 	ldr	r2, [fp, #-12]
30000edc:	e1a02211 	lsl	r2, r1, r2
30000ee0:	e1a01002 	mov	r1, r2
30000ee4:	e59f2040 	ldr	r2, [pc, #64]	; 30000f2c <irq_disable+0xc4>
30000ee8:	e5922000 	ldr	r2, [r2]
30000eec:	e1812002 	orr	r2, r1, r2
30000ef0:	e5832000 	str	r2, [r3]
  if (irq_num_prim >= 0) {
    rINTMSK = ((1 << irq_num_prim) | rINTMSK);
  }

  if (irq_num_sub >= 0) {
    if (irq_num_prim == EINT4_7 || irq_num_prim == EINT8_23) {
30000ef4:	ea000008 	b	30000f1c <irq_disable+0xb4>
      rEINTMASK = ((1 << irq_num_sub) | rEINTMASK);  // 操作外部中断屏蔽寄存器
    } else {  // 操作次中断源屏蔽寄存器
      rINTSUBMSK = ((1 << irq_num_sub) | rINTSUBMSK);
30000ef8:	e59f3030 	ldr	r3, [pc, #48]	; 30000f30 <irq_disable+0xc8>
30000efc:	e3a01001 	mov	r1, #1
30000f00:	e51b200c 	ldr	r2, [fp, #-12]
30000f04:	e1a02211 	lsl	r2, r1, r2
30000f08:	e1a01002 	mov	r1, r2
30000f0c:	e59f201c 	ldr	r2, [pc, #28]	; 30000f30 <irq_disable+0xc8>
30000f10:	e5922000 	ldr	r2, [r2]
30000f14:	e1812002 	orr	r2, r1, r2
30000f18:	e5832000 	str	r2, [r3]
    }
  }
}
30000f1c:	e28bd000 	add	sp, fp, #0
30000f20:	e8bd0800 	pop	{fp}
30000f24:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30000f28:	4a000008 	.word	0x4a000008
30000f2c:	560000a4 	.word	0x560000a4
30000f30:	4a00001c 	.word	0x4a00001c

30000f34 <irq_enable_all>:

/**
 * @brief 使能全部中断
 *
 */
void irq_enable_all() {
30000f34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000f38:	e28db000 	add	fp, sp, #0
  rINTSUBMSK = 0x0;
30000f3c:	e59f3028 	ldr	r3, [pc, #40]	; 30000f6c <irq_enable_all+0x38>
30000f40:	e3a02000 	mov	r2, #0
30000f44:	e5832000 	str	r2, [r3]
  rEINTMASK = 0x0;
30000f48:	e59f3020 	ldr	r3, [pc, #32]	; 30000f70 <irq_enable_all+0x3c>
30000f4c:	e3a02000 	mov	r2, #0
30000f50:	e5832000 	str	r2, [r3]
  rINTMSK = 0x0;
30000f54:	e59f3018 	ldr	r3, [pc, #24]	; 30000f74 <irq_enable_all+0x40>
30000f58:	e3a02000 	mov	r2, #0
30000f5c:	e5832000 	str	r2, [r3]
}
30000f60:	e28bd000 	add	sp, fp, #0
30000f64:	e8bd0800 	pop	{fp}
30000f68:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30000f6c:	4a00001c 	.word	0x4a00001c
30000f70:	560000a4 	.word	0x560000a4
30000f74:	4a000008 	.word	0x4a000008

30000f78 <irq_disable_all>:

/**
 * @brief 屏蔽全部中断
 *
 */
void irq_disable_all() {
30000f78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000f7c:	e28db000 	add	fp, sp, #0
  rINTMSK = 0xffffffff;
30000f80:	e59f3028 	ldr	r3, [pc, #40]	; 30000fb0 <irq_disable_all+0x38>
30000f84:	e3e02000 	mvn	r2, #0
30000f88:	e5832000 	str	r2, [r3]
  rINTSUBMSK = 0xffffffff;
30000f8c:	e59f3020 	ldr	r3, [pc, #32]	; 30000fb4 <irq_disable_all+0x3c>
30000f90:	e3e02000 	mvn	r2, #0
30000f94:	e5832000 	str	r2, [r3]
  rEINTMASK = 0xffffffff;
30000f98:	e59f3018 	ldr	r3, [pc, #24]	; 30000fb8 <irq_disable_all+0x40>
30000f9c:	e3e02000 	mvn	r2, #0
30000fa0:	e5832000 	str	r2, [r3]
}
30000fa4:	e28bd000 	add	sp, fp, #0
30000fa8:	e8bd0800 	pop	{fp}
30000fac:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30000fb0:	4a000008 	.word	0x4a000008
30000fb4:	4a00001c 	.word	0x4a00001c
30000fb8:	560000a4 	.word	0x560000a4

30000fbc <irq_clear>:
/**
 * @brief 清楚某一中断
 *
 * @param irq_num
 */
void irq_clear(int irq_num_prim, int irq_num_sub) {
30000fbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30000fc0:	e28db000 	add	fp, sp, #0
30000fc4:	e24dd00c 	sub	sp, sp, #12
30000fc8:	e50b0008 	str	r0, [fp, #-8]
30000fcc:	e50b100c 	str	r1, [fp, #-12]
  if (irq_num_sub >= 0) {
30000fd0:	e51b300c 	ldr	r3, [fp, #-12]
30000fd4:	e3530000 	cmp	r3, #0
30000fd8:	ba000018 	blt	30001040 <irq_clear+0x84>
    if (irq_num_prim == EINT4_7 ||
30000fdc:	e51b3008 	ldr	r3, [fp, #-8]
30000fe0:	e3530004 	cmp	r3, #4
30000fe4:	0a000002 	beq	30000ff4 <irq_clear+0x38>
30000fe8:	e51b3008 	ldr	r3, [fp, #-8]
30000fec:	e3530005 	cmp	r3, #5
30000ff0:	1a000009 	bne	3000101c <irq_clear+0x60>
        irq_num_prim == EINT8_23) {  // 清楚外部中断挂起寄存器的相应位
      rEINTPEND = ((1 << irq_num_sub) & rEINTPEND);
30000ff4:	e59f30a4 	ldr	r3, [pc, #164]	; 300010a0 <irq_clear+0xe4>
30000ff8:	e3a01001 	mov	r1, #1
30000ffc:	e51b200c 	ldr	r2, [fp, #-12]
30001000:	e1a02211 	lsl	r2, r1, r2
30001004:	e1a01002 	mov	r1, r2
30001008:	e59f2090 	ldr	r2, [pc, #144]	; 300010a0 <irq_clear+0xe4>
3000100c:	e5922000 	ldr	r2, [r2]
30001010:	e0012002 	and	r2, r1, r2
30001014:	e5832000 	str	r2, [r3]
 *
 * @param irq_num
 */
void irq_clear(int irq_num_prim, int irq_num_sub) {
  if (irq_num_sub >= 0) {
    if (irq_num_prim == EINT4_7 ||
30001018:	ea000008 	b	30001040 <irq_clear+0x84>
        irq_num_prim == EINT8_23) {  // 清楚外部中断挂起寄存器的相应位
      rEINTPEND = ((1 << irq_num_sub) & rEINTPEND);
    } else {  // 清除次级中断源挂起寄存器的相应位
      rSUBSRCPND = ((1 << irq_num_sub) & rSUBSRCPND);
3000101c:	e59f3080 	ldr	r3, [pc, #128]	; 300010a4 <irq_clear+0xe8>
30001020:	e3a01001 	mov	r1, #1
30001024:	e51b200c 	ldr	r2, [fp, #-12]
30001028:	e1a02211 	lsl	r2, r1, r2
3000102c:	e1a01002 	mov	r1, r2
30001030:	e59f206c 	ldr	r2, [pc, #108]	; 300010a4 <irq_clear+0xe8>
30001034:	e5922000 	ldr	r2, [r2]
30001038:	e0012002 	and	r2, r1, r2
3000103c:	e5832000 	str	r2, [r3]
    }
  }

  if (irq_num_prim >= 0) {  // 清除主中断源挂起寄存器和挂起寄存器
30001040:	e51b3008 	ldr	r3, [fp, #-8]
30001044:	e3530000 	cmp	r3, #0
30001048:	ba000011 	blt	30001094 <irq_clear+0xd8>
    rSRCPND = ((1 << irq_num_prim) & rSRCPND);
3000104c:	e3a0344a 	mov	r3, #1241513984	; 0x4a000000
30001050:	e3a01001 	mov	r1, #1
30001054:	e51b2008 	ldr	r2, [fp, #-8]
30001058:	e1a02211 	lsl	r2, r1, r2
3000105c:	e1a01002 	mov	r1, r2
30001060:	e3a0244a 	mov	r2, #1241513984	; 0x4a000000
30001064:	e5922000 	ldr	r2, [r2]
30001068:	e0012002 	and	r2, r1, r2
3000106c:	e5832000 	str	r2, [r3]
    rINTPND = ((1 << irq_num_prim) & rINTPND);
30001070:	e59f3030 	ldr	r3, [pc, #48]	; 300010a8 <irq_clear+0xec>
30001074:	e3a01001 	mov	r1, #1
30001078:	e51b2008 	ldr	r2, [fp, #-8]
3000107c:	e1a02211 	lsl	r2, r1, r2
30001080:	e1a01002 	mov	r1, r2
30001084:	e59f201c 	ldr	r2, [pc, #28]	; 300010a8 <irq_clear+0xec>
30001088:	e5922000 	ldr	r2, [r2]
3000108c:	e0012002 	and	r2, r1, r2
30001090:	e5832000 	str	r2, [r3]
  }
}
30001094:	e28bd000 	add	sp, fp, #0
30001098:	e8bd0800 	pop	{fp}
3000109c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300010a0:	560000a8 	.word	0x560000a8
300010a4:	4a000018 	.word	0x4a000018
300010a8:	4a000010 	.word	0x4a000010

300010ac <irq_clear_all>:

/**
 * @brief 清楚全部中断
 *
 */
void irq_clear_all() {
300010ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300010b0:	e28db000 	add	fp, sp, #0
  // 先清除次级中断挂起寄存器和外部中断挂起寄存器
  rSUBSRCPND = 0xffffffff;
300010b4:	e59f3034 	ldr	r3, [pc, #52]	; 300010f0 <irq_clear_all+0x44>
300010b8:	e3e02000 	mvn	r2, #0
300010bc:	e5832000 	str	r2, [r3]
  rEINTPEND = 0xffffffff;
300010c0:	e59f302c 	ldr	r3, [pc, #44]	; 300010f4 <irq_clear_all+0x48>
300010c4:	e3e02000 	mvn	r2, #0
300010c8:	e5832000 	str	r2, [r3]

  // 再清除源中断挂起寄存器的全部位
  rSRCPND = 0xffffffff;
300010cc:	e3a0344a 	mov	r3, #1241513984	; 0x4a000000
300010d0:	e3e02000 	mvn	r2, #0
300010d4:	e5832000 	str	r2, [r3]

  // 再清除中断未决寄存器的全部位
  rINTPND = 0xffffffff;
300010d8:	e59f3018 	ldr	r3, [pc, #24]	; 300010f8 <irq_clear_all+0x4c>
300010dc:	e3e02000 	mvn	r2, #0
300010e0:	e5832000 	str	r2, [r3]
}
300010e4:	e28bd000 	add	sp, fp, #0
300010e8:	e8bd0800 	pop	{fp}
300010ec:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300010f0:	4a000018 	.word	0x4a000018
300010f4:	560000a8 	.word	0x560000a8
300010f8:	4a000010 	.word	0x4a000010

300010fc <irq_handler>:

/**
 * @brief 中断处理函数
 *
 */
void irq_handler() {
300010fc:	e92d4800 	push	{fp, lr}
30001100:	e28db004 	add	fp, sp, #4
30001104:	e24dd008 	sub	sp, sp, #8
  int irq_num = rINTOFFSET;
30001108:	e59f3024 	ldr	r3, [pc, #36]	; 30001134 <irq_handler+0x38>
3000110c:	e5933000 	ldr	r3, [r3]
30001110:	e50b3008 	str	r3, [fp, #-8]

  irq_handler_call[irq_num]();
30001114:	e51b2008 	ldr	r2, [fp, #-8]
30001118:	e59f3018 	ldr	r3, [pc, #24]	; 30001138 <irq_handler+0x3c>
3000111c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
30001120:	e1a0e00f 	mov	lr, pc
30001124:	e12fff13 	msr	CPSR_fsxc, r3, lsl pc
}
30001128:	e24bd004 	sub	sp, fp, #4
3000112c:	e8bd4800 	pop	{fp, lr}
30001130:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30001134:	4a000014 	.word	0x4a000014
30001138:	3000c328 	.word	0x3000c328

3000113c <irq_handler_register>:
 * @brief 为中断向量号注册中断函数
 *
 * @param irq_num
 * @param handler_for_irq
 */
void irq_handler_register(int irq_num, irq_handler_t handler_for_irq) {
3000113c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001140:	e28db000 	add	fp, sp, #0
30001144:	e24dd00c 	sub	sp, sp, #12
30001148:	e50b0008 	str	r0, [fp, #-8]
3000114c:	e50b100c 	str	r1, [fp, #-12]
  // ASSERT(irq_num >= 0 && irq_num < IRQ_NUM_MAX);

  irq_handler_call[irq_num] = handler_for_irq;
30001150:	e51b2008 	ldr	r2, [fp, #-8]
30001154:	e59f3010 	ldr	r3, [pc, #16]	; 3000116c <irq_handler_register+0x30>
30001158:	e51b100c 	ldr	r1, [fp, #-12]
3000115c:	e7831102 	str	r1, [r3, r2, lsl #2]
}
30001160:	e28bd000 	add	sp, fp, #0
30001164:	e8bd0800 	pop	{fp}
30001168:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000116c:	3000c328 	.word	0x3000c328

30001170 <irq_handler_for_eint8_23>:

/**
 * @brief 外部中断8-23的中断处理函数
 *
 */
void irq_handler_for_eint8_23() {
30001170:	e92d4800 	push	{fp, lr}
30001174:	e28db004 	add	fp, sp, #4
  // ASSERT(rINTOFFSET = EINT8_23);


  if (((1 << EINT8_SUB) & rEINTPEND) &&
30001178:	e59f307c 	ldr	r3, [pc, #124]	; 300011fc <irq_handler_for_eint8_23+0x8c>
3000117c:	e5933000 	ldr	r3, [r3]
30001180:	e2033c01 	and	r3, r3, #256	; 0x100
30001184:	e3530000 	cmp	r3, #0
30001188:	0a000009 	beq	300011b4 <irq_handler_for_eint8_23+0x44>
      !((1 << EINT8_SUB) & rEINTMASK)) {  // EINT8触发成功
3000118c:	e59f306c 	ldr	r3, [pc, #108]	; 30001200 <irq_handler_for_eint8_23+0x90>
30001190:	e5933000 	ldr	r3, [r3]
30001194:	e2033c01 	and	r3, r3, #256	; 0x100
 */
void irq_handler_for_eint8_23() {
  // ASSERT(rINTOFFSET = EINT8_23);


  if (((1 << EINT8_SUB) & rEINTPEND) &&
30001198:	e3530000 	cmp	r3, #0
3000119c:	1a000004 	bne	300011b4 <irq_handler_for_eint8_23+0x44>
      !((1 << EINT8_SUB) & rEINTMASK)) {  // EINT8触发成功

    // 清除中断
    irq_clear(EINT8_PRIM, EINT8_SUB);
300011a0:	e3a00005 	mov	r0, #5
300011a4:	e3a01008 	mov	r1, #8
300011a8:	ebffff83 	bl	30000fbc <irq_clear>

    //打开中断,测试中断嵌套效果
    // cpu_irq_start();

    uart_send_str("EINT8 has complete!\n");
300011ac:	e59f0050 	ldr	r0, [pc, #80]	; 30001204 <irq_handler_for_eint8_23+0x94>
300011b0:	eb00011b 	bl	30001624 <uart_send_str>
  }

  if (((1 << EINT11_SUB) & rEINTPEND) &&
300011b4:	e59f3040 	ldr	r3, [pc, #64]	; 300011fc <irq_handler_for_eint8_23+0x8c>
300011b8:	e5933000 	ldr	r3, [r3]
300011bc:	e2033b02 	and	r3, r3, #2048	; 0x800
300011c0:	e3530000 	cmp	r3, #0
300011c4:	0a000009 	beq	300011f0 <irq_handler_for_eint8_23+0x80>
      !((1 << EINT11_SUB) & rEINTMASK)) {  // EINT11触发成功
300011c8:	e59f3030 	ldr	r3, [pc, #48]	; 30001200 <irq_handler_for_eint8_23+0x90>
300011cc:	e5933000 	ldr	r3, [r3]
300011d0:	e2033b02 	and	r3, r3, #2048	; 0x800
    // cpu_irq_start();

    uart_send_str("EINT8 has complete!\n");
  }

  if (((1 << EINT11_SUB) & rEINTPEND) &&
300011d4:	e3530000 	cmp	r3, #0
300011d8:	1a000004 	bne	300011f0 <irq_handler_for_eint8_23+0x80>
      !((1 << EINT11_SUB) & rEINTMASK)) {  // EINT11触发成功
    irq_clear(EINT11_PRIM, EINT11_SUB);
300011dc:	e3a00005 	mov	r0, #5
300011e0:	e3a0100b 	mov	r1, #11
300011e4:	ebffff74 	bl	30000fbc <irq_clear>

    //打开中断,测试中断嵌套效果
    // cpu_irq_start();
  
    uart_send_str("EINT11 has complete!\n");
300011e8:	e59f0018 	ldr	r0, [pc, #24]	; 30001208 <irq_handler_for_eint8_23+0x98>
300011ec:	eb00010c 	bl	30001624 <uart_send_str>
  }
}
300011f0:	e24bd004 	sub	sp, fp, #4
300011f4:	e8bd4800 	pop	{fp, lr}
300011f8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300011fc:	560000a8 	.word	0x560000a8
30001200:	560000a4 	.word	0x560000a4
30001204:	3000c0f8 	.word	0x3000c0f8
30001208:	3000c110 	.word	0x3000c110

3000120c <irq_init>:

/**
 * @brief 初始化irq中断向量表
 *
 */
void irq_init() {
3000120c:	e92d4800 	push	{fp, lr}
30001210:	e28db004 	add	fp, sp, #4
  uart_printf("irq init start......\n");
30001214:	e59f0058 	ldr	r0, [pc, #88]	; 30001274 <irq_init+0x68>
30001218:	eb000116 	bl	30001678 <uart_printf>
  // 设置中断模式，全部为irq
  rINTMOD = 0x0;
3000121c:	e59f3054 	ldr	r3, [pc, #84]	; 30001278 <irq_init+0x6c>
30001220:	e3a02000 	mov	r2, #0
30001224:	e5832000 	str	r2, [r3]

  // 设置中断优先级,0~6个中断发生模块全部启用轮询
  rPRIORITY = 0x7f;
30001228:	e59f304c 	ldr	r3, [pc, #76]	; 3000127c <irq_init+0x70>
3000122c:	e3a0207f 	mov	r2, #127	; 0x7f
30001230:	e5832000 	str	r2, [r3]

  irq_clear_all();
30001234:	ebffff9c 	bl	300010ac <irq_clear_all>

  irq_enable(EINT8_PRIM, EINT8_SUB);
30001238:	e3a00005 	mov	r0, #5
3000123c:	e3a01008 	mov	r1, #8
30001240:	ebfffed2 	bl	30000d90 <irq_enable>
  irq_enable(EINT11_PRIM, EINT11_SUB);
30001244:	e3a00005 	mov	r0, #5
30001248:	e3a0100b 	mov	r1, #11
3000124c:	ebfffecf 	bl	30000d90 <irq_enable>

  // 注册中断处理函数
  irq_handler_register(EINT8_23, irq_handler_for_eint8_23);
30001250:	e59f3028 	ldr	r3, [pc, #40]	; 30001280 <irq_init+0x74>
30001254:	e3a00005 	mov	r0, #5
30001258:	e1a01003 	mov	r1, r3
3000125c:	ebffffb6 	bl	3000113c <irq_handler_register>

  uart_printf("irq init success......\n");
30001260:	e59f001c 	ldr	r0, [pc, #28]	; 30001284 <irq_init+0x78>
30001264:	eb000103 	bl	30001678 <uart_printf>
30001268:	e24bd004 	sub	sp, fp, #4
3000126c:	e8bd4800 	pop	{fp, lr}
30001270:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30001274:	3000c128 	.word	0x3000c128
30001278:	4a000004 	.word	0x4a000004
3000127c:	4a00000c 	.word	0x4a00000c
30001280:	30001170 	.word	0x30001170
30001284:	3000c140 	.word	0x3000c140

30001288 <cpu_irq_start>:

/**
 * @brief 开中断
 *
 */
__attribute__((always_inline)) static void cpu_irq_start() {
30001288:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
3000128c:	e28db000 	add	fp, sp, #0
  __asm__ __volatile__(
30001290:	e10f0000 	mrs	r0, CPSR
30001294:	e3c00080 	bic	r0, r0, #128	; 0x80
30001298:	e129f000 	msr	CPSR_fc, r0
      "mrs r0, cpsr\n"
      "bic r0, #0x80\n"
      "msr cpsr, r0\n" ::
          : "r0");
}
3000129c:	e28bd000 	add	sp, fp, #0
300012a0:	e8bd0800 	pop	{fp}
300012a4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300012a8 <cpu_irq_close>:

/**
 * @brief 关中断
 *
 */
__attribute__((always_inline)) static void cpu_irq_close() {
300012a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300012ac:	e28db000 	add	fp, sp, #0
  __asm__ __volatile__(
300012b0:	e10f0000 	mrs	r0, CPSR
300012b4:	e3800080 	orr	r0, r0, #128	; 0x80
300012b8:	e129f000 	msr	CPSR_fc, r0
      "mrs r0, cpsr\n"
      "orr r0, #0x80\n"
      "msr cpsr, r0\n" ::
          : "r0");
}
300012bc:	e28bd000 	add	sp, fp, #0
300012c0:	e8bd0800 	pop	{fp}
300012c4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300012c8 <irq_handler_for_timer4>:

/**
 * @brief 定时器中断处理函数
 *
 */
static void irq_handler_for_timer4() {
300012c8:	e92d4800 	push	{fp, lr}
300012cc:	e28db004 	add	fp, sp, #4
  // ASSERT((rINTOFFSET == INT_TIMER4));
  // 清除中断
  irq_clear(INT_TIMER4, NOSUBINT);
300012d0:	e3a0000e 	mov	r0, #14
300012d4:	e3e01000 	mvn	r1, #0
300012d8:	ebffff37 	bl	30000fbc <irq_clear>

  OSTimeTick();
300012dc:	eb000563 	bl	30002870 <OSTimeTick>
}
300012e0:	e24bd004 	sub	sp, fp, #4
300012e4:	e8bd4800 	pop	{fp, lr}
300012e8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300012ec <timer_init>:

/**
 * @brief 定时器初始化，使用定时器4作为系统内核定时器
 *
 */
void timer_init(uint32_t ticks_per_sec) {
300012ec:	e92d4810 	push	{r4, fp, lr}
300012f0:	e28db008 	add	fp, sp, #8
300012f4:	e24dd00c 	sub	sp, sp, #12
300012f8:	e50b0010 	str	r0, [fp, #-16]
  rTCFG0 = rTCFG0_INIT;
300012fc:	e3a03451 	mov	r3, #1358954496	; 0x51000000
30001300:	e3a02cf9 	mov	r2, #63744	; 0xf900
30001304:	e5832000 	str	r2, [r3]
  rTCFG1 = rTCGG1_INIT;
30001308:	e59f309c 	ldr	r3, [pc, #156]	; 300013ac <timer_init+0xc0>
3000130c:	e3a02801 	mov	r2, #65536	; 0x10000
30001310:	e5832000 	str	r2, [r3]

  // 先关闭一下定时器,调试用
  rTCON = 0x0;
30001314:	e59f3094 	ldr	r3, [pc, #148]	; 300013b0 <timer_init+0xc4>
30001318:	e3a02000 	mov	r2, #0
3000131c:	e5832000 	str	r2, [r3]

  // 设置定时器每一个时间片触发一次中断
  rTCNTB4 = (uint32_t)(1 * 1000 * (1000 / ticks_per_sec)) / TIMER_RESOLVING_POWER;
30001320:	e59f408c 	ldr	r4, [pc, #140]	; 300013b4 <timer_init+0xc8>
30001324:	e3a00ffa 	mov	r0, #1000	; 0x3e8
30001328:	e51b1010 	ldr	r1, [fp, #-16]
3000132c:	eb002b22 	bl	3000bfbc <__aeabi_uidiv>
30001330:	e1a03000 	mov	r3, r0
30001334:	e1a02003 	mov	r2, r3
30001338:	e1a03002 	mov	r3, r2
3000133c:	e1a03103 	lsl	r3, r3, #2
30001340:	e0833002 	add	r3, r3, r2
30001344:	e1a02103 	lsl	r2, r3, #2
30001348:	e0833002 	add	r3, r3, r2
3000134c:	e1a02103 	lsl	r2, r3, #2
30001350:	e0833002 	add	r3, r3, r2
30001354:	e1a03183 	lsl	r3, r3, #3
30001358:	e1a01003 	mov	r1, r3
3000135c:	e59f2054 	ldr	r2, [pc, #84]	; 300013b8 <timer_init+0xcc>
30001360:	e0830192 	umull	r0, r3, r2, r1
30001364:	e1a03223 	lsr	r3, r3, #4
30001368:	e5843000 	str	r3, [r4]
  rTCON = HAND_REFLASH_4;  // 手动更新定时器4的计数器
3000136c:	e59f303c 	ldr	r3, [pc, #60]	; 300013b0 <timer_init+0xc4>
30001370:	e3a02602 	mov	r2, #2097152	; 0x200000
30001374:	e5832000 	str	r2, [r3]
  rTCON = AUTORELOAD_AND_START_4;  // 关闭手动更新位,设置自动重载并打开定时器4
30001378:	e59f3030 	ldr	r3, [pc, #48]	; 300013b0 <timer_init+0xc4>
3000137c:	e3a02605 	mov	r2, #5242880	; 0x500000
30001380:	e5832000 	str	r2, [r3]

  irq_handler_register(INT_TIMER4, irq_handler_for_timer4);
30001384:	e59f3030 	ldr	r3, [pc, #48]	; 300013bc <timer_init+0xd0>
30001388:	e3a0000e 	mov	r0, #14
3000138c:	e1a01003 	mov	r1, r3
30001390:	ebffff69 	bl	3000113c <irq_handler_register>
  irq_enable(INT_TIMER4, NOSUBINT);
30001394:	e3a0000e 	mov	r0, #14
30001398:	e3e01000 	mvn	r1, #0
3000139c:	ebfffe7b 	bl	30000d90 <irq_enable>
300013a0:	e24bd008 	sub	sp, fp, #8
300013a4:	e8bd4810 	pop	{r4, fp, lr}
300013a8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300013ac:	51000004 	.word	0x51000004
300013b0:	51000008 	.word	0x51000008
300013b4:	5100003c 	.word	0x5100003c
300013b8:	cccccccd 	.word	0xcccccccd
300013bc:	300012c8 	.word	0x300012c8

300013c0 <cpu_irq_start>:

/**
 * @brief 开中断
 *
 */
__attribute__((always_inline)) static void cpu_irq_start() {
300013c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300013c4:	e28db000 	add	fp, sp, #0
  __asm__ __volatile__(
300013c8:	e10f0000 	mrs	r0, CPSR
300013cc:	e3c00080 	bic	r0, r0, #128	; 0x80
300013d0:	e129f000 	msr	CPSR_fc, r0
      "mrs r0, cpsr\n"
      "bic r0, #0x80\n"
      "msr cpsr, r0\n" ::
          : "r0");
}
300013d4:	e28bd000 	add	sp, fp, #0
300013d8:	e8bd0800 	pop	{fp}
300013dc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300013e0 <cpu_irq_close>:

/**
 * @brief 关中断
 *
 */
__attribute__((always_inline)) static void cpu_irq_close() {
300013e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300013e4:	e28db000 	add	fp, sp, #0
  __asm__ __volatile__(
300013e8:	e10f0000 	mrs	r0, CPSR
300013ec:	e3800080 	orr	r0, r0, #128	; 0x80
300013f0:	e129f000 	msr	CPSR_fc, r0
      "mrs r0, cpsr\n"
      "orr r0, #0x80\n"
      "msr cpsr, r0\n" ::
          : "r0");
}
300013f4:	e28bd000 	add	sp, fp, #0
300013f8:	e8bd0800 	pop	{fp}
300013fc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001400 <uart_init>:
static int curr_uart_index __attribute__((section(".data"))) = 0;

void irq_handler_for_uartRX0();

/**串口初始化*/
void uart_init(int uart_inedx) {
30001400:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001404:	e28db000 	add	fp, sp, #0
30001408:	e24dd00c 	sub	sp, sp, #12
3000140c:	e50b0008 	str	r0, [fp, #-8]
  rUFCON0 = 0x0;  // UART channel 0 FIFO control register, FIFO disable
30001410:	e3a03285 	mov	r3, #1342177288	; 0x50000008
30001414:	e3a02000 	mov	r2, #0
30001418:	e5832000 	str	r2, [r3]
  rUFCON1 = 0x0;  // UART channel 1 FIFO control register, FIFO disable
3000141c:	e59f3130 	ldr	r3, [pc, #304]	; 30001554 <uart_init+0x154>
30001420:	e3a02000 	mov	r2, #0
30001424:	e5832000 	str	r2, [r3]
  rUFCON2 = 0x0;  // UART channel 2 FIFO control register, FIFO disable
30001428:	e59f3128 	ldr	r3, [pc, #296]	; 30001558 <uart_init+0x158>
3000142c:	e3a02000 	mov	r2, #0
30001430:	e5832000 	str	r2, [r3]
  rUMCON0 = 0x0;  // UART chaneel 0 MODEM control register, AFC disable
30001434:	e3a032c5 	mov	r3, #1342177292	; 0x5000000c
30001438:	e3a02000 	mov	r2, #0
3000143c:	e5832000 	str	r2, [r3]
  rUMCON1 = 0x0;  // UART chaneel 1 MODEM control register, AFC disable
30001440:	e59f3114 	ldr	r3, [pc, #276]	; 3000155c <uart_init+0x15c>
30001444:	e3a02000 	mov	r2, #0
30001448:	e5832000 	str	r2, [r3]

  switch (uart_inedx) {
3000144c:	e51b3008 	ldr	r3, [fp, #-8]
30001450:	e3530001 	cmp	r3, #1
30001454:	0a000016 	beq	300014b4 <uart_init+0xb4>
30001458:	e3530002 	cmp	r3, #2
3000145c:	0a000027 	beq	30001500 <uart_init+0x100>
30001460:	e3530000 	cmp	r3, #0
30001464:	1a000037 	bne	30001548 <uart_init+0x148>
    case 0: {
      // UART0
      rULCON0 =
30001468:	e3a03205 	mov	r3, #1342177280	; 0x50000000
3000146c:	e3a02003 	mov	r2, #3
30001470:	e5832000 	str	r2, [r3]
                //  Loop-back, Send break,  Transmit Mode, Receive Mode
                //      0          1       0    ,     0          1        0 0
                //      ,       01          01
                //    PCLK       Level    Pulse    Disable    Generate  Normal
                //    Normal        Interrupt or Polling
      rUCON0 = 0x245;  // Control register
30001474:	e3a03245 	mov	r3, #1342177284	; 0x50000004
30001478:	e59f20e0 	ldr	r2, [pc, #224]	; 30001560 <uart_init+0x160>
3000147c:	e5832000 	str	r2, [r3]
      rUBRDIV0 = ((int)(OS_PCLK / (16 * BAUDRATE)) -
30001480:	e59f30dc 	ldr	r3, [pc, #220]	; 30001564 <uart_init+0x164>
30001484:	e3a0201a 	mov	r2, #26
30001488:	e5832000 	str	r2, [r3]
      // irq_handler_register(INT_UART0_ERR_PRIM,
      //                      (irq_handler_t)irq_handler_for_uartRX0);
      // irq_enable(INT_UART0_ERR_PRIM, INT_UART0_ERR_SUB);

      // 初始化串口设备表
      uart_table[0].in_addr = (volatile unsigned *)URXH0;
3000148c:	e59f30d4 	ldr	r3, [pc, #212]	; 30001568 <uart_init+0x168>
30001490:	e59f20d4 	ldr	r2, [pc, #212]	; 3000156c <uart_init+0x16c>
30001494:	e5832000 	str	r2, [r3]
      uart_table[0].out_addr = (volatile unsigned *)UTXH0;
30001498:	e59f30c8 	ldr	r3, [pc, #200]	; 30001568 <uart_init+0x168>
3000149c:	e59f20cc 	ldr	r2, [pc, #204]	; 30001570 <uart_init+0x170>
300014a0:	e5832004 	str	r2, [r3, #4]
      uart_table[0].state_addr = (volatile unsigned *)UTRSTAT0;
300014a4:	e59f30bc 	ldr	r3, [pc, #188]	; 30001568 <uart_init+0x168>
300014a8:	e59f20c4 	ldr	r2, [pc, #196]	; 30001574 <uart_init+0x174>
300014ac:	e5832008 	str	r2, [r3, #8]
    } break;
300014b0:	ea000024 	b	30001548 <uart_init+0x148>

    case 1: {
      // UART1
      rULCON1 = 0x3;
300014b4:	e59f30bc 	ldr	r3, [pc, #188]	; 30001578 <uart_init+0x178>
300014b8:	e3a02003 	mov	r2, #3
300014bc:	e5832000 	str	r2, [r3]
      rUCON1 = 0x245;
300014c0:	e59f30b4 	ldr	r3, [pc, #180]	; 3000157c <uart_init+0x17c>
300014c4:	e59f2094 	ldr	r2, [pc, #148]	; 30001560 <uart_init+0x160>
300014c8:	e5832000 	str	r2, [r3]
      rUBRDIV1 = ((int)(OS_PCLK / (16 * BAUDRATE)) - 1);
300014cc:	e59f30ac 	ldr	r3, [pc, #172]	; 30001580 <uart_init+0x180>
300014d0:	e3a0201a 	mov	r2, #26
300014d4:	e5832000 	str	r2, [r3]
      uart_table[1].in_addr = (volatile unsigned *)URXH1;
300014d8:	e59f3088 	ldr	r3, [pc, #136]	; 30001568 <uart_init+0x168>
300014dc:	e59f20a0 	ldr	r2, [pc, #160]	; 30001584 <uart_init+0x184>
300014e0:	e583200c 	str	r2, [r3, #12]
      uart_table[1].out_addr = (volatile unsigned *)UTXH1;
300014e4:	e59f307c 	ldr	r3, [pc, #124]	; 30001568 <uart_init+0x168>
300014e8:	e59f2098 	ldr	r2, [pc, #152]	; 30001588 <uart_init+0x188>
300014ec:	e5832010 	str	r2, [r3, #16]
      uart_table[1].state_addr = (volatile unsigned *)UTRSTAT1;
300014f0:	e59f3070 	ldr	r3, [pc, #112]	; 30001568 <uart_init+0x168>
300014f4:	e59f2090 	ldr	r2, [pc, #144]	; 3000158c <uart_init+0x18c>
300014f8:	e5832014 	str	r2, [r3, #20]
    } break;
300014fc:	ea000011 	b	30001548 <uart_init+0x148>

    case 2: {
      // UART2
      rULCON2 = 0x3;
30001500:	e59f3088 	ldr	r3, [pc, #136]	; 30001590 <uart_init+0x190>
30001504:	e3a02003 	mov	r2, #3
30001508:	e5832000 	str	r2, [r3]
      rUCON2 = 0x245;
3000150c:	e59f3080 	ldr	r3, [pc, #128]	; 30001594 <uart_init+0x194>
30001510:	e59f2048 	ldr	r2, [pc, #72]	; 30001560 <uart_init+0x160>
30001514:	e5832000 	str	r2, [r3]
      rUBRDIV2 = ((int)(OS_PCLK / (16 * BAUDRATE)) - 1);
30001518:	e59f3078 	ldr	r3, [pc, #120]	; 30001598 <uart_init+0x198>
3000151c:	e3a0201a 	mov	r2, #26
30001520:	e5832000 	str	r2, [r3]

      uart_table[2].in_addr = (volatile unsigned *)URXH2;
30001524:	e59f303c 	ldr	r3, [pc, #60]	; 30001568 <uart_init+0x168>
30001528:	e59f206c 	ldr	r2, [pc, #108]	; 3000159c <uart_init+0x19c>
3000152c:	e5832018 	str	r2, [r3, #24]
      uart_table[2].out_addr = (volatile unsigned *)UTXH2;
30001530:	e59f3030 	ldr	r3, [pc, #48]	; 30001568 <uart_init+0x168>
30001534:	e59f2064 	ldr	r2, [pc, #100]	; 300015a0 <uart_init+0x1a0>
30001538:	e583201c 	str	r2, [r3, #28]
      uart_table[2].state_addr = (volatile unsigned *)UTRSTAT2;
3000153c:	e59f3024 	ldr	r3, [pc, #36]	; 30001568 <uart_init+0x168>
30001540:	e59f205c 	ldr	r2, [pc, #92]	; 300015a4 <uart_init+0x1a4>
30001544:	e5832020 	str	r2, [r3, #32]
    } break;

    default:
      break;
  }
}
30001548:	e28bd000 	add	sp, fp, #0
3000154c:	e8bd0800 	pop	{fp}
30001550:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30001554:	50004008 	.word	0x50004008
30001558:	50008008 	.word	0x50008008
3000155c:	5000400c 	.word	0x5000400c
30001560:	00000245 	.word	0x00000245
30001564:	50000028 	.word	0x50000028
30001568:	3000c2d8 	.word	0x3000c2d8
3000156c:	50000024 	.word	0x50000024
30001570:	50000020 	.word	0x50000020
30001574:	50000010 	.word	0x50000010
30001578:	50004000 	.word	0x50004000
3000157c:	50004004 	.word	0x50004004
30001580:	50004028 	.word	0x50004028
30001584:	50004024 	.word	0x50004024
30001588:	50004020 	.word	0x50004020
3000158c:	50004010 	.word	0x50004010
30001590:	50008000 	.word	0x50008000
30001594:	50008004 	.word	0x50008004
30001598:	50008028 	.word	0x50008028
3000159c:	50008024 	.word	0x50008024
300015a0:	50008020 	.word	0x50008020
300015a4:	50008010 	.word	0x50008010

300015a8 <uart_send_byte>:
/**
 * @brief 串口发送字节
 *
 * @param data
 */
void uart_send_byte(uint8_t data) {
300015a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300015ac:	e28db000 	add	fp, sp, #0
300015b0:	e24dd014 	sub	sp, sp, #20
300015b4:	e1a03000 	mov	r3, r0
300015b8:	e54b300d 	strb	r3, [fp, #-13]
  uart_t *uart = &uart_table[curr_uart_index];
300015bc:	e59f3058 	ldr	r3, [pc, #88]	; 3000161c <uart_send_byte+0x74>
300015c0:	e5933000 	ldr	r3, [r3]
300015c4:	e1a02003 	mov	r2, r3
300015c8:	e1a03002 	mov	r3, r2
300015cc:	e1a03083 	lsl	r3, r3, #1
300015d0:	e0833002 	add	r3, r3, r2
300015d4:	e1a03103 	lsl	r3, r3, #2
300015d8:	e1a02003 	mov	r2, r3
300015dc:	e59f303c 	ldr	r3, [pc, #60]	; 30001620 <uart_send_byte+0x78>
300015e0:	e0823003 	add	r3, r2, r3
300015e4:	e50b3008 	str	r3, [fp, #-8]
  while (!((*(uart->state_addr)) & STATE_TRA_BUFF_ISEMPTY))
300015e8:	e51b3008 	ldr	r3, [fp, #-8]
300015ec:	e5933008 	ldr	r3, [r3, #8]
300015f0:	e5933000 	ldr	r3, [r3]
300015f4:	e2033002 	and	r3, r3, #2
300015f8:	e3530000 	cmp	r3, #0
300015fc:	0afffff9 	beq	300015e8 <uart_send_byte+0x40>
    ;
  *(uart->out_addr) = data;
30001600:	e51b3008 	ldr	r3, [fp, #-8]
30001604:	e5933004 	ldr	r3, [r3, #4]
30001608:	e55b200d 	ldrb	r2, [fp, #-13]
3000160c:	e5832000 	str	r2, [r3]
}
30001610:	e28bd000 	add	sp, fp, #0
30001614:	e8bd0800 	pop	{fp}
30001618:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000161c:	3000c2fc 	.word	0x3000c2fc
30001620:	3000c2d8 	.word	0x3000c2d8

30001624 <uart_send_str>:
/**
 * @brief 串口发送字符串
 *
 * @param str
 */
void uart_send_str(const char *str) {
30001624:	e92d4800 	push	{fp, lr}
30001628:	e28db004 	add	fp, sp, #4
3000162c:	e24dd010 	sub	sp, sp, #16
30001630:	e50b0010 	str	r0, [fp, #-16]
  const char *temp = str;
30001634:	e51b3010 	ldr	r3, [fp, #-16]
30001638:	e50b3008 	str	r3, [fp, #-8]
  while (*temp) {
3000163c:	ea000006 	b	3000165c <uart_send_str+0x38>
    uart_send_byte(*(temp++));
30001640:	e51b3008 	ldr	r3, [fp, #-8]
30001644:	e5d33000 	ldrb	r3, [r3]
30001648:	e51b2008 	ldr	r2, [fp, #-8]
3000164c:	e2822001 	add	r2, r2, #1
30001650:	e50b2008 	str	r2, [fp, #-8]
30001654:	e1a00003 	mov	r0, r3
30001658:	ebffffd2 	bl	300015a8 <uart_send_byte>
 *
 * @param str
 */
void uart_send_str(const char *str) {
  const char *temp = str;
  while (*temp) {
3000165c:	e51b3008 	ldr	r3, [fp, #-8]
30001660:	e5d33000 	ldrb	r3, [r3]
30001664:	e3530000 	cmp	r3, #0
30001668:	1afffff4 	bne	30001640 <uart_send_str+0x1c>
    uart_send_byte(*(temp++));
  }
}
3000166c:	e24bd004 	sub	sp, fp, #4
30001670:	e8bd4800 	pop	{fp, lr}
30001674:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001678 <uart_printf>:
 * @brief 串口格式化输出
 *
 * @param fmt
 * @param ...
 */
void uart_printf(char *fmt, ...) {
30001678:	e92d000f 	push	{r0, r1, r2, r3}
3000167c:	e92d4800 	push	{fp, lr}
30001680:	e28db004 	add	fp, sp, #4
30001684:	e24ddf42 	sub	sp, sp, #264	; 0x108
  char string[256];

  kernel_memset(string, 0, sizeof(string));
30001688:	e24b3f41 	sub	r3, fp, #260	; 0x104
3000168c:	e1a00003 	mov	r0, r3
30001690:	e3a01000 	mov	r1, #0
30001694:	e3a02c01 	mov	r2, #256	; 0x100
30001698:	ebfffbbb 	bl	3000058c <kernel_memset>

  va_list ap;
  va_start(ap, fmt);
3000169c:	e28b3008 	add	r3, fp, #8
300016a0:	e50b3108 	str	r3, [fp, #-264]	; 0x108

  kernel_vsprintf(string, fmt, ap);
300016a4:	e24b3f41 	sub	r3, fp, #260	; 0x104
300016a8:	e1a00003 	mov	r0, r3
300016ac:	e59b1004 	ldr	r1, [fp, #4]
300016b0:	e51b2108 	ldr	r2, [fp, #-264]	; 0x108
300016b4:	ebfffc27 	bl	30000758 <kernel_vsprintf>
  va_end(ap);

  uart_send_str(string);
300016b8:	e24b3f41 	sub	r3, fp, #260	; 0x104
300016bc:	e1a00003 	mov	r0, r3
300016c0:	ebffffd7 	bl	30001624 <uart_send_str>
}
300016c4:	e24bd004 	sub	sp, fp, #4
300016c8:	e8bd4800 	pop	{fp, lr}
300016cc:	e28dd010 	add	sp, sp, #16
300016d0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300016d4 <uart_control>:

/**
 * @brief 向uart设备发送控制指令
 *
 */
int uart_control(int cmd, int arg0, int arg1) {}
300016d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300016d8:	e28db000 	add	fp, sp, #0
300016dc:	e24dd014 	sub	sp, sp, #20
300016e0:	e50b0008 	str	r0, [fp, #-8]
300016e4:	e50b100c 	str	r1, [fp, #-12]
300016e8:	e50b2010 	str	r2, [fp, #-16]
300016ec:	e28bd000 	add	sp, fp, #0
300016f0:	e8bd0800 	pop	{fp}
300016f4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300016f8 <irq_handler_for_uartRX0>:

void irq_handler_for_uartRX0() {
300016f8:	e92d4800 	push	{fp, lr}
300016fc:	e28db004 	add	fp, sp, #4
30001700:	e24dd008 	sub	sp, sp, #8
  // ASSERT((rINTOFFSET == INT_UART0));

  if ((rSUBSRCPND & (1 << INT_RXD0_SUB)) &&
30001704:	e59f30ac 	ldr	r3, [pc, #172]	; 300017b8 <irq_handler_for_uartRX0+0xc0>
30001708:	e5933000 	ldr	r3, [r3]
3000170c:	e2033001 	and	r3, r3, #1
30001710:	e20330ff 	and	r3, r3, #255	; 0xff
30001714:	e3530000 	cmp	r3, #0
30001718:	0a000016 	beq	30001778 <irq_handler_for_uartRX0+0x80>
      !(rINTSUBMSK & (1 << INT_RXD0_SUB))) {
3000171c:	e59f3098 	ldr	r3, [pc, #152]	; 300017bc <irq_handler_for_uartRX0+0xc4>
30001720:	e5933000 	ldr	r3, [r3]
30001724:	e2033001 	and	r3, r3, #1
int uart_control(int cmd, int arg0, int arg1) {}

void irq_handler_for_uartRX0() {
  // ASSERT((rINTOFFSET == INT_UART0));

  if ((rSUBSRCPND & (1 << INT_RXD0_SUB)) &&
30001728:	e3530000 	cmp	r3, #0
3000172c:	1a000011 	bne	30001778 <irq_handler_for_uartRX0+0x80>
      !(rINTSUBMSK & (1 << INT_RXD0_SUB))) {
    // 清除中断位
    irq_clear(INT_RXD0_PRIM, INT_RXD0_SUB);
30001730:	e3a0001c 	mov	r0, #28
30001734:	e3a01000 	mov	r1, #0
30001738:	ebfffe1f 	bl	30000fbc <irq_clear>

    uart_t *uart = uart_table + curr_uart_index;
3000173c:	e59f307c 	ldr	r3, [pc, #124]	; 300017c0 <irq_handler_for_uartRX0+0xc8>
30001740:	e5933000 	ldr	r3, [r3]
30001744:	e1a02003 	mov	r2, r3
30001748:	e1a03002 	mov	r3, r2
3000174c:	e1a03083 	lsl	r3, r3, #1
30001750:	e0833002 	add	r3, r3, r2
30001754:	e1a03103 	lsl	r3, r3, #2
30001758:	e1a02003 	mov	r2, r3
3000175c:	e59f3060 	ldr	r3, [pc, #96]	; 300017c4 <irq_handler_for_uartRX0+0xcc>
30001760:	e0823003 	add	r3, r2, r3
30001764:	e50b3008 	str	r3, [fp, #-8]

    // 判断状态寄存器接收缓冲区位，是否有数据可读
    if (*(uart->state_addr) & STATE_REC_BUFF_ISREADY) {
30001768:	e51b3008 	ldr	r3, [fp, #-8]
3000176c:	e5933008 	ldr	r3, [r3, #8]
30001770:	e5933000 	ldr	r3, [r3]
int uart_control(int cmd, int arg0, int arg1) {}

void irq_handler_for_uartRX0() {
  // ASSERT((rINTOFFSET == INT_UART0));

  if ((rSUBSRCPND & (1 << INT_RXD0_SUB)) &&
30001774:	ea00000c 	b	300017ac <irq_handler_for_uartRX0+0xb4>
    uart_t *uart = uart_table + curr_uart_index;

    // 判断状态寄存器接收缓冲区位，是否有数据可读
    if (*(uart->state_addr) & STATE_REC_BUFF_ISREADY) {
    }
  } else if ((rSUBSRCPND & (1 << INT_UART0_ERR_SUB)) &&
30001778:	e59f3038 	ldr	r3, [pc, #56]	; 300017b8 <irq_handler_for_uartRX0+0xc0>
3000177c:	e5933000 	ldr	r3, [r3]
30001780:	e2033004 	and	r3, r3, #4
30001784:	e3530000 	cmp	r3, #0
30001788:	0a000007 	beq	300017ac <irq_handler_for_uartRX0+0xb4>
             !(rINTSUBMSK & (1 << INT_UART0_ERR_SUB))) {
3000178c:	e59f3028 	ldr	r3, [pc, #40]	; 300017bc <irq_handler_for_uartRX0+0xc4>
30001790:	e5933000 	ldr	r3, [r3]
30001794:	e2033004 	and	r3, r3, #4
    uart_t *uart = uart_table + curr_uart_index;

    // 判断状态寄存器接收缓冲区位，是否有数据可读
    if (*(uart->state_addr) & STATE_REC_BUFF_ISREADY) {
    }
  } else if ((rSUBSRCPND & (1 << INT_UART0_ERR_SUB)) &&
30001798:	e3530000 	cmp	r3, #0
3000179c:	1a000002 	bne	300017ac <irq_handler_for_uartRX0+0xb4>
             !(rINTSUBMSK & (1 << INT_UART0_ERR_SUB))) {
    irq_clear(INT_UART0_ERR_PRIM, INT_UART0_ERR_SUB);
300017a0:	e3a0001c 	mov	r0, #28
300017a4:	e3a01002 	mov	r1, #2
300017a8:	ebfffe03 	bl	30000fbc <irq_clear>
  }
}
300017ac:	e24bd004 	sub	sp, fp, #4
300017b0:	e8bd4800 	pop	{fp, lr}
300017b4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300017b8:	4a000018 	.word	0x4a000018
300017bc:	4a00001c 	.word	0x4a00001c
300017c0:	3000c2fc 	.word	0x3000c2fc
300017c4:	3000c2d8 	.word	0x3000c2d8

300017c8 <uart_close>:

/**
 * @brief 关闭uart设备
 *
 */
300017c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300017cc:	e28db000 	add	fp, sp, #0
300017d0:	e28bd000 	add	sp, fp, #0
300017d4:	e8bd0800 	pop	{fp}
300017d8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300017dc <raise>:

//链接gcc库
void raise() {
300017dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300017e0:	e28db000 	add	fp, sp, #0

300017e4:	e28bd000 	add	sp, fp, #0
300017e8:	e8bd0800 	pop	{fp}
300017ec:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300017f0 <cpu_irq_start>:

/**
 * @brief 开中断
 *
 */
__attribute__((always_inline)) static void cpu_irq_start() {
300017f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300017f4:	e28db000 	add	fp, sp, #0
  __asm__ __volatile__(
300017f8:	e10f0000 	mrs	r0, CPSR
300017fc:	e3c00080 	bic	r0, r0, #128	; 0x80
30001800:	e129f000 	msr	CPSR_fc, r0
      "mrs r0, cpsr\n"
      "bic r0, #0x80\n"
      "msr cpsr, r0\n" ::
          : "r0");
}
30001804:	e28bd000 	add	sp, fp, #0
30001808:	e8bd0800 	pop	{fp}
3000180c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001810 <cpu_irq_close>:

/**
 * @brief 关中断
 *
 */
__attribute__((always_inline)) static void cpu_irq_close() {
30001810:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001814:	e28db000 	add	fp, sp, #0
  __asm__ __volatile__(
30001818:	e10f0000 	mrs	r0, CPSR
3000181c:	e3800080 	orr	r0, r0, #128	; 0x80
30001820:	e129f000 	msr	CPSR_fc, r0
      "mrs r0, cpsr\n"
      "orr r0, #0x80\n"
      "msr cpsr, r0\n" ::
          : "r0");
}
30001824:	e28bd000 	add	sp, fp, #0
30001828:	e8bd0800 	pop	{fp}
3000182c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001830 <os_init>:
OS_STK Task8Stk[TASK0_STK_LEN];
OS_STK Task9Stk[TASK0_STK_LEN];

int arr[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

void os_init() {
30001830:	e92d4800 	push	{fp, lr}
30001834:	e28db004 	add	fp, sp, #4


  gpio_init();
30001838:	ebfffd29 	bl	30000ce4 <gpio_init>
  uart_init(0);
3000183c:	e3a00000 	mov	r0, #0
30001840:	ebfffeee 	bl	30001400 <uart_init>
  irq_init();
30001844:	ebfffe70 	bl	3000120c <irq_init>
  timer_init(OS_TICKS_PER_SEC);
30001848:	e3a00064 	mov	r0, #100	; 0x64
3000184c:	ebfffea6 	bl	300012ec <timer_init>

  OSInit();
30001850:	eb000307 	bl	30002474 <OSInit>
  OSTimeSet(0);
30001854:	e3a00000 	mov	r0, #0
30001858:	eb00254d 	bl	3000ad94 <OSTimeSet>
  OSTaskCreate(MainTask, 0, &MainTaskStk[MAIN_TASK_STK_LEN],
3000185c:	e59f3020 	ldr	r3, [pc, #32]	; 30001884 <os_init+0x54>
30001860:	e59f0020 	ldr	r0, [pc, #32]	; 30001888 <os_init+0x58>
30001864:	e3a01000 	mov	r1, #0
30001868:	e1a02003 	mov	r2, r3
3000186c:	e3a03005 	mov	r3, #5
30001870:	eb001f66 	bl	30009610 <OSTaskCreate>
               MAIN_TASK_PRIO);
  OSStart();
30001874:	eb0003ba 	bl	30002764 <OSStart>

  return 0;
}
30001878:	e24bd004 	sub	sp, fp, #4
3000187c:	e8bd4800 	pop	{fp, lr}
30001880:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30001884:	300123a8 	.word	0x300123a8
30001888:	3000188c 	.word	0x3000188c

3000188c <MainTask>:

void MainTask(void *pdata) {
3000188c:	e92d4800 	push	{fp, lr}
30001890:	e28db004 	add	fp, sp, #4
30001894:	e24dd010 	sub	sp, sp, #16
30001898:	e50b0010 	str	r0, [fp, #-16]

  OSTaskCreate(Task0, &arr[0], &Task0Stk[TASK0_STK_LEN], TASK0_PRIO);
3000189c:	e59f3108 	ldr	r3, [pc, #264]	; 300019ac <MainTask+0x120>
300018a0:	e59f0108 	ldr	r0, [pc, #264]	; 300019b0 <MainTask+0x124>
300018a4:	e59f1108 	ldr	r1, [pc, #264]	; 300019b4 <MainTask+0x128>
300018a8:	e1a02003 	mov	r2, r3
300018ac:	e3a03006 	mov	r3, #6
300018b0:	eb001f56 	bl	30009610 <OSTaskCreate>
  OSTaskCreate(Task0, &arr[1], &Task1Stk[TASK0_STK_LEN], TASK0_PRIO + 1);
300018b4:	e59f30fc 	ldr	r3, [pc, #252]	; 300019b8 <MainTask+0x12c>
300018b8:	e59f00f0 	ldr	r0, [pc, #240]	; 300019b0 <MainTask+0x124>
300018bc:	e59f10f8 	ldr	r1, [pc, #248]	; 300019bc <MainTask+0x130>
300018c0:	e1a02003 	mov	r2, r3
300018c4:	e3a03007 	mov	r3, #7
300018c8:	eb001f50 	bl	30009610 <OSTaskCreate>
  OSTaskCreate(Task0, &arr[2], &Task2Stk[TASK0_STK_LEN], TASK0_PRIO + 2);
300018cc:	e59f30ec 	ldr	r3, [pc, #236]	; 300019c0 <MainTask+0x134>
300018d0:	e59f00d8 	ldr	r0, [pc, #216]	; 300019b0 <MainTask+0x124>
300018d4:	e59f10e8 	ldr	r1, [pc, #232]	; 300019c4 <MainTask+0x138>
300018d8:	e1a02003 	mov	r2, r3
300018dc:	e3a03008 	mov	r3, #8
300018e0:	eb001f4a 	bl	30009610 <OSTaskCreate>
  OSTaskCreate(Task0, &arr[3], &Task3Stk[TASK0_STK_LEN], TASK0_PRIO + 3);
300018e4:	e59f30dc 	ldr	r3, [pc, #220]	; 300019c8 <MainTask+0x13c>
300018e8:	e59f00c0 	ldr	r0, [pc, #192]	; 300019b0 <MainTask+0x124>
300018ec:	e59f10d8 	ldr	r1, [pc, #216]	; 300019cc <MainTask+0x140>
300018f0:	e1a02003 	mov	r2, r3
300018f4:	e3a03009 	mov	r3, #9
300018f8:	eb001f44 	bl	30009610 <OSTaskCreate>
  OSTaskCreate(Task0, &arr[4], &Task4Stk[TASK0_STK_LEN], TASK0_PRIO + 4);
300018fc:	e59f30cc 	ldr	r3, [pc, #204]	; 300019d0 <MainTask+0x144>
30001900:	e59f00a8 	ldr	r0, [pc, #168]	; 300019b0 <MainTask+0x124>
30001904:	e59f10c8 	ldr	r1, [pc, #200]	; 300019d4 <MainTask+0x148>
30001908:	e1a02003 	mov	r2, r3
3000190c:	e3a0300a 	mov	r3, #10
30001910:	eb001f3e 	bl	30009610 <OSTaskCreate>
  OSTaskCreate(Task0, &arr[5], &Task5Stk[TASK0_STK_LEN], TASK0_PRIO + 5);
30001914:	e59f30bc 	ldr	r3, [pc, #188]	; 300019d8 <MainTask+0x14c>
30001918:	e59f0090 	ldr	r0, [pc, #144]	; 300019b0 <MainTask+0x124>
3000191c:	e59f10b8 	ldr	r1, [pc, #184]	; 300019dc <MainTask+0x150>
30001920:	e1a02003 	mov	r2, r3
30001924:	e3a0300b 	mov	r3, #11
30001928:	eb001f38 	bl	30009610 <OSTaskCreate>
  OSTaskCreate(Task0, &arr[6], &Task6Stk[TASK0_STK_LEN], TASK0_PRIO + 6);
3000192c:	e59f30ac 	ldr	r3, [pc, #172]	; 300019e0 <MainTask+0x154>
30001930:	e59f0078 	ldr	r0, [pc, #120]	; 300019b0 <MainTask+0x124>
30001934:	e59f10a8 	ldr	r1, [pc, #168]	; 300019e4 <MainTask+0x158>
30001938:	e1a02003 	mov	r2, r3
3000193c:	e3a0300c 	mov	r3, #12
30001940:	eb001f32 	bl	30009610 <OSTaskCreate>
  OSTaskCreate(Task0, &arr[7], &Task7Stk[TASK0_STK_LEN], TASK0_PRIO + 7);
30001944:	e59f309c 	ldr	r3, [pc, #156]	; 300019e8 <MainTask+0x15c>
30001948:	e59f0060 	ldr	r0, [pc, #96]	; 300019b0 <MainTask+0x124>
3000194c:	e59f1098 	ldr	r1, [pc, #152]	; 300019ec <MainTask+0x160>
30001950:	e1a02003 	mov	r2, r3
30001954:	e3a0300d 	mov	r3, #13
30001958:	eb001f2c 	bl	30009610 <OSTaskCreate>
  OSTaskCreate(Task0, &arr[8], &Task8Stk[TASK0_STK_LEN], TASK0_PRIO + 8);
3000195c:	e59f308c 	ldr	r3, [pc, #140]	; 300019f0 <MainTask+0x164>
30001960:	e59f0048 	ldr	r0, [pc, #72]	; 300019b0 <MainTask+0x124>
30001964:	e59f1088 	ldr	r1, [pc, #136]	; 300019f4 <MainTask+0x168>
30001968:	e1a02003 	mov	r2, r3
3000196c:	e3a0300e 	mov	r3, #14
30001970:	eb001f26 	bl	30009610 <OSTaskCreate>
  OSTaskCreate(Task0, &arr[9], &Task9Stk[TASK0_STK_LEN], TASK0_PRIO + 9);
30001974:	e59f307c 	ldr	r3, [pc, #124]	; 300019f8 <MainTask+0x16c>
30001978:	e59f0030 	ldr	r0, [pc, #48]	; 300019b0 <MainTask+0x124>
3000197c:	e59f1078 	ldr	r1, [pc, #120]	; 300019fc <MainTask+0x170>
30001980:	e1a02003 	mov	r2, r3
30001984:	e3a0300f 	mov	r3, #15
30001988:	eb001f20 	bl	30009610 <OSTaskCreate>
  OSStatInit();     // 初始化统计任务需要的参数
3000198c:	eb000394 	bl	300027e4 <OSStatInit>

  int a = 10;
30001990:	e3a0300a 	mov	r3, #10
30001994:	e50b3008 	str	r3, [fp, #-8]

  while (1) {
    uart_printf("main task run\n");
30001998:	e59f0060 	ldr	r0, [pc, #96]	; 30001a00 <MainTask+0x174>
3000199c:	ebffff35 	bl	30001678 <uart_printf>
    OSTimeDly(OS_TICKS_PER_SEC);
300019a0:	e3a00064 	mov	r0, #100	; 0x64
300019a4:	eb0023dc 	bl	3000a91c <OSTimeDly>
  }
300019a8:	eafffffa 	b	30001998 <MainTask+0x10c>
300019ac:	300163a8 	.word	0x300163a8
300019b0:	30001a04 	.word	0x30001a04
300019b4:	3000c300 	.word	0x3000c300
300019b8:	300133a8 	.word	0x300133a8
300019bc:	3000c304 	.word	0x3000c304
300019c0:	300103a8 	.word	0x300103a8
300019c4:	3000c308 	.word	0x3000c308
300019c8:	3000d3a8 	.word	0x3000d3a8
300019cc:	3000c30c 	.word	0x3000c30c
300019d0:	3000f3a8 	.word	0x3000f3a8
300019d4:	3000c310 	.word	0x3000c310
300019d8:	300173a8 	.word	0x300173a8
300019dc:	3000c314 	.word	0x3000c314
300019e0:	300113a8 	.word	0x300113a8
300019e4:	3000c318 	.word	0x3000c318
300019e8:	3000e3a8 	.word	0x3000e3a8
300019ec:	3000c31c 	.word	0x3000c31c
300019f0:	300153a8 	.word	0x300153a8
300019f4:	3000c320 	.word	0x3000c320
300019f8:	300143a8 	.word	0x300143a8
300019fc:	3000c324 	.word	0x3000c324
30001a00:	3000c158 	.word	0x3000c158

30001a04 <Task0>:

  return;
}

void Task0(void *pdata) {
30001a04:	e92d4800 	push	{fp, lr}
30001a08:	e28db004 	add	fp, sp, #4
30001a0c:	e24dd008 	sub	sp, sp, #8
30001a10:	e50b0008 	str	r0, [fp, #-8]
  while (1) {
    uart_printf("task %d run\n", *(int*)pdata);
30001a14:	e51b3008 	ldr	r3, [fp, #-8]
30001a18:	e5933000 	ldr	r3, [r3]
30001a1c:	e59f0010 	ldr	r0, [pc, #16]	; 30001a34 <Task0+0x30>
30001a20:	e1a01003 	mov	r1, r3
30001a24:	ebffff13 	bl	30001678 <uart_printf>
    OSTimeDly(OS_TICKS_PER_SEC);
30001a28:	e3a00064 	mov	r0, #100	; 0x64
30001a2c:	eb0023ba 	bl	3000a91c <OSTimeDly>
  }
30001a30:	eafffff7 	b	30001a14 <Task0+0x10>
30001a34:	3000c168 	.word	0x3000c168

30001a38 <OSInitHookBegin>:
*
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void OSInitHookBegin(void) { OSIntCtxSwFlag = 0; }
30001a38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001a3c:	e28db000 	add	fp, sp, #0
30001a40:	e59f3010 	ldr	r3, [pc, #16]	; 30001a58 <OSInitHookBegin+0x20>
30001a44:	e3a02000 	mov	r2, #0
30001a48:	e5832000 	str	r2, [r3]
30001a4c:	e28bd000 	add	sp, fp, #0
30001a50:	e8bd0800 	pop	{fp}
30001a54:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30001a58:	300173a8 	.word	0x300173a8

30001a5c <OSInitHookEnd>:
*
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void OSInitHookEnd(void) {}
30001a5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001a60:	e28db000 	add	fp, sp, #0
30001a64:	e28bd000 	add	sp, fp, #0
30001a68:	e8bd0800 	pop	{fp}
30001a6c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001a70 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook(OS_TCB *ptcb) {
30001a70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001a74:	e28db000 	add	fp, sp, #0
30001a78:	e24dd00c 	sub	sp, sp, #12
30001a7c:	e50b0008 	str	r0, [fp, #-8]
  ptcb = ptcb; /* Prevent compiler warning */
}
30001a80:	e28bd000 	add	sp, fp, #0
30001a84:	e8bd0800 	pop	{fp}
30001a88:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001a8c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskDelHook(OS_TCB *ptcb) {
30001a8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001a90:	e28db000 	add	fp, sp, #0
30001a94:	e24dd00c 	sub	sp, sp, #12
30001a98:	e50b0008 	str	r0, [fp, #-8]
  ptcb = ptcb; /* Prevent compiler warning */
}
30001a9c:	e28bd000 	add	sp, fp, #0
30001aa0:	e8bd0800 	pop	{fp}
30001aa4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001aa8 <OSTaskIdleHook>:
*
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
void OSTaskIdleHook(void) {
30001aa8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001aac:	e28db000 	add	fp, sp, #0
}
30001ab0:	e28bd000 	add	sp, fp, #0
30001ab4:	e8bd0800 	pop	{fp}
30001ab8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001abc <OSTaskStatHook>:
* Arguments  : none
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0
void OSTaskStatHook(void) {}
30001abc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001ac0:	e28db000 	add	fp, sp, #0
30001ac4:	e28bd000 	add	sp, fp, #0
30001ac8:	e8bd0800 	pop	{fp}
30001acc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001ad0 <OSTaskStkInit>:
*              2) All tasks run in SVC mode.
*********************************************************************************************************
*/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *p_arg, OS_STK *ptos,
                      INT16U opt) {
30001ad0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001ad4:	e28db000 	add	fp, sp, #0
30001ad8:	e24dd01c 	sub	sp, sp, #28
30001adc:	e50b0010 	str	r0, [fp, #-16]
30001ae0:	e50b1014 	str	r1, [fp, #-20]
30001ae4:	e50b2018 	str	r2, [fp, #-24]
30001ae8:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  OS_STK *stk;

  opt = opt; //不使用opt，防止编译器警告
  stk = ptos;
30001aec:	e51b3018 	ldr	r3, [fp, #-24]
30001af0:	e50b3008 	str	r3, [fp, #-8]
  *(--stk) = (OS_STK)task;  // pc = task
30001af4:	e51b3008 	ldr	r3, [fp, #-8]
30001af8:	e2433004 	sub	r3, r3, #4
30001afc:	e50b3008 	str	r3, [fp, #-8]
30001b00:	e51b2010 	ldr	r2, [fp, #-16]
30001b04:	e51b3008 	ldr	r3, [fp, #-8]
30001b08:	e5832000 	str	r2, [r3]
  stk -= 14;                // r1-r12, lr(r14) = 0
30001b0c:	e51b3008 	ldr	r3, [fp, #-8]
30001b10:	e2433038 	sub	r3, r3, #56	; 0x38
30001b14:	e50b3008 	str	r3, [fp, #-8]

  *stk = (OS_STK)p_arg;             // r0 = p_arg 任务传入参数
30001b18:	e51b2014 	ldr	r2, [fp, #-20]
30001b1c:	e51b3008 	ldr	r3, [fp, #-8]
30001b20:	e5832000 	str	r2, [r3]
  *(--stk) = (OS_STK)ARM_SVC_MODE;  // cpsr = SVC mode
30001b24:	e51b3008 	ldr	r3, [fp, #-8]
30001b28:	e2433004 	sub	r3, r3, #4
30001b2c:	e50b3008 	str	r3, [fp, #-8]
30001b30:	e51b3008 	ldr	r3, [fp, #-8]
30001b34:	e3a02013 	mov	r2, #19
30001b38:	e5832000 	str	r2, [r3]

  return (stk);
30001b3c:	e51b3008 	ldr	r3, [fp, #-8]
}
30001b40:	e1a00003 	mov	r0, r3
30001b44:	e28bd000 	add	sp, fp, #0
30001b48:	e8bd0800 	pop	{fp}
30001b4c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001b50 <OSTaskSwHook>:
*and, 'OSTCBCur' points to the task being switched out (i.e. the preempted
*task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
void OSTaskSwHook(void) {}
30001b50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001b54:	e28db000 	add	fp, sp, #0
30001b58:	e28bd000 	add	sp, fp, #0
30001b5c:	e8bd0800 	pop	{fp}
30001b60:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001b64 <OSTCBInitHook>:
*
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void OSTCBInitHook(OS_TCB *ptcb) {
30001b64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001b68:	e28db000 	add	fp, sp, #0
30001b6c:	e24dd00c 	sub	sp, sp, #12
30001b70:	e50b0008 	str	r0, [fp, #-8]
  ptcb = ptcb; /* Prevent Compiler warning                 */
}
30001b74:	e28bd000 	add	sp, fp, #0
30001b78:	e8bd0800 	pop	{fp}
30001b7c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001b80 <OSTimeTickHook>:
*
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook(void) {}
30001b80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001b84:	e28db000 	add	fp, sp, #0
30001b88:	e28bd000 	add	sp, fp, #0
30001b8c:	e8bd0800 	pop	{fp}
30001b90:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001b94 <OSIntCtxSw>:
*
* Arguments   : none
*********************************************************************************************************
*/

void OSIntCtxSw(void) {
30001b94:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001b98:	e28db000 	add	fp, sp, #0
  OSIntCtxSwFlag =
30001b9c:	e59f3010 	ldr	r3, [pc, #16]	; 30001bb4 <OSIntCtxSw+0x20>
30001ba0:	e3a02001 	mov	r2, #1
30001ba4:	e5832000 	str	r2, [r3]
      OS_TRUE; /* Indicate that a context switch from ISR is needed  */
}
30001ba8:	e28bd000 	add	sp, fp, #0
30001bac:	e8bd0800 	pop	{fp}
30001bb0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30001bb4:	300173a8 	.word	0x300173a8

30001bb8 <OSTaskReturnHook>:
* Note(s)    : none
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 289
void OSTaskReturnHook(OS_TCB *ptcb) { (void)ptcb; }
30001bb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30001bbc:	e28db000 	add	fp, sp, #0
30001bc0:	e24dd00c 	sub	sp, sp, #12
30001bc4:	e50b0008 	str	r0, [fp, #-8]
30001bc8:	e28bd000 	add	sp, fp, #0
30001bcc:	e8bd0800 	pop	{fp}
30001bd0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30001bd4 <OSEventNameGet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
INT8U  OSEventNameGet (OS_EVENT   *pevent,
                       INT8U     **pname,
                       INT8U      *perr)
{
30001bd4:	e92d4800 	push	{fp, lr}
30001bd8:	e28db004 	add	fp, sp, #4
30001bdc:	e24dd018 	sub	sp, sp, #24
30001be0:	e50b0010 	str	r0, [fp, #-16]
30001be4:	e50b1014 	str	r1, [fp, #-20]
30001be8:	e50b2018 	str	r2, [fp, #-24]
    INT8U      len;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30001bec:	e3a03000 	mov	r3, #0
30001bf0:	e50b3008 	str	r3, [fp, #-8]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
30001bf4:	e51b3010 	ldr	r3, [fp, #-16]
30001bf8:	e3530000 	cmp	r3, #0
30001bfc:	1a000004 	bne	30001c14 <OSEventNameGet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
30001c00:	e51b3018 	ldr	r3, [fp, #-24]
30001c04:	e3a02004 	mov	r2, #4
30001c08:	e5c32000 	strb	r2, [r3]
        return (0u);
30001c0c:	e3a03000 	mov	r3, #0
30001c10:	ea00002d 	b	30001ccc <OSEventNameGet+0xf8>
    }
    if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                         */
30001c14:	e51b3014 	ldr	r3, [fp, #-20]
30001c18:	e3530000 	cmp	r3, #0
30001c1c:	1a000004 	bne	30001c34 <OSEventNameGet+0x60>
        *perr = OS_ERR_PNAME_NULL;
30001c20:	e51b3018 	ldr	r3, [fp, #-24]
30001c24:	e3a0200c 	mov	r2, #12
30001c28:	e5c32000 	strb	r2, [r3]
        return (0u);
30001c2c:	e3a03000 	mov	r3, #0
30001c30:	ea000025 	b	30001ccc <OSEventNameGet+0xf8>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
30001c34:	e59f30a0 	ldr	r3, [pc, #160]	; 30001cdc <OSEventNameGet+0x108>
30001c38:	e5d33000 	ldrb	r3, [r3]
30001c3c:	e3530000 	cmp	r3, #0
30001c40:	0a000004 	beq	30001c58 <OSEventNameGet+0x84>
        *perr  = OS_ERR_NAME_GET_ISR;
30001c44:	e51b3018 	ldr	r3, [fp, #-24]
30001c48:	e3a02011 	mov	r2, #17
30001c4c:	e5c32000 	strb	r2, [r3]
        return (0u);
30001c50:	e3a03000 	mov	r3, #0
30001c54:	ea00001c 	b	30001ccc <OSEventNameGet+0xf8>
    }
    switch (pevent->OSEventType) {
30001c58:	e51b3010 	ldr	r3, [fp, #-16]
30001c5c:	e5d33000 	ldrb	r3, [r3]
30001c60:	e2433001 	sub	r3, r3, #1
30001c64:	e3530003 	cmp	r3, #3
30001c68:	8a000013 	bhi	30001cbc <OSEventNameGet+0xe8>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0u);
    }
    OS_ENTER_CRITICAL();
30001c6c:	ebfff929 	bl	30000118 <OS_CPU_SaveSR>
30001c70:	e1a03000 	mov	r3, r0
30001c74:	e50b3008 	str	r3, [fp, #-8]
    *pname = pevent->OSEventName;
30001c78:	e51b3010 	ldr	r3, [fp, #-16]
30001c7c:	e5932014 	ldr	r2, [r3, #20]
30001c80:	e51b3014 	ldr	r3, [fp, #-20]
30001c84:	e5832000 	str	r2, [r3]
    len    = OS_StrLen(*pname);
30001c88:	e51b3014 	ldr	r3, [fp, #-20]
30001c8c:	e5933000 	ldr	r3, [r3]
30001c90:	e1a00003 	mov	r0, r3
30001c94:	eb0006bb 	bl	30003788 <OS_StrLen>
30001c98:	e1a03000 	mov	r3, r0
30001c9c:	e54b3009 	strb	r3, [fp, #-9]
    OS_EXIT_CRITICAL();
30001ca0:	e51b0008 	ldr	r0, [fp, #-8]
30001ca4:	ebfff923 	bl	30000138 <OS_CPU_RestoreSR>
    *perr  = OS_ERR_NONE;
30001ca8:	e51b3018 	ldr	r3, [fp, #-24]
30001cac:	e3a02000 	mov	r2, #0
30001cb0:	e5c32000 	strb	r2, [r3]
    return (len);
30001cb4:	e55b3009 	ldrb	r3, [fp, #-9]
30001cb8:	ea000003 	b	30001ccc <OSEventNameGet+0xf8>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
30001cbc:	e51b3018 	ldr	r3, [fp, #-24]
30001cc0:	e3a02001 	mov	r2, #1
30001cc4:	e5c32000 	strb	r2, [r3]
             return (0u);
30001cc8:	e3a03000 	mov	r3, #0
    *pname = pevent->OSEventName;
    len    = OS_StrLen(*pname);
    OS_EXIT_CRITICAL();
    *perr  = OS_ERR_NONE;
    return (len);
}
30001ccc:	e1a00003 	mov	r0, r3
30001cd0:	e24bd004 	sub	sp, fp, #4
30001cd4:	e8bd4800 	pop	{fp, lr}
30001cd8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30001cdc:	30017bdc 	.word	0x30017bdc

30001ce0 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
30001ce0:	e92d4800 	push	{fp, lr}
30001ce4:	e28db004 	add	fp, sp, #4
30001ce8:	e24dd018 	sub	sp, sp, #24
30001cec:	e50b0010 	str	r0, [fp, #-16]
30001cf0:	e50b1014 	str	r1, [fp, #-20]
30001cf4:	e50b2018 	str	r2, [fp, #-24]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30001cf8:	e3a03000 	mov	r3, #0
30001cfc:	e50b3008 	str	r3, [fp, #-8]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
30001d00:	e51b3010 	ldr	r3, [fp, #-16]
30001d04:	e3530000 	cmp	r3, #0
30001d08:	1a000003 	bne	30001d1c <OSEventNameSet+0x3c>
        *perr = OS_ERR_PEVENT_NULL;
30001d0c:	e51b3018 	ldr	r3, [fp, #-24]
30001d10:	e3a02004 	mov	r2, #4
30001d14:	e5c32000 	strb	r2, [r3]
        return;
30001d18:	ea000023 	b	30001dac <OSEventNameSet+0xcc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
30001d1c:	e51b3014 	ldr	r3, [fp, #-20]
30001d20:	e3530000 	cmp	r3, #0
30001d24:	1a000003 	bne	30001d38 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
30001d28:	e51b3018 	ldr	r3, [fp, #-24]
30001d2c:	e3a0200c 	mov	r2, #12
30001d30:	e5c32000 	strb	r2, [r3]
        return;
30001d34:	ea00001c 	b	30001dac <OSEventNameSet+0xcc>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
30001d38:	e59f3078 	ldr	r3, [pc, #120]	; 30001db8 <OSEventNameSet+0xd8>
30001d3c:	e5d33000 	ldrb	r3, [r3]
30001d40:	e3530000 	cmp	r3, #0
30001d44:	0a000003 	beq	30001d58 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
30001d48:	e51b3018 	ldr	r3, [fp, #-24]
30001d4c:	e3a02012 	mov	r2, #18
30001d50:	e5c32000 	strb	r2, [r3]
        return;
30001d54:	ea000014 	b	30001dac <OSEventNameSet+0xcc>
    }
    switch (pevent->OSEventType) {
30001d58:	e51b3010 	ldr	r3, [fp, #-16]
30001d5c:	e5d33000 	ldrb	r3, [r3]
30001d60:	e2433001 	sub	r3, r3, #1
30001d64:	e3530003 	cmp	r3, #3
30001d68:	8a00000b 	bhi	30001d9c <OSEventNameSet+0xbc>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
30001d6c:	ebfff8e9 	bl	30000118 <OS_CPU_SaveSR>
30001d70:	e1a03000 	mov	r3, r0
30001d74:	e50b3008 	str	r3, [fp, #-8]
    pevent->OSEventName = pname;
30001d78:	e51b3010 	ldr	r3, [fp, #-16]
30001d7c:	e51b2014 	ldr	r2, [fp, #-20]
30001d80:	e5832014 	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
30001d84:	e51b0008 	ldr	r0, [fp, #-8]
30001d88:	ebfff8ea 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
30001d8c:	e51b3018 	ldr	r3, [fp, #-24]
30001d90:	e3a02000 	mov	r2, #0
30001d94:	e5c32000 	strb	r2, [r3]
30001d98:	ea000003 	b	30001dac <OSEventNameSet+0xcc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
30001d9c:	e51b3018 	ldr	r3, [fp, #-24]
30001da0:	e3a02001 	mov	r2, #1
30001da4:	e5c32000 	strb	r2, [r3]
             return;
30001da8:	e1a00000 	nop			; (mov r0, r0)
    OS_ENTER_CRITICAL();
    pevent->OSEventName = pname;
    OS_EXIT_CRITICAL();
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
}
30001dac:	e24bd004 	sub	sp, fp, #4
30001db0:	e8bd4800 	pop	{fp, lr}
30001db4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30001db8:	30017bdc 	.word	0x30017bdc

30001dbc <OSEventPendMulti>:
INT16U  OSEventPendMulti (OS_EVENT  **pevents_pend,
                          OS_EVENT  **pevents_rdy,
                          void      **pmsgs_rdy,
                          INT32U      timeout,
                          INT8U      *perr)
{
30001dbc:	e92d4800 	push	{fp, lr}
30001dc0:	e28db004 	add	fp, sp, #4
30001dc4:	e24dd028 	sub	sp, sp, #40	; 0x28
30001dc8:	e50b0020 	str	r0, [fp, #-32]
30001dcc:	e50b1024 	str	r1, [fp, #-36]	; 0x24
30001dd0:	e50b2028 	str	r2, [fp, #-40]	; 0x28
30001dd4:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3u)                          /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0u;
30001dd8:	e3a03000 	mov	r3, #0
30001ddc:	e50b3008 	str	r3, [fp, #-8]
        return (0u);
    }
#endif

#if (OS_ARG_CHK_EN > 0u)
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
30001de0:	e51b3020 	ldr	r3, [fp, #-32]
30001de4:	e3530000 	cmp	r3, #0
30001de8:	1a000004 	bne	30001e00 <OSEventPendMulti+0x44>
       *perr =  OS_ERR_PEVENT_NULL;
30001dec:	e59b3004 	ldr	r3, [fp, #4]
30001df0:	e3a02004 	mov	r2, #4
30001df4:	e5c32000 	strb	r2, [r3]
        return (0u);
30001df8:	e3a03000 	mov	r3, #0
30001dfc:	ea000195 	b	30002458 <OSEventPendMulti+0x69c>
    }
    if (*pevents_pend  == (OS_EVENT *)0) {              /* Validate 'pevents_pend'                     */
30001e00:	e51b3020 	ldr	r3, [fp, #-32]
30001e04:	e5933000 	ldr	r3, [r3]
30001e08:	e3530000 	cmp	r3, #0
30001e0c:	1a000004 	bne	30001e24 <OSEventPendMulti+0x68>
       *perr =  OS_ERR_PEVENT_NULL;
30001e10:	e59b3004 	ldr	r3, [fp, #4]
30001e14:	e3a02004 	mov	r2, #4
30001e18:	e5c32000 	strb	r2, [r3]
        return (0u);
30001e1c:	e3a03000 	mov	r3, #0
30001e20:	ea00018c 	b	30002458 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
30001e24:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30001e28:	e3530000 	cmp	r3, #0
30001e2c:	1a000004 	bne	30001e44 <OSEventPendMulti+0x88>
       *perr =  OS_ERR_PEVENT_NULL;
30001e30:	e59b3004 	ldr	r3, [fp, #4]
30001e34:	e3a02004 	mov	r2, #4
30001e38:	e5c32000 	strb	r2, [r3]
        return (0u);
30001e3c:	e3a03000 	mov	r3, #0
30001e40:	ea000184 	b	30002458 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
30001e44:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30001e48:	e3530000 	cmp	r3, #0
30001e4c:	1a000004 	bne	30001e64 <OSEventPendMulti+0xa8>
       *perr =  OS_ERR_PEVENT_NULL;
30001e50:	e59b3004 	ldr	r3, [fp, #4]
30001e54:	e3a02004 	mov	r2, #4
30001e58:	e5c32000 	strb	r2, [r3]
        return (0u);
30001e5c:	e3a03000 	mov	r3, #0
30001e60:	ea00017c 	b	30002458 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
30001e64:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30001e68:	e3a02000 	mov	r2, #0
30001e6c:	e5832000 	str	r2, [r3]

    pevents     =  pevents_pend;
30001e70:	e51b3020 	ldr	r3, [fp, #-32]
30001e74:	e50b301c 	str	r3, [fp, #-28]
    pevent      = *pevents;
30001e78:	e51b301c 	ldr	r3, [fp, #-28]
30001e7c:	e5933000 	ldr	r3, [r3]
30001e80:	e50b3018 	str	r3, [fp, #-24]
    while  (pevent != (OS_EVENT *)0) {
30001e84:	ea000017 	b	30001ee8 <OSEventPendMulti+0x12c>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
30001e88:	e51b3018 	ldr	r3, [fp, #-24]
30001e8c:	e5d33000 	ldrb	r3, [r3]
30001e90:	e3530002 	cmp	r3, #2
30001e94:	0a000008 	beq	30001ebc <OSEventPendMulti+0x100>
30001e98:	e3530003 	cmp	r3, #3
30001e9c:	0a000008 	beq	30001ec4 <OSEventPendMulti+0x108>
30001ea0:	e3530001 	cmp	r3, #1
30001ea4:	0a000008 	beq	30001ecc <OSEventPendMulti+0x110>
#endif

            case OS_EVENT_TYPE_MUTEX:
            case OS_EVENT_TYPE_FLAG:
            default:
                *perr = OS_ERR_EVENT_TYPE;
30001ea8:	e59b3004 	ldr	r3, [fp, #4]
30001eac:	e3a02001 	mov	r2, #1
30001eb0:	e5c32000 	strb	r2, [r3]
                 return (0u);
30001eb4:	e3a03000 	mov	r3, #0
30001eb8:	ea000166 	b	30002458 <OSEventPendMulti+0x69c>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0u) && (OS_MAX_QS > 0u))
            case OS_EVENT_TYPE_Q:
                 break;
30001ebc:	e1a00000 	nop			; (mov r0, r0)
30001ec0:	ea000002 	b	30001ed0 <OSEventPendMulti+0x114>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0u)
            case OS_EVENT_TYPE_SEM:
                 break;
30001ec4:	e1a00000 	nop			; (mov r0, r0)
30001ec8:	ea000000 	b	30001ed0 <OSEventPendMulti+0x114>
#endif
#if (OS_MBOX_EN > 0u)
            case OS_EVENT_TYPE_MBOX:
                 break;
30001ecc:	e1a00000 	nop			; (mov r0, r0)
            case OS_EVENT_TYPE_FLAG:
            default:
                *perr = OS_ERR_EVENT_TYPE;
                 return (0u);
        }
        pevents++;
30001ed0:	e51b301c 	ldr	r3, [fp, #-28]
30001ed4:	e2833004 	add	r3, r3, #4
30001ed8:	e50b301c 	str	r3, [fp, #-28]
        pevent = *pevents;
30001edc:	e51b301c 	ldr	r3, [fp, #-28]
30001ee0:	e5933000 	ldr	r3, [r3]
30001ee4:	e50b3018 	str	r3, [fp, #-24]

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
30001ee8:	e51b3018 	ldr	r3, [fp, #-24]
30001eec:	e3530000 	cmp	r3, #0
30001ef0:	1affffe4 	bne	30001e88 <OSEventPendMulti+0xcc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0u) {                           /* See if called from ISR ...                  */
30001ef4:	e59f356c 	ldr	r3, [pc, #1388]	; 30002468 <OSEventPendMulti+0x6ac>
30001ef8:	e5d33000 	ldrb	r3, [r3]
30001efc:	e3530000 	cmp	r3, #0
30001f00:	0a000004 	beq	30001f18 <OSEventPendMulti+0x15c>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
30001f04:	e59b3004 	ldr	r3, [fp, #4]
30001f08:	e3a02002 	mov	r2, #2
30001f0c:	e5c32000 	strb	r2, [r3]
        return (0u);
30001f10:	e3a03000 	mov	r3, #0
30001f14:	ea00014f 	b	30002458 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0u) {                           /* See if called with scheduler locked ...     */
30001f18:	e59f354c 	ldr	r3, [pc, #1356]	; 3000246c <OSEventPendMulti+0x6b0>
30001f1c:	e5d33000 	ldrb	r3, [r3]
30001f20:	e3530000 	cmp	r3, #0
30001f24:	0a000004 	beq	30001f3c <OSEventPendMulti+0x180>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
30001f28:	e59b3004 	ldr	r3, [fp, #4]
30001f2c:	e3a0200d 	mov	r2, #13
30001f30:	e5c32000 	strb	r2, [r3]
        return (0u);
30001f34:	e3a03000 	mov	r3, #0
30001f38:	ea000146 	b	30002458 <OSEventPendMulti+0x69c>
    }

    events_rdy     =  OS_FALSE;
30001f3c:	e3a03000 	mov	r3, #0
30001f40:	e54b300d 	strb	r3, [fp, #-13]
    events_rdy_nbr =  0u;
30001f44:	e3a03000 	mov	r3, #0
30001f48:	e14b30bc 	strh	r3, [fp, #-12]
    events_stat    =  OS_STAT_RDY;
30001f4c:	e3a03000 	mov	r3, #0
30001f50:	e54b3009 	strb	r3, [fp, #-9]
    pevents        =  pevents_pend;
30001f54:	e51b3020 	ldr	r3, [fp, #-32]
30001f58:	e50b301c 	str	r3, [fp, #-28]
    pevent         = *pevents;
30001f5c:	e51b301c 	ldr	r3, [fp, #-28]
30001f60:	e5933000 	ldr	r3, [r3]
30001f64:	e50b3018 	str	r3, [fp, #-24]
    OS_ENTER_CRITICAL();
30001f68:	ebfff86a 	bl	30000118 <OS_CPU_SaveSR>
30001f6c:	e1a03000 	mov	r3, r0
30001f70:	e50b3008 	str	r3, [fp, #-8]
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
30001f74:	ea00008a 	b	300021a4 <OSEventPendMulti+0x3e8>
        switch (pevent->OSEventType) {
30001f78:	e51b3018 	ldr	r3, [fp, #-24]
30001f7c:	e5d33000 	ldrb	r3, [r3]
30001f80:	e3530002 	cmp	r3, #2
30001f84:	0a000043 	beq	30002098 <OSEventPendMulti+0x2dc>
30001f88:	e3530003 	cmp	r3, #3
30001f8c:	0a000002 	beq	30001f9c <OSEventPendMulti+0x1e0>
30001f90:	e3530001 	cmp	r3, #1
30001f94:	0a000021 	beq	30002020 <OSEventPendMulti+0x264>
30001f98:	ea000071 	b	30002164 <OSEventPendMulti+0x3a8>
#if (OS_SEM_EN > 0u)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0u) {         /* If semaphore count > 0, resource available; */
30001f9c:	e51b3018 	ldr	r3, [fp, #-24]
30001fa0:	e1d330b8 	ldrh	r3, [r3, #8]
30001fa4:	e3530000 	cmp	r3, #0
30001fa8:	0a000018 	beq	30002010 <OSEventPendMulti+0x254>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
30001fac:	e51b3018 	ldr	r3, [fp, #-24]
30001fb0:	e1d330b8 	ldrh	r3, [r3, #8]
30001fb4:	e2433001 	sub	r3, r3, #1
30001fb8:	e1a03803 	lsl	r3, r3, #16
30001fbc:	e1a02823 	lsr	r2, r3, #16
30001fc0:	e51b3018 	ldr	r3, [fp, #-24]
30001fc4:	e1c320b8 	strh	r2, [r3, #8]
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
30001fc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30001fcc:	e51b2018 	ldr	r2, [fp, #-24]
30001fd0:	e5832000 	str	r2, [r3]
30001fd4:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30001fd8:	e2833004 	add	r3, r3, #4
30001fdc:	e50b3024 	str	r3, [fp, #-36]	; 0x24
                      events_rdy   =  OS_TRUE;
30001fe0:	e3a03001 	mov	r3, #1
30001fe4:	e54b300d 	strb	r3, [fp, #-13]
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
30001fe8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30001fec:	e3a02000 	mov	r2, #0
30001ff0:	e5832000 	str	r2, [r3]
30001ff4:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30001ff8:	e2833004 	add	r3, r3, #4
30001ffc:	e50b3028 	str	r3, [fp, #-40]	; 0x28
                      events_rdy_nbr++;
30002000:	e15b30bc 	ldrh	r3, [fp, #-12]
30002004:	e2833001 	add	r3, r3, #1
30002008:	e14b30bc 	strh	r3, [fp, #-12]

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
3000200c:	ea00005e 	b	3000218c <OSEventPendMulti+0x3d0>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
30002010:	e55b3009 	ldrb	r3, [fp, #-9]
30002014:	e3833001 	orr	r3, r3, #1
30002018:	e54b3009 	strb	r3, [fp, #-9]
                 }
                 break;
3000201c:	ea00005a 	b	3000218c <OSEventPendMulti+0x3d0>
#endif

#if (OS_MBOX_EN > 0u)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
30002020:	e51b3018 	ldr	r3, [fp, #-24]
30002024:	e5933004 	ldr	r3, [r3, #4]
30002028:	e3530000 	cmp	r3, #0
3000202c:	0a000015 	beq	30002088 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
30002030:	e51b3018 	ldr	r3, [fp, #-24]
30002034:	e5932004 	ldr	r2, [r3, #4]
30002038:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
3000203c:	e5832000 	str	r2, [r3]
30002040:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30002044:	e2833004 	add	r3, r3, #4
30002048:	e50b3028 	str	r3, [fp, #-40]	; 0x28
                     pevent->OSEventPtr  = (void *)0;
3000204c:	e51b3018 	ldr	r3, [fp, #-24]
30002050:	e3a02000 	mov	r2, #0
30002054:	e5832004 	str	r2, [r3, #4]
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
30002058:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000205c:	e51b2018 	ldr	r2, [fp, #-24]
30002060:	e5832000 	str	r2, [r3]
30002064:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30002068:	e2833004 	add	r3, r3, #4
3000206c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
                      events_rdy         =  OS_TRUE;
30002070:	e3a03001 	mov	r3, #1
30002074:	e54b300d 	strb	r3, [fp, #-13]
                      events_rdy_nbr++;
30002078:	e15b30bc 	ldrh	r3, [fp, #-12]
3000207c:	e2833001 	add	r3, r3, #1
30002080:	e14b30bc 	strh	r3, [fp, #-12]

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
30002084:	ea000040 	b	3000218c <OSEventPendMulti+0x3d0>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
30002088:	e55b3009 	ldrb	r3, [fp, #-9]
3000208c:	e3833002 	orr	r3, r3, #2
30002090:	e54b3009 	strb	r3, [fp, #-9]
                 }
                 break;
30002094:	ea00003c 	b	3000218c <OSEventPendMulti+0x3d0>
#endif

#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
30002098:	e51b3018 	ldr	r3, [fp, #-24]
3000209c:	e5933004 	ldr	r3, [r3, #4]
300020a0:	e50b3014 	str	r3, [fp, #-20]
                 if (pq->OSQEntries > 0u) {             /* If queue NOT empty;                     ... */
300020a4:	e51b3014 	ldr	r3, [fp, #-20]
300020a8:	e1d331b6 	ldrh	r3, [r3, #22]
300020ac:	e3530000 	cmp	r3, #0
300020b0:	0a000027 	beq	30002154 <OSEventPendMulti+0x398>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
300020b4:	e51b3014 	ldr	r3, [fp, #-20]
300020b8:	e5933010 	ldr	r3, [r3, #16]
300020bc:	e5931000 	ldr	r1, [r3]
300020c0:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
300020c4:	e5821000 	str	r1, [r2]
300020c8:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
300020cc:	e2822004 	add	r2, r2, #4
300020d0:	e50b2028 	str	r2, [fp, #-40]	; 0x28
300020d4:	e2832004 	add	r2, r3, #4
300020d8:	e51b3014 	ldr	r3, [fp, #-20]
300020dc:	e5832010 	str	r2, [r3, #16]
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
300020e0:	e51b3014 	ldr	r3, [fp, #-20]
300020e4:	e5932010 	ldr	r2, [r3, #16]
300020e8:	e51b3014 	ldr	r3, [fp, #-20]
300020ec:	e5933008 	ldr	r3, [r3, #8]
300020f0:	e1520003 	cmp	r2, r3
300020f4:	1a000003 	bne	30002108 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
300020f8:	e51b3014 	ldr	r3, [fp, #-20]
300020fc:	e5932004 	ldr	r2, [r3, #4]
30002100:	e51b3014 	ldr	r3, [fp, #-20]
30002104:	e5832010 	str	r2, [r3, #16]
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
30002108:	e51b3014 	ldr	r3, [fp, #-20]
3000210c:	e1d331b6 	ldrh	r3, [r3, #22]
30002110:	e2433001 	sub	r3, r3, #1
30002114:	e1a03803 	lsl	r3, r3, #16
30002118:	e1a02823 	lsr	r2, r3, #16
3000211c:	e51b3014 	ldr	r3, [fp, #-20]
30002120:	e1c321b6 	strh	r2, [r3, #22]
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
30002124:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30002128:	e51b2018 	ldr	r2, [fp, #-24]
3000212c:	e5832000 	str	r2, [r3]
30002130:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30002134:	e2833004 	add	r3, r3, #4
30002138:	e50b3024 	str	r3, [fp, #-36]	; 0x24
                      events_rdy   = OS_TRUE;
3000213c:	e3a03001 	mov	r3, #1
30002140:	e54b300d 	strb	r3, [fp, #-13]
                      events_rdy_nbr++;
30002144:	e15b30bc 	ldrh	r3, [fp, #-12]
30002148:	e2833001 	add	r3, r3, #1
3000214c:	e14b30bc 	strh	r3, [fp, #-12]

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
30002150:	ea00000d 	b	3000218c <OSEventPendMulti+0x3d0>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
30002154:	e55b3009 	ldrb	r3, [fp, #-9]
30002158:	e3833004 	orr	r3, r3, #4
3000215c:	e54b3009 	strb	r3, [fp, #-9]
                 }
                 break;
30002160:	ea000009 	b	3000218c <OSEventPendMulti+0x3d0>
#endif

            case OS_EVENT_TYPE_MUTEX:
            case OS_EVENT_TYPE_FLAG:
            default:
                 OS_EXIT_CRITICAL();
30002164:	e51b0008 	ldr	r0, [fp, #-8]
30002168:	ebfff7f2 	bl	30000138 <OS_CPU_RestoreSR>
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
3000216c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30002170:	e3a02000 	mov	r2, #0
30002174:	e5832000 	str	r2, [r3]
                *perr        =  OS_ERR_EVENT_TYPE;
30002178:	e59b3004 	ldr	r3, [fp, #4]
3000217c:	e3a02001 	mov	r2, #1
30002180:	e5c32000 	strb	r2, [r3]
                 return (events_rdy_nbr);
30002184:	e15b30bc 	ldrh	r3, [fp, #-12]
30002188:	ea0000b2 	b	30002458 <OSEventPendMulti+0x69c>
        }
        pevents++;
3000218c:	e51b301c 	ldr	r3, [fp, #-28]
30002190:	e2833004 	add	r3, r3, #4
30002194:	e50b301c 	str	r3, [fp, #-28]
        pevent = *pevents;
30002198:	e51b301c 	ldr	r3, [fp, #-28]
3000219c:	e5933000 	ldr	r3, [r3]
300021a0:	e50b3018 	str	r3, [fp, #-24]
    events_rdy_nbr =  0u;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    OS_ENTER_CRITICAL();
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
300021a4:	e51b3018 	ldr	r3, [fp, #-24]
300021a8:	e3530000 	cmp	r3, #0
300021ac:	1affff71 	bne	30001f78 <OSEventPendMulti+0x1bc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
300021b0:	e55b300d 	ldrb	r3, [fp, #-13]
300021b4:	e3530001 	cmp	r3, #1
300021b8:	1a000009 	bne	300021e4 <OSEventPendMulti+0x428>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
300021bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
300021c0:	e3a02000 	mov	r2, #0
300021c4:	e5832000 	str	r2, [r3]
        OS_EXIT_CRITICAL();
300021c8:	e51b0008 	ldr	r0, [fp, #-8]
300021cc:	ebfff7d9 	bl	30000138 <OS_CPU_RestoreSR>
       *perr        =  OS_ERR_NONE;
300021d0:	e59b3004 	ldr	r3, [fp, #4]
300021d4:	e3a02000 	mov	r2, #0
300021d8:	e5c32000 	strb	r2, [r3]
        return (events_rdy_nbr);
300021dc:	e15b30bc 	ldrh	r3, [fp, #-12]
300021e0:	ea00009c 	b	30002458 <OSEventPendMulti+0x69c>
    }

                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
300021e4:	e59f3284 	ldr	r3, [pc, #644]	; 30002470 <OSEventPendMulti+0x6b4>
300021e8:	e5932000 	ldr	r2, [r3]
300021ec:	e59f327c 	ldr	r3, [pc, #636]	; 30002470 <OSEventPendMulti+0x6b4>
300021f0:	e5933000 	ldr	r3, [r3]
300021f4:	e5d31038 	ldrb	r1, [r3, #56]	; 0x38
300021f8:	e55b3009 	ldrb	r3, [fp, #-9]
300021fc:	e1813003 	orr	r3, r1, r3
30002200:	e20330ff 	and	r3, r3, #255	; 0xff
30002204:	e1e03c83 	mvn	r3, r3, lsl #25
30002208:	e1e03ca3 	mvn	r3, r3, lsr #25
3000220c:	e20330ff 	and	r3, r3, #255	; 0xff
30002210:	e5c23038 	strb	r3, [r2, #56]	; 0x38
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
30002214:	e59f3254 	ldr	r3, [pc, #596]	; 30002470 <OSEventPendMulti+0x6b4>
30002218:	e5933000 	ldr	r3, [r3]
3000221c:	e3a02000 	mov	r2, #0
30002220:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
30002224:	e59f3244 	ldr	r3, [pc, #580]	; 30002470 <OSEventPendMulti+0x6b4>
30002228:	e5933000 	ldr	r3, [r3]
3000222c:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
30002230:	e5832034 	str	r2, [r3, #52]	; 0x34
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
30002234:	e51b0020 	ldr	r0, [fp, #-32]
30002238:	eb0002ae 	bl	30002cf8 <OS_EventTaskWaitMulti>

    OS_EXIT_CRITICAL();
3000223c:	e51b0008 	ldr	r0, [fp, #-8]
30002240:	ebfff7bc 	bl	30000138 <OS_CPU_RestoreSR>
    OS_Sched();                                         /* Find next highest priority task ready       */
30002244:	eb0004ff 	bl	30003648 <OS_Sched>
    OS_ENTER_CRITICAL();
30002248:	ebfff7b2 	bl	30000118 <OS_CPU_SaveSR>
3000224c:	e1a03000 	mov	r3, r0
30002250:	e50b3008 	str	r3, [fp, #-8]

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
30002254:	e59f3214 	ldr	r3, [pc, #532]	; 30002470 <OSEventPendMulti+0x6b4>
30002258:	e5933000 	ldr	r3, [r3]
3000225c:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
30002260:	e3530000 	cmp	r3, #0
30002264:	0a000001 	beq	30002270 <OSEventPendMulti+0x4b4>
30002268:	e3530002 	cmp	r3, #2
3000226c:	1a00001c 	bne	300022e4 <OSEventPendMulti+0x528>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventMultiRdy;
30002270:	e59f31f8 	ldr	r3, [pc, #504]	; 30002470 <OSEventPendMulti+0x6b4>
30002274:	e5933000 	ldr	r3, [r3]
30002278:	e5933024 	ldr	r3, [r3, #36]	; 0x24
3000227c:	e50b3018 	str	r3, [fp, #-24]
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
30002280:	e51b3018 	ldr	r3, [fp, #-24]
30002284:	e3530000 	cmp	r3, #0
30002288:	0a00000b 	beq	300022bc <OSEventPendMulti+0x500>
                *pevents_rdy++   =  pevent;             /* ... return available event ...              */
3000228c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30002290:	e51b2018 	ldr	r2, [fp, #-24]
30002294:	e5832000 	str	r2, [r3]
30002298:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000229c:	e2833004 	add	r3, r3, #4
300022a0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
                *pevents_rdy     = (OS_EVENT *)0;       /* ... & NULL terminate return event array     */
300022a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
300022a8:	e3a02000 	mov	r2, #0
300022ac:	e5832000 	str	r2, [r3]
                  events_rdy_nbr =  1;
300022b0:	e3a03001 	mov	r3, #1
300022b4:	e14b30bc 	strh	r3, [fp, #-12]

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
             break;
300022b8:	ea00000e 	b	300022f8 <OSEventPendMulti+0x53c>
                *pevents_rdy++   =  pevent;             /* ... return available event ...              */
                *pevents_rdy     = (OS_EVENT *)0;       /* ... & NULL terminate return event array     */
                  events_rdy_nbr =  1;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
300022bc:	e59f31ac 	ldr	r3, [pc, #428]	; 30002470 <OSEventPendMulti+0x6b4>
300022c0:	e5933000 	ldr	r3, [r3]
300022c4:	e3a02001 	mov	r2, #1
300022c8:	e5c32039 	strb	r2, [r3, #57]	; 0x39
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
300022cc:	e59f319c 	ldr	r3, [pc, #412]	; 30002470 <OSEventPendMulti+0x6b4>
300022d0:	e5933000 	ldr	r3, [r3]
300022d4:	e1a00003 	mov	r0, r3
300022d8:	e51b1020 	ldr	r1, [fp, #-32]
300022dc:	eb000319 	bl	30002f48 <OS_EventTaskRemoveMulti>
             }
             break;
300022e0:	ea000004 	b	300022f8 <OSEventPendMulti+0x53c>

        case OS_STAT_PEND_TO:                           /* If events timed out, ...                    */
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
300022e4:	e59f3184 	ldr	r3, [pc, #388]	; 30002470 <OSEventPendMulti+0x6b4>
300022e8:	e5933000 	ldr	r3, [r3]
300022ec:	e1a00003 	mov	r0, r3
300022f0:	e51b1020 	ldr	r1, [fp, #-32]
300022f4:	eb000313 	bl	30002f48 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
300022f8:	e59f3170 	ldr	r3, [pc, #368]	; 30002470 <OSEventPendMulti+0x6b4>
300022fc:	e5933000 	ldr	r3, [r3]
30002300:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
30002304:	e3530000 	cmp	r3, #0
30002308:	0a000002 	beq	30002318 <OSEventPendMulti+0x55c>
3000230c:	e3530002 	cmp	r3, #2
30002310:	0a000026 	beq	300023b0 <OSEventPendMulti+0x5f4>
30002314:	ea00002f 	b	300023d8 <OSEventPendMulti+0x61c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
30002318:	e51b3018 	ldr	r3, [fp, #-24]
3000231c:	e5d33000 	ldrb	r3, [r3]
30002320:	e3530001 	cmp	r3, #1
30002324:	ba000013 	blt	30002378 <OSEventPendMulti+0x5bc>
30002328:	e3530002 	cmp	r3, #2
3000232c:	da000008 	ble	30002354 <OSEventPendMulti+0x598>
30002330:	e3530003 	cmp	r3, #3
30002334:	1a00000f 	bne	30002378 <OSEventPendMulti+0x5bc>
#if (OS_SEM_EN > 0u)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
30002338:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
3000233c:	e3a02000 	mov	r2, #0
30002340:	e5832000 	str	r2, [r3]
30002344:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30002348:	e2833004 	add	r3, r3, #4
3000234c:	e50b3028 	str	r3, [fp, #-40]	; 0x28
                      break;
30002350:	ea000012 	b	300023a0 <OSEventPendMulti+0x5e4>

#if ((OS_MBOX_EN > 0u) ||                 \
    ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
30002354:	e59f3114 	ldr	r3, [pc, #276]	; 30002470 <OSEventPendMulti+0x6b4>
30002358:	e5933000 	ldr	r3, [r3]
3000235c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
30002360:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30002364:	e5832000 	str	r2, [r3]
30002368:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
3000236c:	e2833004 	add	r3, r3, #4
30002370:	e50b3028 	str	r3, [fp, #-40]	; 0x28
                      break;
30002374:	ea000009 	b	300023a0 <OSEventPendMulti+0x5e4>
#endif

                 case OS_EVENT_TYPE_MUTEX:
                 case OS_EVENT_TYPE_FLAG:
                 default:
                      OS_EXIT_CRITICAL();
30002378:	e51b0008 	ldr	r0, [fp, #-8]
3000237c:	ebfff76d 	bl	30000138 <OS_CPU_RestoreSR>
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
30002380:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30002384:	e3a02000 	mov	r2, #0
30002388:	e5832000 	str	r2, [r3]
                     *perr        =  OS_ERR_EVENT_TYPE;
3000238c:	e59b3004 	ldr	r3, [fp, #4]
30002390:	e3a02001 	mov	r2, #1
30002394:	e5c32000 	strb	r2, [r3]
                      return (events_rdy_nbr);
30002398:	e15b30bc 	ldrh	r3, [fp, #-12]
3000239c:	ea00002d 	b	30002458 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
300023a0:	e59b3004 	ldr	r3, [fp, #4]
300023a4:	e3a02000 	mov	r2, #0
300023a8:	e5c32000 	strb	r2, [r3]
             break;
300023ac:	ea000012 	b	300023fc <OSEventPendMulti+0x640>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
300023b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
300023b4:	e3a02000 	mov	r2, #0
300023b8:	e5832000 	str	r2, [r3]
300023bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
300023c0:	e2833004 	add	r3, r3, #4
300023c4:	e50b3028 	str	r3, [fp, #-40]	; 0x28
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
300023c8:	e59b3004 	ldr	r3, [fp, #4]
300023cc:	e3a0200e 	mov	r2, #14
300023d0:	e5c32000 	strb	r2, [r3]
             break;
300023d4:	ea000008 	b	300023fc <OSEventPendMulti+0x640>

        case OS_STAT_PEND_TO:
        default:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
300023d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
300023dc:	e3a02000 	mov	r2, #0
300023e0:	e5832000 	str	r2, [r3]
300023e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
300023e8:	e2833004 	add	r3, r3, #4
300023ec:	e50b3028 	str	r3, [fp, #-40]	; 0x28
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
300023f0:	e59b3004 	ldr	r3, [fp, #4]
300023f4:	e3a0200a 	mov	r2, #10
300023f8:	e5c32000 	strb	r2, [r3]
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
300023fc:	e59f306c 	ldr	r3, [pc, #108]	; 30002470 <OSEventPendMulti+0x6b4>
30002400:	e5933000 	ldr	r3, [r3]
30002404:	e3a02000 	mov	r2, #0
30002408:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
3000240c:	e59f305c 	ldr	r3, [pc, #92]	; 30002470 <OSEventPendMulti+0x6b4>
30002410:	e5933000 	ldr	r3, [r3]
30002414:	e3a02000 	mov	r2, #0
30002418:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;      /* Clear event pointers                        */
3000241c:	e59f304c 	ldr	r3, [pc, #76]	; 30002470 <OSEventPendMulti+0x6b4>
30002420:	e5933000 	ldr	r3, [r3]
30002424:	e3a02000 	mov	r2, #0
30002428:	e5832020 	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
3000242c:	e59f303c 	ldr	r3, [pc, #60]	; 30002470 <OSEventPendMulti+0x6b4>
30002430:	e5933000 	ldr	r3, [r3]
30002434:	e3a02000 	mov	r2, #0
30002438:	e5832024 	str	r2, [r3, #36]	; 0x24
#if ((OS_MBOX_EN > 0u) ||                 \
    ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
3000243c:	e59f302c 	ldr	r3, [pc, #44]	; 30002470 <OSEventPendMulti+0x6b4>
30002440:	e5933000 	ldr	r3, [r3]
30002444:	e3a02000 	mov	r2, #0
30002448:	e5832028 	str	r2, [r3, #40]	; 0x28
#endif
    OS_EXIT_CRITICAL();
3000244c:	e51b0008 	ldr	r0, [fp, #-8]
30002450:	ebfff738 	bl	30000138 <OS_CPU_RestoreSR>

    return (events_rdy_nbr);
30002454:	e15b30bc 	ldrh	r3, [fp, #-12]
}
30002458:	e1a00003 	mov	r0, r3
3000245c:	e24bd004 	sub	sp, fp, #4
30002460:	e8bd4800 	pop	{fp, lr}
30002464:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30002468:	30017bdc 	.word	0x30017bdc
3000246c:	300173e8 	.word	0x300173e8
30002470:	30017be0 	.word	0x30017be0

30002474 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
30002474:	e92d4800 	push	{fp, lr}
30002478:	e28db004 	add	fp, sp, #4
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
3000247c:	ebfffd6d 	bl	30001a38 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
30002480:	eb000355 	bl	300031dc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
30002484:	eb000385 	bl	300032a0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
30002488:	eb0003ea 	bl	30003438 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
3000248c:	eb000309 	bl	300030b8 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
30002490:	eb000b3a 	bl	30005180 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
30002494:	eb000ff5 	bl	30006470 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
30002498:	eb001874 	bl	30008670 <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
3000249c:	eb0003a7 	bl	30003340 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
300024a0:	eb0003c5 	bl	300033bc <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
300024a4:	eb002522 	bl	3000b934 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
300024a8:	ebfffd6b 	bl	30001a5c <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
#endif
}
300024ac:	e24bd004 	sub	sp, fp, #4
300024b0:	e8bd4800 	pop	{fp, lr}
300024b4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300024b8 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
300024b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300024bc:	e28db000 	add	fp, sp, #0
    if (OSRunning == OS_TRUE) {
300024c0:	e59f303c 	ldr	r3, [pc, #60]	; 30002504 <OSIntEnter+0x4c>
300024c4:	e5d33000 	ldrb	r3, [r3]
300024c8:	e3530001 	cmp	r3, #1
300024cc:	1a000009 	bne	300024f8 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
300024d0:	e59f3030 	ldr	r3, [pc, #48]	; 30002508 <OSIntEnter+0x50>
300024d4:	e5d33000 	ldrb	r3, [r3]
300024d8:	e35300ff 	cmp	r3, #255	; 0xff
300024dc:	0a000005 	beq	300024f8 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
300024e0:	e59f3020 	ldr	r3, [pc, #32]	; 30002508 <OSIntEnter+0x50>
300024e4:	e5d33000 	ldrb	r3, [r3]
300024e8:	e2833001 	add	r3, r3, #1
300024ec:	e20320ff 	and	r2, r3, #255	; 0xff
300024f0:	e59f3010 	ldr	r3, [pc, #16]	; 30002508 <OSIntEnter+0x50>
300024f4:	e5c32000 	strb	r2, [r3]
        }
        OS_TRACE_ISR_ENTER();
    }
}
300024f8:	e28bd000 	add	sp, fp, #0
300024fc:	e8bd0800 	pop	{fp}
30002500:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30002504:	300173f1 	.word	0x300173f1
30002508:	30017bdc 	.word	0x30017bdc

3000250c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
3000250c:	e92d4800 	push	{fp, lr}
30002510:	e28db004 	add	fp, sp, #4
30002514:	e24dd008 	sub	sp, sp, #8
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
30002518:	e3a03000 	mov	r3, #0
3000251c:	e50b3008 	str	r3, [fp, #-8]
#endif



    if (OSRunning == OS_TRUE) {
30002520:	e59f30d4 	ldr	r3, [pc, #212]	; 300025fc <OSIntExit+0xf0>
30002524:	e5d33000 	ldrb	r3, [r3]
30002528:	e3530001 	cmp	r3, #1
3000252c:	1a00002f 	bne	300025f0 <OSIntExit+0xe4>
        OS_ENTER_CRITICAL();
30002530:	ebfff6f8 	bl	30000118 <OS_CPU_SaveSR>
30002534:	e1a03000 	mov	r3, r0
30002538:	e50b3008 	str	r3, [fp, #-8]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
3000253c:	e59f30bc 	ldr	r3, [pc, #188]	; 30002600 <OSIntExit+0xf4>
30002540:	e5d33000 	ldrb	r3, [r3]
30002544:	e3530000 	cmp	r3, #0
30002548:	0a000005 	beq	30002564 <OSIntExit+0x58>
            OSIntNesting--;
3000254c:	e59f30ac 	ldr	r3, [pc, #172]	; 30002600 <OSIntExit+0xf4>
30002550:	e5d33000 	ldrb	r3, [r3]
30002554:	e2433001 	sub	r3, r3, #1
30002558:	e20320ff 	and	r2, r3, #255	; 0xff
3000255c:	e59f309c 	ldr	r3, [pc, #156]	; 30002600 <OSIntExit+0xf4>
30002560:	e5c32000 	strb	r2, [r3]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
30002564:	e59f3094 	ldr	r3, [pc, #148]	; 30002600 <OSIntExit+0xf4>
30002568:	e5d33000 	ldrb	r3, [r3]
3000256c:	e3530000 	cmp	r3, #0
30002570:	1a00001c 	bne	300025e8 <OSIntExit+0xdc>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
30002574:	e59f3088 	ldr	r3, [pc, #136]	; 30002604 <OSIntExit+0xf8>
30002578:	e5d33000 	ldrb	r3, [r3]
3000257c:	e3530000 	cmp	r3, #0
30002580:	1a000018 	bne	300025e8 <OSIntExit+0xdc>
                OS_SchedNew();
30002584:	eb000464 	bl	3000371c <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
30002588:	e59f3078 	ldr	r3, [pc, #120]	; 30002608 <OSIntExit+0xfc>
3000258c:	e5d33000 	ldrb	r3, [r3]
30002590:	e1a02003 	mov	r2, r3
30002594:	e59f3070 	ldr	r3, [pc, #112]	; 3000260c <OSIntExit+0x100>
30002598:	e7932102 	ldr	r2, [r3, r2, lsl #2]
3000259c:	e59f306c 	ldr	r3, [pc, #108]	; 30002610 <OSIntExit+0x104>
300025a0:	e5832000 	str	r2, [r3]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
300025a4:	e59f305c 	ldr	r3, [pc, #92]	; 30002608 <OSIntExit+0xfc>
300025a8:	e5d32000 	ldrb	r2, [r3]
300025ac:	e59f3060 	ldr	r3, [pc, #96]	; 30002614 <OSIntExit+0x108>
300025b0:	e5d33000 	ldrb	r3, [r3]
300025b4:	e1520003 	cmp	r2, r3
300025b8:	0a00000a 	beq	300025e8 <OSIntExit+0xdc>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
300025bc:	e59f304c 	ldr	r3, [pc, #76]	; 30002610 <OSIntExit+0x104>
300025c0:	e5933000 	ldr	r3, [r3]
300025c4:	e5932040 	ldr	r2, [r3, #64]	; 0x40
300025c8:	e2822001 	add	r2, r2, #1
300025cc:	e5832040 	str	r2, [r3, #64]	; 0x40
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
300025d0:	e59f3040 	ldr	r3, [pc, #64]	; 30002618 <OSIntExit+0x10c>
300025d4:	e5933000 	ldr	r3, [r3]
300025d8:	e2832001 	add	r2, r3, #1
300025dc:	e59f3034 	ldr	r3, [pc, #52]	; 30002618 <OSIntExit+0x10c>
300025e0:	e5832000 	str	r2, [r3]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
300025e4:	ebfffd6a 	bl	30001b94 <OSIntCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
300025e8:	e51b0008 	ldr	r0, [fp, #-8]
300025ec:	ebfff6d1 	bl	30000138 <OS_CPU_RestoreSR>
    }
}
300025f0:	e24bd004 	sub	sp, fp, #4
300025f4:	e8bd4800 	pop	{fp, lr}
300025f8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300025fc:	300173f1 	.word	0x300173f1
30002600:	30017bdc 	.word	0x30017bdc
30002604:	300173e8 	.word	0x300173e8
30002608:	300173fa 	.word	0x300173fa
3000260c:	300186d0 	.word	0x300186d0
30002610:	300179c4 	.word	0x300179c4
30002614:	300176cc 	.word	0x300176cc
30002618:	3001794c 	.word	0x3001794c

3000261c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
3000261c:	e92d4800 	push	{fp, lr}
30002620:	e28db004 	add	fp, sp, #4
30002624:	e24dd008 	sub	sp, sp, #8
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30002628:	e3a03000 	mov	r3, #0
3000262c:	e50b3008 	str	r3, [fp, #-8]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
30002630:	e59f3060 	ldr	r3, [pc, #96]	; 30002698 <OSSchedLock+0x7c>
30002634:	e5d33000 	ldrb	r3, [r3]
30002638:	e3530001 	cmp	r3, #1
3000263c:	1a000012 	bne	3000268c <OSSchedLock+0x70>
        OS_ENTER_CRITICAL();
30002640:	ebfff6b4 	bl	30000118 <OS_CPU_SaveSR>
30002644:	e1a03000 	mov	r3, r0
30002648:	e50b3008 	str	r3, [fp, #-8]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
3000264c:	e59f3048 	ldr	r3, [pc, #72]	; 3000269c <OSSchedLock+0x80>
30002650:	e5d33000 	ldrb	r3, [r3]
30002654:	e3530000 	cmp	r3, #0
30002658:	1a000009 	bne	30002684 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
3000265c:	e59f303c 	ldr	r3, [pc, #60]	; 300026a0 <OSSchedLock+0x84>
30002660:	e5d33000 	ldrb	r3, [r3]
30002664:	e35300ff 	cmp	r3, #255	; 0xff
30002668:	0a000005 	beq	30002684 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
3000266c:	e59f302c 	ldr	r3, [pc, #44]	; 300026a0 <OSSchedLock+0x84>
30002670:	e5d33000 	ldrb	r3, [r3]
30002674:	e2833001 	add	r3, r3, #1
30002678:	e20320ff 	and	r2, r3, #255	; 0xff
3000267c:	e59f301c 	ldr	r3, [pc, #28]	; 300026a0 <OSSchedLock+0x84>
30002680:	e5c32000 	strb	r2, [r3]
            }
        }
        OS_EXIT_CRITICAL();
30002684:	e51b0008 	ldr	r0, [fp, #-8]
30002688:	ebfff6aa 	bl	30000138 <OS_CPU_RestoreSR>
    }
}
3000268c:	e24bd004 	sub	sp, fp, #4
30002690:	e8bd4800 	pop	{fp, lr}
30002694:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30002698:	300173f1 	.word	0x300173f1
3000269c:	30017bdc 	.word	0x30017bdc
300026a0:	300173e8 	.word	0x300173e8

300026a4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
300026a4:	e92d4800 	push	{fp, lr}
300026a8:	e28db004 	add	fp, sp, #4
300026ac:	e24dd008 	sub	sp, sp, #8
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
300026b0:	e3a03000 	mov	r3, #0
300026b4:	e50b3008 	str	r3, [fp, #-8]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
300026b8:	e59f3098 	ldr	r3, [pc, #152]	; 30002758 <OSSchedUnlock+0xb4>
300026bc:	e5d33000 	ldrb	r3, [r3]
300026c0:	e3530001 	cmp	r3, #1
300026c4:	1a000020 	bne	3000274c <OSSchedUnlock+0xa8>
        OS_ENTER_CRITICAL();
300026c8:	ebfff692 	bl	30000118 <OS_CPU_SaveSR>
300026cc:	e1a03000 	mov	r3, r0
300026d0:	e50b3008 	str	r3, [fp, #-8]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
300026d4:	e59f3080 	ldr	r3, [pc, #128]	; 3000275c <OSSchedUnlock+0xb8>
300026d8:	e5d33000 	ldrb	r3, [r3]
300026dc:	e3530000 	cmp	r3, #0
300026e0:	1a000017 	bne	30002744 <OSSchedUnlock+0xa0>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
300026e4:	e59f3074 	ldr	r3, [pc, #116]	; 30002760 <OSSchedUnlock+0xbc>
300026e8:	e5d33000 	ldrb	r3, [r3]
300026ec:	e3530000 	cmp	r3, #0
300026f0:	0a000010 	beq	30002738 <OSSchedUnlock+0x94>
                OSLockNesting--;                           /* Decrement lock nesting level             */
300026f4:	e59f3064 	ldr	r3, [pc, #100]	; 30002760 <OSSchedUnlock+0xbc>
300026f8:	e5d33000 	ldrb	r3, [r3]
300026fc:	e2433001 	sub	r3, r3, #1
30002700:	e20320ff 	and	r2, r3, #255	; 0xff
30002704:	e59f3054 	ldr	r3, [pc, #84]	; 30002760 <OSSchedUnlock+0xbc>
30002708:	e5c32000 	strb	r2, [r3]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
3000270c:	e59f304c 	ldr	r3, [pc, #76]	; 30002760 <OSSchedUnlock+0xbc>
30002710:	e5d33000 	ldrb	r3, [r3]
30002714:	e3530000 	cmp	r3, #0
30002718:	1a000003 	bne	3000272c <OSSchedUnlock+0x88>
                    OS_EXIT_CRITICAL();
3000271c:	e51b0008 	ldr	r0, [fp, #-8]
30002720:	ebfff684 	bl	30000138 <OS_CPU_RestoreSR>
                    OS_Sched();                            /* See if a HPT is ready                    */
30002724:	eb0003c7 	bl	30003648 <OS_Sched>
                } else {
                    OS_EXIT_CRITICAL();
                }
            } else {
                OS_EXIT_CRITICAL();
30002728:	ea000007 	b	3000274c <OSSchedUnlock+0xa8>
                OSLockNesting--;                           /* Decrement lock nesting level             */
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
                } else {
                    OS_EXIT_CRITICAL();
3000272c:	e51b0008 	ldr	r0, [fp, #-8]
30002730:	ebfff680 	bl	30000138 <OS_CPU_RestoreSR>
                }
            } else {
                OS_EXIT_CRITICAL();
30002734:	ea000004 	b	3000274c <OSSchedUnlock+0xa8>
30002738:	e51b0008 	ldr	r0, [fp, #-8]
3000273c:	ebfff67d 	bl	30000138 <OS_CPU_RestoreSR>
30002740:	ea000001 	b	3000274c <OSSchedUnlock+0xa8>
            }
        } else {
            OS_EXIT_CRITICAL();
30002744:	e51b0008 	ldr	r0, [fp, #-8]
30002748:	ebfff67a 	bl	30000138 <OS_CPU_RestoreSR>
        }
    }
}
3000274c:	e24bd004 	sub	sp, fp, #4
30002750:	e8bd4800 	pop	{fp, lr}
30002754:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30002758:	300173f1 	.word	0x300173f1
3000275c:	30017bdc 	.word	0x30017bdc
30002760:	300173e8 	.word	0x300173e8

30002764 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
30002764:	e92d4800 	push	{fp, lr}
30002768:	e28db004 	add	fp, sp, #4
    if (OSRunning == OS_FALSE) {
3000276c:	e59f3058 	ldr	r3, [pc, #88]	; 300027cc <OSStart+0x68>
30002770:	e5d33000 	ldrb	r3, [r3]
30002774:	e3530000 	cmp	r3, #0
30002778:	1a000010 	bne	300027c0 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
3000277c:	eb0003e6 	bl	3000371c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
30002780:	e59f3048 	ldr	r3, [pc, #72]	; 300027d0 <OSStart+0x6c>
30002784:	e5d32000 	ldrb	r2, [r3]
30002788:	e59f3044 	ldr	r3, [pc, #68]	; 300027d4 <OSStart+0x70>
3000278c:	e5c32000 	strb	r2, [r3]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
30002790:	e59f3038 	ldr	r3, [pc, #56]	; 300027d0 <OSStart+0x6c>
30002794:	e5d33000 	ldrb	r3, [r3]
30002798:	e1a02003 	mov	r2, r3
3000279c:	e59f3034 	ldr	r3, [pc, #52]	; 300027d8 <OSStart+0x74>
300027a0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
300027a4:	e59f3030 	ldr	r3, [pc, #48]	; 300027dc <OSStart+0x78>
300027a8:	e5832000 	str	r2, [r3]
        OSTCBCur      = OSTCBHighRdy;
300027ac:	e59f3028 	ldr	r3, [pc, #40]	; 300027dc <OSStart+0x78>
300027b0:	e5932000 	ldr	r2, [r3]
300027b4:	e59f3024 	ldr	r3, [pc, #36]	; 300027e0 <OSStart+0x7c>
300027b8:	e5832000 	str	r2, [r3]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
300027bc:	ebfff672 	bl	3000018c <OSStartHighRdy>
    }
}
300027c0:	e24bd004 	sub	sp, fp, #4
300027c4:	e8bd4800 	pop	{fp, lr}
300027c8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300027cc:	300173f1 	.word	0x300173f1
300027d0:	300173fa 	.word	0x300173fa
300027d4:	300176cc 	.word	0x300176cc
300027d8:	300186d0 	.word	0x300186d0
300027dc:	300179c4 	.word	0x300179c4
300027e0:	30017be0 	.word	0x30017be0

300027e4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
300027e4:	e92d4800 	push	{fp, lr}
300027e8:	e28db004 	add	fp, sp, #4
300027ec:	e24dd008 	sub	sp, sp, #8
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
300027f0:	e3a03000 	mov	r3, #0
300027f4:	e50b3008 	str	r3, [fp, #-8]
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
300027f8:	e3a00002 	mov	r0, #2
300027fc:	eb002046 	bl	3000a91c <OSTimeDly>
    OS_ENTER_CRITICAL();
30002800:	ebfff644 	bl	30000118 <OS_CPU_SaveSR>
30002804:	e1a03000 	mov	r3, r0
30002808:	e50b3008 	str	r3, [fp, #-8]
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
3000280c:	e59f3050 	ldr	r3, [pc, #80]	; 30002864 <OSStatInit+0x80>
30002810:	e3a02000 	mov	r2, #0
30002814:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
30002818:	e51b0008 	ldr	r0, [fp, #-8]
3000281c:	ebfff645 	bl	30000138 <OS_CPU_RestoreSR>
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
30002820:	e3a0000a 	mov	r0, #10
30002824:	eb00203c 	bl	3000a91c <OSTimeDly>
    OS_ENTER_CRITICAL();
30002828:	ebfff63a 	bl	30000118 <OS_CPU_SaveSR>
3000282c:	e1a03000 	mov	r3, r0
30002830:	e50b3008 	str	r3, [fp, #-8]
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
30002834:	e59f3028 	ldr	r3, [pc, #40]	; 30002864 <OSStatInit+0x80>
30002838:	e5932000 	ldr	r2, [r3]
3000283c:	e59f3024 	ldr	r3, [pc, #36]	; 30002868 <OSStatInit+0x84>
30002840:	e5832000 	str	r2, [r3]
    OSStatRdy    = OS_TRUE;
30002844:	e59f3020 	ldr	r3, [pc, #32]	; 3000286c <OSStatInit+0x88>
30002848:	e3a02001 	mov	r2, #1
3000284c:	e5c32000 	strb	r2, [r3]
    OS_EXIT_CRITICAL();
30002850:	e51b0008 	ldr	r0, [fp, #-8]
30002854:	ebfff637 	bl	30000138 <OS_CPU_RestoreSR>
}
30002858:	e24bd004 	sub	sp, fp, #4
3000285c:	e8bd4800 	pop	{fp, lr}
30002860:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30002864:	300173f4 	.word	0x300173f4
30002868:	30017954 	.word	0x30017954
3000286c:	300186cc 	.word	0x300186cc

30002870 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
30002870:	e92d4800 	push	{fp, lr}
30002874:	e28db004 	add	fp, sp, #4
30002878:	e24dd008 	sub	sp, sp, #8
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
3000287c:	e3a03000 	mov	r3, #0
30002880:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
30002884:	ebfffcbd 	bl	30001b80 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
30002888:	ebfff622 	bl	30000118 <OS_CPU_SaveSR>
3000288c:	e1a03000 	mov	r3, r0
30002890:	e50b3008 	str	r3, [fp, #-8]
    OSTime++;
30002894:	e59f314c 	ldr	r3, [pc, #332]	; 300029e8 <OSTimeTick+0x178>
30002898:	e5933000 	ldr	r3, [r3]
3000289c:	e2832001 	add	r2, r3, #1
300028a0:	e59f3140 	ldr	r3, [pc, #320]	; 300029e8 <OSTimeTick+0x178>
300028a4:	e5832000 	str	r2, [r3]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
300028a8:	e51b0008 	ldr	r0, [fp, #-8]
300028ac:	ebfff621 	bl	30000138 <OS_CPU_RestoreSR>
#endif
    if (OSRunning == OS_TRUE) {
300028b0:	e59f3134 	ldr	r3, [pc, #308]	; 300029ec <OSTimeTick+0x17c>
300028b4:	e5d33000 	ldrb	r3, [r3]
300028b8:	e3530001 	cmp	r3, #1
300028bc:	1a000046 	bne	300029dc <OSTimeTick+0x16c>
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
300028c0:	e59f3128 	ldr	r3, [pc, #296]	; 300029f0 <OSTimeTick+0x180>
300028c4:	e5933000 	ldr	r3, [r3]
300028c8:	e50b300c 	str	r3, [fp, #-12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
300028cc:	ea00003e 	b	300029cc <OSTimeTick+0x15c>
            OS_ENTER_CRITICAL();
300028d0:	ebfff610 	bl	30000118 <OS_CPU_SaveSR>
300028d4:	e1a03000 	mov	r3, r0
300028d8:	e50b3008 	str	r3, [fp, #-8]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
300028dc:	e51b300c 	ldr	r3, [fp, #-12]
300028e0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
300028e4:	e3530000 	cmp	r3, #0
300028e8:	0a000032 	beq	300029b8 <OSTimeTick+0x148>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
300028ec:	e51b300c 	ldr	r3, [fp, #-12]
300028f0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
300028f4:	e2432001 	sub	r2, r3, #1
300028f8:	e51b300c 	ldr	r3, [fp, #-12]
300028fc:	e5832034 	str	r2, [r3, #52]	; 0x34
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
30002900:	e51b300c 	ldr	r3, [fp, #-12]
30002904:	e5933034 	ldr	r3, [r3, #52]	; 0x34
30002908:	e3530000 	cmp	r3, #0
3000290c:	1a000029 	bne	300029b8 <OSTimeTick+0x148>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
30002910:	e51b300c 	ldr	r3, [fp, #-12]
30002914:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
30002918:	e2033037 	and	r3, r3, #55	; 0x37
3000291c:	e3530000 	cmp	r3, #0
30002920:	0a000008 	beq	30002948 <OSTimeTick+0xd8>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
30002924:	e51b300c 	ldr	r3, [fp, #-12]
30002928:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
3000292c:	e20330c8 	and	r3, r3, #200	; 0xc8
30002930:	e51b200c 	ldr	r2, [fp, #-12]
30002934:	e5c23038 	strb	r3, [r2, #56]	; 0x38
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
30002938:	e51b300c 	ldr	r3, [fp, #-12]
3000293c:	e3a02001 	mov	r2, #1
30002940:	e5c32039 	strb	r2, [r3, #57]	; 0x39
30002944:	ea000002 	b	30002954 <OSTimeTick+0xe4>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
30002948:	e51b300c 	ldr	r3, [fp, #-12]
3000294c:	e3a02000 	mov	r2, #0
30002950:	e5c32039 	strb	r2, [r3, #57]	; 0x39
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
30002954:	e51b300c 	ldr	r3, [fp, #-12]
30002958:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
3000295c:	e2033008 	and	r3, r3, #8
30002960:	e3530000 	cmp	r3, #0
30002964:	1a000013 	bne	300029b8 <OSTimeTick+0x148>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
30002968:	e51b300c 	ldr	r3, [fp, #-12]
3000296c:	e5d3203e 	ldrb	r2, [r3, #62]	; 0x3e
30002970:	e59f307c 	ldr	r3, [pc, #124]	; 300029f4 <OSTimeTick+0x184>
30002974:	e5d33000 	ldrb	r3, [r3]
30002978:	e1823003 	orr	r3, r2, r3
3000297c:	e20320ff 	and	r2, r3, #255	; 0xff
30002980:	e59f306c 	ldr	r3, [pc, #108]	; 300029f4 <OSTimeTick+0x184>
30002984:	e5c32000 	strb	r2, [r3]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
30002988:	e51b300c 	ldr	r3, [fp, #-12]
3000298c:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30002990:	e51b200c 	ldr	r2, [fp, #-12]
30002994:	e5d2203c 	ldrb	r2, [r2, #60]	; 0x3c
30002998:	e59f1058 	ldr	r1, [pc, #88]	; 300029f8 <OSTimeTick+0x188>
3000299c:	e7d11002 	ldrb	r1, [r1, r2]
300029a0:	e51b200c 	ldr	r2, [fp, #-12]
300029a4:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
300029a8:	e1812002 	orr	r2, r1, r2
300029ac:	e20210ff 	and	r1, r2, #255	; 0xff
300029b0:	e59f2040 	ldr	r2, [pc, #64]	; 300029f8 <OSTimeTick+0x188>
300029b4:	e7c21003 	strb	r1, [r2, r3]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
300029b8:	e51b300c 	ldr	r3, [fp, #-12]
300029bc:	e5933014 	ldr	r3, [r3, #20]
300029c0:	e50b300c 	str	r3, [fp, #-12]
            OS_EXIT_CRITICAL();
300029c4:	e51b0008 	ldr	r0, [fp, #-8]
300029c8:	ebfff5da 	bl	30000138 <OS_CPU_RestoreSR>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
300029cc:	e51b300c 	ldr	r3, [fp, #-12]
300029d0:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
300029d4:	e353003f 	cmp	r3, #63	; 0x3f
300029d8:	1affffbc 	bne	300028d0 <OSTimeTick+0x60>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
300029dc:	e24bd004 	sub	sp, fp, #4
300029e0:	e8bd4800 	pop	{fp, lr}
300029e4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300029e8:	30017be8 	.word	0x30017be8
300029ec:	300173f1 	.word	0x300173f1
300029f0:	300176d0 	.word	0x300176d0
300029f4:	300179cc 	.word	0x300179cc
300029f8:	300179d0 	.word	0x300179d0

300029fc <OSVersion>:
* Returns    : The version number of uC/OS-II multiplied by 10000.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
300029fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30002a00:	e28db000 	add	fp, sp, #0
    return (OS_VERSION);
30002a04:	e59f300c 	ldr	r3, [pc, #12]	; 30002a18 <OSVersion+0x1c>
}
30002a08:	e1a00003 	mov	r0, r3
30002a0c:	e28bd000 	add	sp, fp, #0
30002a10:	e8bd0800 	pop	{fp}
30002a14:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30002a18:	00007274 	.word	0x00007274

30002a1c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
30002a1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30002a20:	e28db000 	add	fp, sp, #0
}
30002a24:	e28bd000 	add	sp, fp, #0
30002a28:	e8bd0800 	pop	{fp}
30002a2c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30002a30 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
30002a30:	e92d4800 	push	{fp, lr}
30002a34:	e28db004 	add	fp, sp, #4
30002a38:	e24dd018 	sub	sp, sp, #24
30002a3c:	e50b0010 	str	r0, [fp, #-16]
30002a40:	e50b1014 	str	r1, [fp, #-20]
30002a44:	e54b2015 	strb	r2, [fp, #-21]
30002a48:	e54b3016 	strb	r3, [fp, #-22]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
30002a4c:	e51b3010 	ldr	r3, [fp, #-16]
30002a50:	e5d3300a 	ldrb	r3, [r3, #10]
30002a54:	e59f2150 	ldr	r2, [pc, #336]	; 30002bac <OS_EventTaskRdy+0x17c>
30002a58:	e7d23003 	ldrb	r3, [r2, r3]
30002a5c:	e54b3007 	strb	r3, [fp, #-7]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
30002a60:	e55b2007 	ldrb	r2, [fp, #-7]
30002a64:	e51b1010 	ldr	r1, [fp, #-16]
30002a68:	e3a03008 	mov	r3, #8
30002a6c:	e0812002 	add	r2, r1, r2
30002a70:	e0823003 	add	r3, r2, r3
30002a74:	e5d33003 	ldrb	r3, [r3, #3]
30002a78:	e59f212c 	ldr	r2, [pc, #300]	; 30002bac <OS_EventTaskRdy+0x17c>
30002a7c:	e7d23003 	ldrb	r3, [r2, r3]
30002a80:	e54b3006 	strb	r3, [fp, #-6]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
30002a84:	e55b3007 	ldrb	r3, [fp, #-7]
30002a88:	e1a03183 	lsl	r3, r3, #3
30002a8c:	e20320ff 	and	r2, r3, #255	; 0xff
30002a90:	e55b3006 	ldrb	r3, [fp, #-6]
30002a94:	e0823003 	add	r3, r2, r3
30002a98:	e54b3005 	strb	r3, [fp, #-5]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
30002a9c:	e55b2005 	ldrb	r2, [fp, #-5]
30002aa0:	e59f3108 	ldr	r3, [pc, #264]	; 30002bb0 <OS_EventTaskRdy+0x180>
30002aa4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
30002aa8:	e50b300c 	str	r3, [fp, #-12]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
30002aac:	e51b300c 	ldr	r3, [fp, #-12]
30002ab0:	e3a02000 	mov	r2, #0
30002ab4:	e5832034 	str	r2, [r3, #52]	; 0x34
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
30002ab8:	e51b300c 	ldr	r3, [fp, #-12]
30002abc:	e51b2014 	ldr	r2, [fp, #-20]
30002ac0:	e5832028 	str	r2, [r3, #40]	; 0x28
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
30002ac4:	e51b300c 	ldr	r3, [fp, #-12]
30002ac8:	e5d32038 	ldrb	r2, [r3, #56]	; 0x38
30002acc:	e55b3015 	ldrb	r3, [fp, #-21]
30002ad0:	e1e03003 	mvn	r3, r3
30002ad4:	e20330ff 	and	r3, r3, #255	; 0xff
30002ad8:	e0023003 	and	r3, r2, r3
30002adc:	e20320ff 	and	r2, r3, #255	; 0xff
30002ae0:	e51b300c 	ldr	r3, [fp, #-12]
30002ae4:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
30002ae8:	e51b300c 	ldr	r3, [fp, #-12]
30002aec:	e55b2016 	ldrb	r2, [fp, #-22]
30002af0:	e5c32039 	strb	r2, [r3, #57]	; 0x39
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
30002af4:	e51b300c 	ldr	r3, [fp, #-12]
30002af8:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
30002afc:	e2033008 	and	r3, r3, #8
30002b00:	e3530000 	cmp	r3, #0
30002b04:	1a000011 	bne	30002b50 <OS_EventTaskRdy+0x120>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
30002b08:	e51b300c 	ldr	r3, [fp, #-12]
30002b0c:	e5d3203e 	ldrb	r2, [r3, #62]	; 0x3e
30002b10:	e59f309c 	ldr	r3, [pc, #156]	; 30002bb4 <OS_EventTaskRdy+0x184>
30002b14:	e5d33000 	ldrb	r3, [r3]
30002b18:	e1823003 	orr	r3, r2, r3
30002b1c:	e20320ff 	and	r2, r3, #255	; 0xff
30002b20:	e59f308c 	ldr	r3, [pc, #140]	; 30002bb4 <OS_EventTaskRdy+0x184>
30002b24:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
30002b28:	e55b3007 	ldrb	r3, [fp, #-7]
30002b2c:	e55b2007 	ldrb	r2, [fp, #-7]
30002b30:	e59f1080 	ldr	r1, [pc, #128]	; 30002bb8 <OS_EventTaskRdy+0x188>
30002b34:	e7d11002 	ldrb	r1, [r1, r2]
30002b38:	e51b200c 	ldr	r2, [fp, #-12]
30002b3c:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
30002b40:	e1812002 	orr	r2, r1, r2
30002b44:	e20210ff 	and	r1, r2, #255	; 0xff
30002b48:	e59f2068 	ldr	r2, [pc, #104]	; 30002bb8 <OS_EventTaskRdy+0x188>
30002b4c:	e7c21003 	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
30002b50:	e51b000c 	ldr	r0, [fp, #-12]
30002b54:	e51b1010 	ldr	r1, [fp, #-16]
30002b58:	eb0000c8 	bl	30002e80 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
30002b5c:	e51b300c 	ldr	r3, [fp, #-12]
30002b60:	e5933020 	ldr	r3, [r3, #32]
30002b64:	e3530000 	cmp	r3, #0
30002b68:	0a00000a 	beq	30002b98 <OS_EventTaskRdy+0x168>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
30002b6c:	e51b300c 	ldr	r3, [fp, #-12]
30002b70:	e5933020 	ldr	r3, [r3, #32]
30002b74:	e51b000c 	ldr	r0, [fp, #-12]
30002b78:	e1a01003 	mov	r1, r3
30002b7c:	eb0000f1 	bl	30002f48 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
30002b80:	e51b300c 	ldr	r3, [fp, #-12]
30002b84:	e3a02000 	mov	r2, #0
30002b88:	e5832020 	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
30002b8c:	e51b300c 	ldr	r3, [fp, #-12]
30002b90:	e51b2010 	ldr	r2, [fp, #-16]
30002b94:	e5832024 	str	r2, [r3, #36]	; 0x24
    }
#endif

    return (prio);
30002b98:	e55b3005 	ldrb	r3, [fp, #-5]
}
30002b9c:	e1a00003 	mov	r0, r3
30002ba0:	e24bd004 	sub	sp, fp, #4
30002ba4:	e8bd4800 	pop	{fp, lr}
30002ba8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30002bac:	3000c178 	.word	0x3000c178
30002bb0:	300186d0 	.word	0x300186d0
30002bb4:	300179cc 	.word	0x300179cc
30002bb8:	300179d0 	.word	0x300179d0

30002bbc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
30002bbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30002bc0:	e28db000 	add	fp, sp, #0
30002bc4:	e24dd014 	sub	sp, sp, #20
30002bc8:	e50b0010 	str	r0, [fp, #-16]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
30002bcc:	e59f3118 	ldr	r3, [pc, #280]	; 30002cec <OS_EventTaskWait+0x130>
30002bd0:	e5933000 	ldr	r3, [r3]
30002bd4:	e51b2010 	ldr	r2, [fp, #-16]
30002bd8:	e583201c 	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
30002bdc:	e59f3108 	ldr	r3, [pc, #264]	; 30002cec <OS_EventTaskWait+0x130>
30002be0:	e5933000 	ldr	r3, [r3]
30002be4:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30002be8:	e1a01003 	mov	r1, r3
30002bec:	e59f30f8 	ldr	r3, [pc, #248]	; 30002cec <OS_EventTaskWait+0x130>
30002bf0:	e5933000 	ldr	r3, [r3]
30002bf4:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30002bf8:	e1a02003 	mov	r2, r3
30002bfc:	e51b0010 	ldr	r0, [fp, #-16]
30002c00:	e3a03008 	mov	r3, #8
30002c04:	e0802002 	add	r2, r0, r2
30002c08:	e0823003 	add	r3, r2, r3
30002c0c:	e5d32003 	ldrb	r2, [r3, #3]
30002c10:	e59f30d4 	ldr	r3, [pc, #212]	; 30002cec <OS_EventTaskWait+0x130>
30002c14:	e5933000 	ldr	r3, [r3]
30002c18:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
30002c1c:	e1823003 	orr	r3, r2, r3
30002c20:	e20320ff 	and	r2, r3, #255	; 0xff
30002c24:	e51b0010 	ldr	r0, [fp, #-16]
30002c28:	e3a03008 	mov	r3, #8
30002c2c:	e0801001 	add	r1, r0, r1
30002c30:	e0813003 	add	r3, r1, r3
30002c34:	e5c32003 	strb	r2, [r3, #3]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
30002c38:	e51b3010 	ldr	r3, [fp, #-16]
30002c3c:	e5d3200a 	ldrb	r2, [r3, #10]
30002c40:	e59f30a4 	ldr	r3, [pc, #164]	; 30002cec <OS_EventTaskWait+0x130>
30002c44:	e5933000 	ldr	r3, [r3]
30002c48:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30002c4c:	e1823003 	orr	r3, r2, r3
30002c50:	e20320ff 	and	r2, r3, #255	; 0xff
30002c54:	e51b3010 	ldr	r3, [fp, #-16]
30002c58:	e5c3200a 	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
30002c5c:	e59f3088 	ldr	r3, [pc, #136]	; 30002cec <OS_EventTaskWait+0x130>
30002c60:	e5933000 	ldr	r3, [r3]
30002c64:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30002c68:	e54b3005 	strb	r3, [fp, #-5]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
30002c6c:	e55b3005 	ldrb	r3, [fp, #-5]
30002c70:	e55b2005 	ldrb	r2, [fp, #-5]
30002c74:	e59f1074 	ldr	r1, [pc, #116]	; 30002cf0 <OS_EventTaskWait+0x134>
30002c78:	e7d11002 	ldrb	r1, [r1, r2]
30002c7c:	e59f2068 	ldr	r2, [pc, #104]	; 30002cec <OS_EventTaskWait+0x130>
30002c80:	e5922000 	ldr	r2, [r2]
30002c84:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
30002c88:	e1e02002 	mvn	r2, r2
30002c8c:	e20220ff 	and	r2, r2, #255	; 0xff
30002c90:	e0012002 	and	r2, r1, r2
30002c94:	e20210ff 	and	r1, r2, #255	; 0xff
30002c98:	e59f2050 	ldr	r2, [pc, #80]	; 30002cf0 <OS_EventTaskWait+0x134>
30002c9c:	e7c21003 	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
30002ca0:	e55b3005 	ldrb	r3, [fp, #-5]
30002ca4:	e59f2044 	ldr	r2, [pc, #68]	; 30002cf0 <OS_EventTaskWait+0x134>
30002ca8:	e7d23003 	ldrb	r3, [r2, r3]
30002cac:	e3530000 	cmp	r3, #0
30002cb0:	1a00000a 	bne	30002ce0 <OS_EventTaskWait+0x124>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
30002cb4:	e59f3030 	ldr	r3, [pc, #48]	; 30002cec <OS_EventTaskWait+0x130>
30002cb8:	e5933000 	ldr	r3, [r3]
30002cbc:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30002cc0:	e1e03003 	mvn	r3, r3
30002cc4:	e20320ff 	and	r2, r3, #255	; 0xff
30002cc8:	e59f3024 	ldr	r3, [pc, #36]	; 30002cf4 <OS_EventTaskWait+0x138>
30002ccc:	e5d33000 	ldrb	r3, [r3]
30002cd0:	e0023003 	and	r3, r2, r3
30002cd4:	e20320ff 	and	r2, r3, #255	; 0xff
30002cd8:	e59f3014 	ldr	r3, [pc, #20]	; 30002cf4 <OS_EventTaskWait+0x138>
30002cdc:	e5c32000 	strb	r2, [r3]
    }
}
30002ce0:	e28bd000 	add	sp, fp, #0
30002ce4:	e8bd0800 	pop	{fp}
30002ce8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30002cec:	30017be0 	.word	0x30017be0
30002cf0:	300179d0 	.word	0x300179d0
30002cf4:	300179cc 	.word	0x300179cc

30002cf8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
30002cf8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30002cfc:	e28db000 	add	fp, sp, #0
30002d00:	e24dd01c 	sub	sp, sp, #28
30002d04:	e50b0018 	str	r0, [fp, #-24]
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
30002d08:	e59f3164 	ldr	r3, [pc, #356]	; 30002e74 <OS_EventTaskWaitMulti+0x17c>
30002d0c:	e5933000 	ldr	r3, [r3]
30002d10:	e51b2018 	ldr	r2, [fp, #-24]
30002d14:	e5832020 	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
30002d18:	e59f3154 	ldr	r3, [pc, #340]	; 30002e74 <OS_EventTaskWaitMulti+0x17c>
30002d1c:	e5933000 	ldr	r3, [r3]
30002d20:	e3a02000 	mov	r2, #0
30002d24:	e5832024 	str	r2, [r3, #36]	; 0x24

    pevents =  pevents_wait;
30002d28:	e51b3018 	ldr	r3, [fp, #-24]
30002d2c:	e50b3010 	str	r3, [fp, #-16]
    pevent  = *pevents;
30002d30:	e51b3010 	ldr	r3, [fp, #-16]
30002d34:	e5933000 	ldr	r3, [r3]
30002d38:	e50b300c 	str	r3, [fp, #-12]
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
30002d3c:	ea000025 	b	30002dd8 <OS_EventTaskWaitMulti+0xe0>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
30002d40:	e59f312c 	ldr	r3, [pc, #300]	; 30002e74 <OS_EventTaskWaitMulti+0x17c>
30002d44:	e5933000 	ldr	r3, [r3]
30002d48:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30002d4c:	e1a01003 	mov	r1, r3
30002d50:	e59f311c 	ldr	r3, [pc, #284]	; 30002e74 <OS_EventTaskWaitMulti+0x17c>
30002d54:	e5933000 	ldr	r3, [r3]
30002d58:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30002d5c:	e1a02003 	mov	r2, r3
30002d60:	e51b000c 	ldr	r0, [fp, #-12]
30002d64:	e3a03008 	mov	r3, #8
30002d68:	e0802002 	add	r2, r0, r2
30002d6c:	e0823003 	add	r3, r2, r3
30002d70:	e5d32003 	ldrb	r2, [r3, #3]
30002d74:	e59f30f8 	ldr	r3, [pc, #248]	; 30002e74 <OS_EventTaskWaitMulti+0x17c>
30002d78:	e5933000 	ldr	r3, [r3]
30002d7c:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
30002d80:	e1823003 	orr	r3, r2, r3
30002d84:	e20320ff 	and	r2, r3, #255	; 0xff
30002d88:	e51b000c 	ldr	r0, [fp, #-12]
30002d8c:	e3a03008 	mov	r3, #8
30002d90:	e0801001 	add	r1, r0, r1
30002d94:	e0813003 	add	r3, r1, r3
30002d98:	e5c32003 	strb	r2, [r3, #3]
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
30002d9c:	e51b300c 	ldr	r3, [fp, #-12]
30002da0:	e5d3200a 	ldrb	r2, [r3, #10]
30002da4:	e59f30c8 	ldr	r3, [pc, #200]	; 30002e74 <OS_EventTaskWaitMulti+0x17c>
30002da8:	e5933000 	ldr	r3, [r3]
30002dac:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30002db0:	e1823003 	orr	r3, r2, r3
30002db4:	e20320ff 	and	r2, r3, #255	; 0xff
30002db8:	e51b300c 	ldr	r3, [fp, #-12]
30002dbc:	e5c3200a 	strb	r2, [r3, #10]
        pevents++;
30002dc0:	e51b3010 	ldr	r3, [fp, #-16]
30002dc4:	e2833004 	add	r3, r3, #4
30002dc8:	e50b3010 	str	r3, [fp, #-16]
        pevent = *pevents;
30002dcc:	e51b3010 	ldr	r3, [fp, #-16]
30002dd0:	e5933000 	ldr	r3, [r3]
30002dd4:	e50b300c 	str	r3, [fp, #-12]
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
30002dd8:	e51b300c 	ldr	r3, [fp, #-12]
30002ddc:	e3530000 	cmp	r3, #0
30002de0:	1affffd6 	bne	30002d40 <OS_EventTaskWaitMulti+0x48>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
30002de4:	e59f3088 	ldr	r3, [pc, #136]	; 30002e74 <OS_EventTaskWaitMulti+0x17c>
30002de8:	e5933000 	ldr	r3, [r3]
30002dec:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30002df0:	e54b3005 	strb	r3, [fp, #-5]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
30002df4:	e55b3005 	ldrb	r3, [fp, #-5]
30002df8:	e55b2005 	ldrb	r2, [fp, #-5]
30002dfc:	e59f1074 	ldr	r1, [pc, #116]	; 30002e78 <OS_EventTaskWaitMulti+0x180>
30002e00:	e7d11002 	ldrb	r1, [r1, r2]
30002e04:	e59f2068 	ldr	r2, [pc, #104]	; 30002e74 <OS_EventTaskWaitMulti+0x17c>
30002e08:	e5922000 	ldr	r2, [r2]
30002e0c:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
30002e10:	e1e02002 	mvn	r2, r2
30002e14:	e20220ff 	and	r2, r2, #255	; 0xff
30002e18:	e0012002 	and	r2, r1, r2
30002e1c:	e20210ff 	and	r1, r2, #255	; 0xff
30002e20:	e59f2050 	ldr	r2, [pc, #80]	; 30002e78 <OS_EventTaskWaitMulti+0x180>
30002e24:	e7c21003 	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
30002e28:	e55b3005 	ldrb	r3, [fp, #-5]
30002e2c:	e59f2044 	ldr	r2, [pc, #68]	; 30002e78 <OS_EventTaskWaitMulti+0x180>
30002e30:	e7d23003 	ldrb	r3, [r2, r3]
30002e34:	e3530000 	cmp	r3, #0
30002e38:	1a00000a 	bne	30002e68 <OS_EventTaskWaitMulti+0x170>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
30002e3c:	e59f3030 	ldr	r3, [pc, #48]	; 30002e74 <OS_EventTaskWaitMulti+0x17c>
30002e40:	e5933000 	ldr	r3, [r3]
30002e44:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30002e48:	e1e03003 	mvn	r3, r3
30002e4c:	e20320ff 	and	r2, r3, #255	; 0xff
30002e50:	e59f3024 	ldr	r3, [pc, #36]	; 30002e7c <OS_EventTaskWaitMulti+0x184>
30002e54:	e5d33000 	ldrb	r3, [r3]
30002e58:	e0023003 	and	r3, r2, r3
30002e5c:	e20320ff 	and	r2, r3, #255	; 0xff
30002e60:	e59f3014 	ldr	r3, [pc, #20]	; 30002e7c <OS_EventTaskWaitMulti+0x184>
30002e64:	e5c32000 	strb	r2, [r3]
    }
}
30002e68:	e28bd000 	add	sp, fp, #0
30002e6c:	e8bd0800 	pop	{fp}
30002e70:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30002e74:	30017be0 	.word	0x30017be0
30002e78:	300179d0 	.word	0x300179d0
30002e7c:	300179cc 	.word	0x300179cc

30002e80 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
30002e80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30002e84:	e28db000 	add	fp, sp, #0
30002e88:	e24dd014 	sub	sp, sp, #20
30002e8c:	e50b0010 	str	r0, [fp, #-16]
30002e90:	e50b1014 	str	r1, [fp, #-20]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
30002e94:	e51b3010 	ldr	r3, [fp, #-16]
30002e98:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30002e9c:	e54b3005 	strb	r3, [fp, #-5]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
30002ea0:	e55b1005 	ldrb	r1, [fp, #-5]
30002ea4:	e55b2005 	ldrb	r2, [fp, #-5]
30002ea8:	e51b0014 	ldr	r0, [fp, #-20]
30002eac:	e3a03008 	mov	r3, #8
30002eb0:	e0802002 	add	r2, r0, r2
30002eb4:	e0823003 	add	r3, r2, r3
30002eb8:	e5d32003 	ldrb	r2, [r3, #3]
30002ebc:	e51b3010 	ldr	r3, [fp, #-16]
30002ec0:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
30002ec4:	e1e03003 	mvn	r3, r3
30002ec8:	e20330ff 	and	r3, r3, #255	; 0xff
30002ecc:	e0023003 	and	r3, r2, r3
30002ed0:	e20320ff 	and	r2, r3, #255	; 0xff
30002ed4:	e51b0014 	ldr	r0, [fp, #-20]
30002ed8:	e3a03008 	mov	r3, #8
30002edc:	e0801001 	add	r1, r0, r1
30002ee0:	e0813003 	add	r3, r1, r3
30002ee4:	e5c32003 	strb	r2, [r3, #3]
    if (pevent->OSEventTbl[y] == 0u) {
30002ee8:	e55b2005 	ldrb	r2, [fp, #-5]
30002eec:	e51b1014 	ldr	r1, [fp, #-20]
30002ef0:	e3a03008 	mov	r3, #8
30002ef4:	e0812002 	add	r2, r1, r2
30002ef8:	e0823003 	add	r3, r2, r3
30002efc:	e5d33003 	ldrb	r3, [r3, #3]
30002f00:	e3530000 	cmp	r3, #0
30002f04:	1a000009 	bne	30002f30 <OS_EventTaskRemove+0xb0>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
30002f08:	e51b3014 	ldr	r3, [fp, #-20]
30002f0c:	e5d3200a 	ldrb	r2, [r3, #10]
30002f10:	e51b3010 	ldr	r3, [fp, #-16]
30002f14:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30002f18:	e1e03003 	mvn	r3, r3
30002f1c:	e20330ff 	and	r3, r3, #255	; 0xff
30002f20:	e0023003 	and	r3, r2, r3
30002f24:	e20320ff 	and	r2, r3, #255	; 0xff
30002f28:	e51b3014 	ldr	r3, [fp, #-20]
30002f2c:	e5c3200a 	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
30002f30:	e51b3010 	ldr	r3, [fp, #-16]
30002f34:	e3a02000 	mov	r2, #0
30002f38:	e583201c 	str	r2, [r3, #28]
}
30002f3c:	e28bd000 	add	sp, fp, #0
30002f40:	e8bd0800 	pop	{fp}
30002f44:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30002f48 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
30002f48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30002f4c:	e28db000 	add	fp, sp, #0
30002f50:	e24dd01c 	sub	sp, sp, #28
30002f54:	e50b0018 	str	r0, [fp, #-24]
30002f58:	e50b101c 	str	r1, [fp, #-28]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
30002f5c:	e51b3018 	ldr	r3, [fp, #-24]
30002f60:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30002f64:	e54b3007 	strb	r3, [fp, #-7]
    bity    =  ptcb->OSTCBBitY;
30002f68:	e51b3018 	ldr	r3, [fp, #-24]
30002f6c:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30002f70:	e54b3006 	strb	r3, [fp, #-6]
    bitx    =  ptcb->OSTCBBitX;
30002f74:	e51b3018 	ldr	r3, [fp, #-24]
30002f78:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
30002f7c:	e54b3005 	strb	r3, [fp, #-5]
    pevents =  pevents_multi;
30002f80:	e51b301c 	ldr	r3, [fp, #-28]
30002f84:	e50b3010 	str	r3, [fp, #-16]
    pevent  = *pevents;
30002f88:	e51b3010 	ldr	r3, [fp, #-16]
30002f8c:	e5933000 	ldr	r3, [r3]
30002f90:	e50b300c 	str	r3, [fp, #-12]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
30002f94:	ea000027 	b	30003038 <OS_EventTaskRemoveMulti+0xf0>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
30002f98:	e55b1007 	ldrb	r1, [fp, #-7]
30002f9c:	e55b2007 	ldrb	r2, [fp, #-7]
30002fa0:	e51b000c 	ldr	r0, [fp, #-12]
30002fa4:	e3a03008 	mov	r3, #8
30002fa8:	e0802002 	add	r2, r0, r2
30002fac:	e0823003 	add	r3, r2, r3
30002fb0:	e5d32003 	ldrb	r2, [r3, #3]
30002fb4:	e55b3005 	ldrb	r3, [fp, #-5]
30002fb8:	e1e03003 	mvn	r3, r3
30002fbc:	e20330ff 	and	r3, r3, #255	; 0xff
30002fc0:	e0023003 	and	r3, r2, r3
30002fc4:	e20320ff 	and	r2, r3, #255	; 0xff
30002fc8:	e51b000c 	ldr	r0, [fp, #-12]
30002fcc:	e3a03008 	mov	r3, #8
30002fd0:	e0801001 	add	r1, r0, r1
30002fd4:	e0813003 	add	r3, r1, r3
30002fd8:	e5c32003 	strb	r2, [r3, #3]
        if (pevent->OSEventTbl[y] == 0u) {
30002fdc:	e55b2007 	ldrb	r2, [fp, #-7]
30002fe0:	e51b100c 	ldr	r1, [fp, #-12]
30002fe4:	e3a03008 	mov	r3, #8
30002fe8:	e0812002 	add	r2, r1, r2
30002fec:	e0823003 	add	r3, r2, r3
30002ff0:	e5d33003 	ldrb	r3, [r3, #3]
30002ff4:	e3530000 	cmp	r3, #0
30002ff8:	1a000008 	bne	30003020 <OS_EventTaskRemoveMulti+0xd8>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
30002ffc:	e51b300c 	ldr	r3, [fp, #-12]
30003000:	e5d3200a 	ldrb	r2, [r3, #10]
30003004:	e55b3006 	ldrb	r3, [fp, #-6]
30003008:	e1e03003 	mvn	r3, r3
3000300c:	e20330ff 	and	r3, r3, #255	; 0xff
30003010:	e0023003 	and	r3, r2, r3
30003014:	e20320ff 	and	r2, r3, #255	; 0xff
30003018:	e51b300c 	ldr	r3, [fp, #-12]
3000301c:	e5c3200a 	strb	r2, [r3, #10]
        }
        pevents++;
30003020:	e51b3010 	ldr	r3, [fp, #-16]
30003024:	e2833004 	add	r3, r3, #4
30003028:	e50b3010 	str	r3, [fp, #-16]
        pevent = *pevents;
3000302c:	e51b3010 	ldr	r3, [fp, #-16]
30003030:	e5933000 	ldr	r3, [r3]
30003034:	e50b300c 	str	r3, [fp, #-12]
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
30003038:	e51b300c 	ldr	r3, [fp, #-12]
3000303c:	e3530000 	cmp	r3, #0
30003040:	1affffd4 	bne	30002f98 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
30003044:	e28bd000 	add	sp, fp, #0
30003048:	e8bd0800 	pop	{fp}
3000304c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30003050 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
30003050:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30003054:	e28db000 	add	fp, sp, #0
30003058:	e24dd014 	sub	sp, sp, #20
3000305c:	e50b0010 	str	r0, [fp, #-16]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
30003060:	e51b3010 	ldr	r3, [fp, #-16]
30003064:	e3a02000 	mov	r2, #0
30003068:	e5c3200a 	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
3000306c:	e3a03000 	mov	r3, #0
30003070:	e54b3005 	strb	r3, [fp, #-5]
30003074:	ea000009 	b	300030a0 <OS_EventWaitListInit+0x50>
        pevent->OSEventTbl[i] = 0u;
30003078:	e55b2005 	ldrb	r2, [fp, #-5]
3000307c:	e51b1010 	ldr	r1, [fp, #-16]
30003080:	e3a03008 	mov	r3, #8
30003084:	e0812002 	add	r2, r1, r2
30003088:	e0823003 	add	r3, r2, r3
3000308c:	e3a02000 	mov	r2, #0
30003090:	e5c32003 	strb	r2, [r3, #3]
{
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
30003094:	e55b3005 	ldrb	r3, [fp, #-5]
30003098:	e2833001 	add	r3, r3, #1
3000309c:	e54b3005 	strb	r3, [fp, #-5]
300030a0:	e55b3005 	ldrb	r3, [fp, #-5]
300030a4:	e3530007 	cmp	r3, #7
300030a8:	9afffff2 	bls	30003078 <OS_EventWaitListInit+0x28>
        pevent->OSEventTbl[i] = 0u;
    }
}
300030ac:	e28bd000 	add	sp, fp, #0
300030b0:	e8bd0800 	pop	{fp}
300030b4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300030b8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
300030b8:	e92d4800 	push	{fp, lr}
300030bc:	e28db004 	add	fp, sp, #4
300030c0:	e24dd010 	sub	sp, sp, #16
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
300030c4:	e59f3104 	ldr	r3, [pc, #260]	; 300031d0 <OS_InitEventList+0x118>
300030c8:	e1a00003 	mov	r0, r3
300030cc:	e3a010f0 	mov	r1, #240	; 0xf0
300030d0:	eb00012b 	bl	30003584 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
300030d4:	e3a03000 	mov	r3, #0
300030d8:	e14b31b0 	strh	r3, [fp, #-16]
300030dc:	ea000020 	b	30003164 <OS_InitEventList+0xac>
        ix_next = ix + 1u;
300030e0:	e15b31b0 	ldrh	r3, [fp, #-16]
300030e4:	e2833001 	add	r3, r3, #1
300030e8:	e14b30be 	strh	r3, [fp, #-14]
        pevent1 = &OSEventTbl[ix];
300030ec:	e15b21b0 	ldrh	r2, [fp, #-16]
300030f0:	e1a03002 	mov	r3, r2
300030f4:	e1a03083 	lsl	r3, r3, #1
300030f8:	e0833002 	add	r3, r3, r2
300030fc:	e1a03183 	lsl	r3, r3, #3
30003100:	e1a02003 	mov	r2, r3
30003104:	e59f30c4 	ldr	r3, [pc, #196]	; 300031d0 <OS_InitEventList+0x118>
30003108:	e0823003 	add	r3, r2, r3
3000310c:	e50b300c 	str	r3, [fp, #-12]
        pevent2 = &OSEventTbl[ix_next];
30003110:	e15b20be 	ldrh	r2, [fp, #-14]
30003114:	e1a03002 	mov	r3, r2
30003118:	e1a03083 	lsl	r3, r3, #1
3000311c:	e0833002 	add	r3, r3, r2
30003120:	e1a03183 	lsl	r3, r3, #3
30003124:	e1a02003 	mov	r2, r3
30003128:	e59f30a0 	ldr	r3, [pc, #160]	; 300031d0 <OS_InitEventList+0x118>
3000312c:	e0823003 	add	r3, r2, r3
30003130:	e50b3008 	str	r3, [fp, #-8]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
30003134:	e51b300c 	ldr	r3, [fp, #-12]
30003138:	e3a02000 	mov	r2, #0
3000313c:	e5c32000 	strb	r2, [r3]
        pevent1->OSEventPtr     = pevent2;
30003140:	e51b300c 	ldr	r3, [fp, #-12]
30003144:	e51b2008 	ldr	r2, [fp, #-8]
30003148:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
3000314c:	e51b300c 	ldr	r3, [fp, #-12]
30003150:	e59f207c 	ldr	r2, [pc, #124]	; 300031d4 <OS_InitEventList+0x11c>
30003154:	e5832014 	str	r2, [r3, #20]
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
30003158:	e15b31b0 	ldrh	r3, [fp, #-16]
3000315c:	e2833001 	add	r3, r3, #1
30003160:	e14b31b0 	strh	r3, [fp, #-16]
30003164:	e15b31b0 	ldrh	r3, [fp, #-16]
30003168:	e3530008 	cmp	r3, #8
3000316c:	9affffdb 	bls	300030e0 <OS_InitEventList+0x28>
        pevent1->OSEventPtr     = pevent2;
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
#endif
    }
    pevent1                         = &OSEventTbl[ix];
30003170:	e15b21b0 	ldrh	r2, [fp, #-16]
30003174:	e1a03002 	mov	r3, r2
30003178:	e1a03083 	lsl	r3, r3, #1
3000317c:	e0833002 	add	r3, r3, r2
30003180:	e1a03183 	lsl	r3, r3, #3
30003184:	e1a02003 	mov	r2, r3
30003188:	e59f3040 	ldr	r3, [pc, #64]	; 300031d0 <OS_InitEventList+0x118>
3000318c:	e0823003 	add	r3, r2, r3
30003190:	e50b300c 	str	r3, [fp, #-12]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
30003194:	e51b300c 	ldr	r3, [fp, #-12]
30003198:	e3a02000 	mov	r2, #0
3000319c:	e5c32000 	strb	r2, [r3]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
300031a0:	e51b300c 	ldr	r3, [fp, #-12]
300031a4:	e3a02000 	mov	r2, #0
300031a8:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
300031ac:	e51b300c 	ldr	r3, [fp, #-12]
300031b0:	e59f201c 	ldr	r2, [pc, #28]	; 300031d4 <OS_InitEventList+0x11c>
300031b4:	e5832014 	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
300031b8:	e59f3018 	ldr	r3, [pc, #24]	; 300031d8 <OS_InitEventList+0x120>
300031bc:	e59f200c 	ldr	r2, [pc, #12]	; 300031d0 <OS_InitEventList+0x118>
300031c0:	e5832000 	str	r2, [r3]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
300031c4:	e24bd004 	sub	sp, fp, #4
300031c8:	e8bd4800 	pop	{fp, lr}
300031cc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300031d0:	30017df0 	.word	0x30017df0
300031d4:	3000c278 	.word	0x3000c278
300031d8:	30017bd8 	.word	0x30017bd8

300031dc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
300031dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300031e0:	e28db000 	add	fp, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
300031e4:	e59f3088 	ldr	r3, [pc, #136]	; 30003274 <OS_InitMisc+0x98>
300031e8:	e3a02000 	mov	r2, #0
300031ec:	e5832000 	str	r2, [r3]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
300031f0:	e59f3080 	ldr	r3, [pc, #128]	; 30003278 <OS_InitMisc+0x9c>
300031f4:	e3a02000 	mov	r2, #0
300031f8:	e5c32000 	strb	r2, [r3]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
300031fc:	e59f3078 	ldr	r3, [pc, #120]	; 3000327c <OS_InitMisc+0xa0>
30003200:	e3a02000 	mov	r2, #0
30003204:	e5c32000 	strb	r2, [r3]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
30003208:	e59f3070 	ldr	r3, [pc, #112]	; 30003280 <OS_InitMisc+0xa4>
3000320c:	e3a02000 	mov	r2, #0
30003210:	e5c32000 	strb	r2, [r3]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
30003214:	e59f3068 	ldr	r3, [pc, #104]	; 30003284 <OS_InitMisc+0xa8>
30003218:	e3a02000 	mov	r2, #0
3000321c:	e5c32000 	strb	r2, [r3]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
30003220:	e59f3060 	ldr	r3, [pc, #96]	; 30003288 <OS_InitMisc+0xac>
30003224:	e3a02000 	mov	r2, #0
30003228:	e5832000 	str	r2, [r3]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
3000322c:	e59f3058 	ldr	r3, [pc, #88]	; 3000328c <OS_InitMisc+0xb0>
30003230:	e3a02000 	mov	r2, #0
30003234:	e5832000 	str	r2, [r3]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
30003238:	e59f3050 	ldr	r3, [pc, #80]	; 30003290 <OS_InitMisc+0xb4>
3000323c:	e3a02000 	mov	r2, #0
30003240:	e5832000 	str	r2, [r3]
    OSIdleCtrMax              = 0uL;
30003244:	e59f3048 	ldr	r3, [pc, #72]	; 30003294 <OS_InitMisc+0xb8>
30003248:	e3a02000 	mov	r2, #0
3000324c:	e5832000 	str	r2, [r3]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
30003250:	e59f3040 	ldr	r3, [pc, #64]	; 30003298 <OS_InitMisc+0xbc>
30003254:	e3a02000 	mov	r2, #0
30003258:	e5c32000 	strb	r2, [r3]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
3000325c:	e59f3038 	ldr	r3, [pc, #56]	; 3000329c <OS_InitMisc+0xc0>
30003260:	e3a02000 	mov	r2, #0
30003264:	e5c32000 	strb	r2, [r3]
#endif
}
30003268:	e28bd000 	add	sp, fp, #0
3000326c:	e8bd0800 	pop	{fp}
30003270:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30003274:	30017be8 	.word	0x30017be8
30003278:	30017bdc 	.word	0x30017bdc
3000327c:	300173e8 	.word	0x300173e8
30003280:	3001795d 	.word	0x3001795d
30003284:	300173f1 	.word	0x300173f1
30003288:	3001794c 	.word	0x3001794c
3000328c:	300173f4 	.word	0x300173f4
30003290:	300187d0 	.word	0x300187d0
30003294:	30017954 	.word	0x30017954
30003298:	300186cc 	.word	0x300186cc
3000329c:	300173f0 	.word	0x300173f0

300032a0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
300032a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300032a4:	e28db000 	add	fp, sp, #0
300032a8:	e24dd00c 	sub	sp, sp, #12
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
300032ac:	e59f3074 	ldr	r3, [pc, #116]	; 30003328 <OS_InitRdyList+0x88>
300032b0:	e3a02000 	mov	r2, #0
300032b4:	e5c32000 	strb	r2, [r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
300032b8:	e3a03000 	mov	r3, #0
300032bc:	e54b3005 	strb	r3, [fp, #-5]
300032c0:	ea000006 	b	300032e0 <OS_InitRdyList+0x40>
        OSRdyTbl[i] = 0u;
300032c4:	e55b3005 	ldrb	r3, [fp, #-5]
300032c8:	e59f205c 	ldr	r2, [pc, #92]	; 3000332c <OS_InitRdyList+0x8c>
300032cc:	e3a01000 	mov	r1, #0
300032d0:	e7c21003 	strb	r1, [r2, r3]
{
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
300032d4:	e55b3005 	ldrb	r3, [fp, #-5]
300032d8:	e2833001 	add	r3, r3, #1
300032dc:	e54b3005 	strb	r3, [fp, #-5]
300032e0:	e55b3005 	ldrb	r3, [fp, #-5]
300032e4:	e3530007 	cmp	r3, #7
300032e8:	9afffff5 	bls	300032c4 <OS_InitRdyList+0x24>
        OSRdyTbl[i] = 0u;
    }

    OSPrioCur     = 0u;
300032ec:	e59f303c 	ldr	r3, [pc, #60]	; 30003330 <OS_InitRdyList+0x90>
300032f0:	e3a02000 	mov	r2, #0
300032f4:	e5c32000 	strb	r2, [r3]
    OSPrioHighRdy = 0u;
300032f8:	e59f3034 	ldr	r3, [pc, #52]	; 30003334 <OS_InitRdyList+0x94>
300032fc:	e3a02000 	mov	r2, #0
30003300:	e5c32000 	strb	r2, [r3]

    OSTCBHighRdy  = (OS_TCB *)0;
30003304:	e59f302c 	ldr	r3, [pc, #44]	; 30003338 <OS_InitRdyList+0x98>
30003308:	e3a02000 	mov	r2, #0
3000330c:	e5832000 	str	r2, [r3]
    OSTCBCur      = (OS_TCB *)0;
30003310:	e59f3024 	ldr	r3, [pc, #36]	; 3000333c <OS_InitRdyList+0x9c>
30003314:	e3a02000 	mov	r2, #0
30003318:	e5832000 	str	r2, [r3]
}
3000331c:	e28bd000 	add	sp, fp, #0
30003320:	e8bd0800 	pop	{fp}
30003324:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30003328:	300179cc 	.word	0x300179cc
3000332c:	300179d0 	.word	0x300179d0
30003330:	300176cc 	.word	0x300176cc
30003334:	300173fa 	.word	0x300173fa
30003338:	300179c4 	.word	0x300179c4
3000333c:	30017be0 	.word	0x30017be0

30003340 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
30003340:	e92d4800 	push	{fp, lr}
30003344:	e28db004 	add	fp, sp, #4
30003348:	e24dd020 	sub	sp, sp, #32
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
3000334c:	e59f3054 	ldr	r3, [pc, #84]	; 300033a8 <OS_InitTaskIdle+0x68>
30003350:	e58d3000 	str	r3, [sp]
30003354:	e59f3050 	ldr	r3, [pc, #80]	; 300033ac <OS_InitTaskIdle+0x6c>
30003358:	e58d3004 	str	r3, [sp, #4]
3000335c:	e3a03080 	mov	r3, #128	; 0x80
30003360:	e58d3008 	str	r3, [sp, #8]
30003364:	e3a03000 	mov	r3, #0
30003368:	e58d300c 	str	r3, [sp, #12]
3000336c:	e3a03003 	mov	r3, #3
30003370:	e58d3010 	str	r3, [sp, #16]
30003374:	e59f0034 	ldr	r0, [pc, #52]	; 300033b0 <OS_InitTaskIdle+0x70>
30003378:	e3a01000 	mov	r1, #0
3000337c:	e59f2030 	ldr	r2, [pc, #48]	; 300033b4 <OS_InitTaskIdle+0x74>
30003380:	e3a0303f 	mov	r3, #63	; 0x3f
30003384:	eb0018fa 	bl	30009774 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
30003388:	e24b3005 	sub	r3, fp, #5
3000338c:	e3a0003f 	mov	r0, #63	; 0x3f
30003390:	e59f1020 	ldr	r1, [pc, #32]	; 300033b8 <OS_InitTaskIdle+0x78>
30003394:	e1a02003 	mov	r2, r3
30003398:	eb001ac9 	bl	30009ec4 <OSTaskNameSet>
#endif
}
3000339c:	e24bd004 	sub	sp, fp, #4
300033a0:	e8bd4800 	pop	{fp, lr}
300033a4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300033a8:	0000ffff 	.word	0x0000ffff
300033ac:	30017bf0 	.word	0x30017bf0
300033b0:	300037f4 	.word	0x300037f4
300033b4:	30017dec 	.word	0x30017dec
300033b8:	3000c27c 	.word	0x3000c27c

300033bc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
300033bc:	e92d4800 	push	{fp, lr}
300033c0:	e28db004 	add	fp, sp, #4
300033c4:	e24dd020 	sub	sp, sp, #32
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
300033c8:	e59f3054 	ldr	r3, [pc, #84]	; 30003424 <OS_InitTaskStat+0x68>
300033cc:	e58d3000 	str	r3, [sp]
300033d0:	e59f3050 	ldr	r3, [pc, #80]	; 30003428 <OS_InitTaskStat+0x6c>
300033d4:	e58d3004 	str	r3, [sp, #4]
300033d8:	e3a03080 	mov	r3, #128	; 0x80
300033dc:	e58d3008 	str	r3, [sp, #8]
300033e0:	e3a03000 	mov	r3, #0
300033e4:	e58d300c 	str	r3, [sp, #12]
300033e8:	e3a03003 	mov	r3, #3
300033ec:	e58d3010 	str	r3, [sp, #16]
300033f0:	e59f0034 	ldr	r0, [pc, #52]	; 3000342c <OS_InitTaskStat+0x70>
300033f4:	e3a01000 	mov	r1, #0
300033f8:	e59f2030 	ldr	r2, [pc, #48]	; 30003430 <OS_InitTaskStat+0x74>
300033fc:	e3a0303e 	mov	r3, #62	; 0x3e
30003400:	eb0018db 	bl	30009774 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
30003404:	e24b3005 	sub	r3, fp, #5
30003408:	e3a0003e 	mov	r0, #62	; 0x3e
3000340c:	e59f1020 	ldr	r1, [pc, #32]	; 30003434 <OS_InitTaskStat+0x78>
30003410:	e1a02003 	mov	r2, r3
30003414:	eb001aaa 	bl	30009ec4 <OSTaskNameSet>
#endif
}
30003418:	e24bd004 	sub	sp, fp, #4
3000341c:	e8bd4800 	pop	{fp, lr}
30003420:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30003424:	0000fffe 	.word	0x0000fffe
30003428:	3001774c 	.word	0x3001774c
3000342c:	30003840 	.word	0x30003840
30003430:	30017948 	.word	0x30017948
30003434:	3000c28c 	.word	0x3000c28c

30003438 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
30003438:	e92d4800 	push	{fp, lr}
3000343c:	e28db004 	add	fp, sp, #4
30003440:	e24dd010 	sub	sp, sp, #16
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
30003444:	e59f3120 	ldr	r3, [pc, #288]	; 3000356c <OS_InitTCBList+0x134>
30003448:	e1a00003 	mov	r0, r3
3000344c:	e59f111c 	ldr	r1, [pc, #284]	; 30003570 <OS_InitTCBList+0x138>
30003450:	eb00004b 	bl	30003584 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
30003454:	e59f3118 	ldr	r3, [pc, #280]	; 30003574 <OS_InitTCBList+0x13c>
30003458:	e1a00003 	mov	r0, r3
3000345c:	e3a01c01 	mov	r1, #256	; 0x100
30003460:	eb000047 	bl	30003584 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
30003464:	e3a03000 	mov	r3, #0
30003468:	e54b300e 	strb	r3, [fp, #-14]
3000346c:	ea000021 	b	300034f8 <OS_InitTCBList+0xc0>
        ix_next =  ix + 1u;
30003470:	e55b300e 	ldrb	r3, [fp, #-14]
30003474:	e2833001 	add	r3, r3, #1
30003478:	e54b300d 	strb	r3, [fp, #-13]
        ptcb1   = &OSTCBTbl[ix];
3000347c:	e55b200e 	ldrb	r2, [fp, #-14]
30003480:	e1a03002 	mov	r3, r2
30003484:	e1a03083 	lsl	r3, r3, #1
30003488:	e0833002 	add	r3, r3, r2
3000348c:	e1a03183 	lsl	r3, r3, #3
30003490:	e0623003 	rsb	r3, r2, r3
30003494:	e1a03103 	lsl	r3, r3, #2
30003498:	e1a02003 	mov	r2, r3
3000349c:	e59f30c8 	ldr	r3, [pc, #200]	; 3000356c <OS_InitTCBList+0x134>
300034a0:	e0823003 	add	r3, r2, r3
300034a4:	e50b300c 	str	r3, [fp, #-12]
        ptcb2   = &OSTCBTbl[ix_next];
300034a8:	e55b200d 	ldrb	r2, [fp, #-13]
300034ac:	e1a03002 	mov	r3, r2
300034b0:	e1a03083 	lsl	r3, r3, #1
300034b4:	e0833002 	add	r3, r3, r2
300034b8:	e1a03183 	lsl	r3, r3, #3
300034bc:	e0623003 	rsb	r3, r2, r3
300034c0:	e1a03103 	lsl	r3, r3, #2
300034c4:	e1a02003 	mov	r2, r3
300034c8:	e59f309c 	ldr	r3, [pc, #156]	; 3000356c <OS_InitTCBList+0x134>
300034cc:	e0823003 	add	r3, r2, r3
300034d0:	e50b3008 	str	r3, [fp, #-8]
        ptcb1->OSTCBNext = ptcb2;
300034d4:	e51b300c 	ldr	r3, [fp, #-12]
300034d8:	e51b2008 	ldr	r2, [fp, #-8]
300034dc:	e5832014 	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
300034e0:	e51b300c 	ldr	r3, [fp, #-12]
300034e4:	e59f208c 	ldr	r2, [pc, #140]	; 30003578 <OS_InitTCBList+0x140>
300034e8:	e5832054 	str	r2, [r3, #84]	; 0x54
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
300034ec:	e55b300e 	ldrb	r3, [fp, #-14]
300034f0:	e2833001 	add	r3, r3, #1
300034f4:	e54b300e 	strb	r3, [fp, #-14]
300034f8:	e55b300e 	ldrb	r3, [fp, #-14]
300034fc:	e3530014 	cmp	r3, #20
30003500:	9affffda 	bls	30003470 <OS_InitTCBList+0x38>
        ptcb1->OSTCBNext = ptcb2;
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
30003504:	e55b200e 	ldrb	r2, [fp, #-14]
30003508:	e1a03002 	mov	r3, r2
3000350c:	e1a03083 	lsl	r3, r3, #1
30003510:	e0833002 	add	r3, r3, r2
30003514:	e1a03183 	lsl	r3, r3, #3
30003518:	e0623003 	rsb	r3, r2, r3
3000351c:	e1a03103 	lsl	r3, r3, #2
30003520:	e1a02003 	mov	r2, r3
30003524:	e59f3040 	ldr	r3, [pc, #64]	; 3000356c <OS_InitTCBList+0x134>
30003528:	e0823003 	add	r3, r2, r3
3000352c:	e50b300c 	str	r3, [fp, #-12]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
30003530:	e51b300c 	ldr	r3, [fp, #-12]
30003534:	e3a02000 	mov	r2, #0
30003538:	e5832014 	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
3000353c:	e51b300c 	ldr	r3, [fp, #-12]
30003540:	e59f2030 	ldr	r2, [pc, #48]	; 30003578 <OS_InitTCBList+0x140>
30003544:	e5832054 	str	r2, [r3, #84]	; 0x54
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
30003548:	e59f302c 	ldr	r3, [pc, #44]	; 3000357c <OS_InitTCBList+0x144>
3000354c:	e3a02000 	mov	r2, #0
30003550:	e5832000 	str	r2, [r3]
    OSTCBFreeList           = &OSTCBTbl[0];
30003554:	e59f3024 	ldr	r3, [pc, #36]	; 30003580 <OS_InitTCBList+0x148>
30003558:	e59f200c 	ldr	r2, [pc, #12]	; 3000356c <OS_InitTCBList+0x134>
3000355c:	e5832000 	str	r2, [r3]
}
30003560:	e24bd004 	sub	sp, fp, #4
30003564:	e8bd4800 	pop	{fp, lr}
30003568:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000356c:	30017ee0 	.word	0x30017ee0
30003570:	000007e8 	.word	0x000007e8
30003574:	300186d0 	.word	0x300186d0
30003578:	3000c278 	.word	0x3000c278
3000357c:	300176d0 	.word	0x300176d0
30003580:	30017958 	.word	0x30017958

30003584 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
30003584:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30003588:	e28db000 	add	fp, sp, #0
3000358c:	e24dd00c 	sub	sp, sp, #12
30003590:	e50b0008 	str	r0, [fp, #-8]
30003594:	e1a03001 	mov	r3, r1
30003598:	e14b30ba 	strh	r3, [fp, #-10]
    while (size > 0u) {
3000359c:	ea000008 	b	300035c4 <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
300035a0:	e51b3008 	ldr	r3, [fp, #-8]
300035a4:	e3a02000 	mov	r2, #0
300035a8:	e5c32000 	strb	r2, [r3]
300035ac:	e51b3008 	ldr	r3, [fp, #-8]
300035b0:	e2833001 	add	r3, r3, #1
300035b4:	e50b3008 	str	r3, [fp, #-8]
        size--;
300035b8:	e15b30ba 	ldrh	r3, [fp, #-10]
300035bc:	e2433001 	sub	r3, r3, #1
300035c0:	e14b30ba 	strh	r3, [fp, #-10]
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
    while (size > 0u) {
300035c4:	e15b30ba 	ldrh	r3, [fp, #-10]
300035c8:	e3530000 	cmp	r3, #0
300035cc:	1afffff3 	bne	300035a0 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
300035d0:	e28bd000 	add	sp, fp, #0
300035d4:	e8bd0800 	pop	{fp}
300035d8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300035dc <OS_MemCopy>:
*/

void  OS_MemCopy (INT8U  *pdest,
                  INT8U  *psrc,
                  INT16U  size)
{
300035dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
300035e0:	e28db000 	add	fp, sp, #0
300035e4:	e24dd014 	sub	sp, sp, #20
300035e8:	e50b0008 	str	r0, [fp, #-8]
300035ec:	e50b100c 	str	r1, [fp, #-12]
300035f0:	e1a03002 	mov	r3, r2
300035f4:	e14b30be 	strh	r3, [fp, #-14]
    while (size > 0u) {
300035f8:	ea00000c 	b	30003630 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
300035fc:	e51b300c 	ldr	r3, [fp, #-12]
30003600:	e5d32000 	ldrb	r2, [r3]
30003604:	e51b3008 	ldr	r3, [fp, #-8]
30003608:	e5c32000 	strb	r2, [r3]
3000360c:	e51b3008 	ldr	r3, [fp, #-8]
30003610:	e2833001 	add	r3, r3, #1
30003614:	e50b3008 	str	r3, [fp, #-8]
30003618:	e51b300c 	ldr	r3, [fp, #-12]
3000361c:	e2833001 	add	r3, r3, #1
30003620:	e50b300c 	str	r3, [fp, #-12]
        size--;
30003624:	e15b30be 	ldrh	r3, [fp, #-14]
30003628:	e2433001 	sub	r3, r3, #1
3000362c:	e14b30be 	strh	r3, [fp, #-14]

void  OS_MemCopy (INT8U  *pdest,
                  INT8U  *psrc,
                  INT16U  size)
{
    while (size > 0u) {
30003630:	e15b30be 	ldrh	r3, [fp, #-14]
30003634:	e3530000 	cmp	r3, #0
30003638:	1affffef 	bne	300035fc <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
3000363c:	e28bd000 	add	sp, fp, #0
30003640:	e8bd0800 	pop	{fp}
30003644:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30003648 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
30003648:	e92d4800 	push	{fp, lr}
3000364c:	e28db004 	add	fp, sp, #4
30003650:	e24dd008 	sub	sp, sp, #8
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
30003654:	e3a03000 	mov	r3, #0
30003658:	e50b3008 	str	r3, [fp, #-8]
#endif



    OS_ENTER_CRITICAL();
3000365c:	ebfff2ad 	bl	30000118 <OS_CPU_SaveSR>
30003660:	e1a03000 	mov	r3, r0
30003664:	e50b3008 	str	r3, [fp, #-8]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
30003668:	e59f3090 	ldr	r3, [pc, #144]	; 30003700 <OS_Sched+0xb8>
3000366c:	e5d33000 	ldrb	r3, [r3]
30003670:	e3530000 	cmp	r3, #0
30003674:	1a00001c 	bne	300036ec <OS_Sched+0xa4>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
30003678:	e59f3084 	ldr	r3, [pc, #132]	; 30003704 <OS_Sched+0xbc>
3000367c:	e5d33000 	ldrb	r3, [r3]
30003680:	e3530000 	cmp	r3, #0
30003684:	1a000018 	bne	300036ec <OS_Sched+0xa4>
            OS_SchedNew();
30003688:	eb000023 	bl	3000371c <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
3000368c:	e59f3074 	ldr	r3, [pc, #116]	; 30003708 <OS_Sched+0xc0>
30003690:	e5d33000 	ldrb	r3, [r3]
30003694:	e1a02003 	mov	r2, r3
30003698:	e59f306c 	ldr	r3, [pc, #108]	; 3000370c <OS_Sched+0xc4>
3000369c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
300036a0:	e59f3068 	ldr	r3, [pc, #104]	; 30003710 <OS_Sched+0xc8>
300036a4:	e5832000 	str	r2, [r3]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
300036a8:	e59f3058 	ldr	r3, [pc, #88]	; 30003708 <OS_Sched+0xc0>
300036ac:	e5d32000 	ldrb	r2, [r3]
300036b0:	e59f305c 	ldr	r3, [pc, #92]	; 30003714 <OS_Sched+0xcc>
300036b4:	e5d33000 	ldrb	r3, [r3]
300036b8:	e1520003 	cmp	r2, r3
300036bc:	0a00000a 	beq	300036ec <OS_Sched+0xa4>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
300036c0:	e59f3048 	ldr	r3, [pc, #72]	; 30003710 <OS_Sched+0xc8>
300036c4:	e5933000 	ldr	r3, [r3]
300036c8:	e5932040 	ldr	r2, [r3, #64]	; 0x40
300036cc:	e2822001 	add	r2, r2, #1
300036d0:	e5832040 	str	r2, [r3, #64]	; 0x40
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
300036d4:	e59f303c 	ldr	r3, [pc, #60]	; 30003718 <OS_Sched+0xd0>
300036d8:	e5933000 	ldr	r3, [r3]
300036dc:	e2832001 	add	r2, r3, #1
300036e0:	e59f3030 	ldr	r3, [pc, #48]	; 30003718 <OS_Sched+0xd0>
300036e4:	e5832000 	str	r2, [r3]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
300036e8:	ebfff294 	bl	30000140 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
300036ec:	e51b0008 	ldr	r0, [fp, #-8]
300036f0:	ebfff290 	bl	30000138 <OS_CPU_RestoreSR>
}
300036f4:	e24bd004 	sub	sp, fp, #4
300036f8:	e8bd4800 	pop	{fp, lr}
300036fc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30003700:	30017bdc 	.word	0x30017bdc
30003704:	300173e8 	.word	0x300173e8
30003708:	300173fa 	.word	0x300173fa
3000370c:	300186d0 	.word	0x300186d0
30003710:	300179c4 	.word	0x300179c4
30003714:	300176cc 	.word	0x300176cc
30003718:	3001794c 	.word	0x3001794c

3000371c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
3000371c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30003720:	e28db000 	add	fp, sp, #0
30003724:	e24dd00c 	sub	sp, sp, #12
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
30003728:	e59f3048 	ldr	r3, [pc, #72]	; 30003778 <OS_SchedNew+0x5c>
3000372c:	e5d33000 	ldrb	r3, [r3]
30003730:	e59f2044 	ldr	r2, [pc, #68]	; 3000377c <OS_SchedNew+0x60>
30003734:	e7d23003 	ldrb	r3, [r2, r3]
30003738:	e54b3005 	strb	r3, [fp, #-5]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
3000373c:	e55b3005 	ldrb	r3, [fp, #-5]
30003740:	e1a03183 	lsl	r3, r3, #3
30003744:	e20320ff 	and	r2, r3, #255	; 0xff
30003748:	e55b3005 	ldrb	r3, [fp, #-5]
3000374c:	e59f102c 	ldr	r1, [pc, #44]	; 30003780 <OS_SchedNew+0x64>
30003750:	e7d13003 	ldrb	r3, [r1, r3]
30003754:	e59f1020 	ldr	r1, [pc, #32]	; 3000377c <OS_SchedNew+0x60>
30003758:	e7d13003 	ldrb	r3, [r1, r3]
3000375c:	e0823003 	add	r3, r2, r3
30003760:	e20320ff 	and	r2, r3, #255	; 0xff
30003764:	e59f3018 	ldr	r3, [pc, #24]	; 30003784 <OS_SchedNew+0x68>
30003768:	e5c32000 	strb	r2, [r3]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
3000376c:	e28bd000 	add	sp, fp, #0
30003770:	e8bd0800 	pop	{fp}
30003774:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30003778:	300179cc 	.word	0x300179cc
3000377c:	3000c178 	.word	0x3000c178
30003780:	300179d0 	.word	0x300179d0
30003784:	300173fa 	.word	0x300173fa

30003788 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_EN > 0u) || (OS_FLAG_NAME_EN > 0u) || (OS_MEM_NAME_EN > 0u) || (OS_TASK_NAME_EN > 0u) || (OS_TMR_CFG_NAME_EN > 0u)
INT8U  OS_StrLen (INT8U *psrc)
{
30003788:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
3000378c:	e28db000 	add	fp, sp, #0
30003790:	e24dd014 	sub	sp, sp, #20
30003794:	e50b0010 	str	r0, [fp, #-16]
    INT8U  len;


#if OS_ARG_CHK_EN > 0u
    if (psrc == (INT8U *)0) {
30003798:	e51b3010 	ldr	r3, [fp, #-16]
3000379c:	e3530000 	cmp	r3, #0
300037a0:	1a000001 	bne	300037ac <OS_StrLen+0x24>
        return (0u);
300037a4:	e3a03000 	mov	r3, #0
300037a8:	ea00000d 	b	300037e4 <OS_StrLen+0x5c>
    }
#endif

    len = 0u;
300037ac:	e3a03000 	mov	r3, #0
300037b0:	e54b3005 	strb	r3, [fp, #-5]
    while (*psrc != OS_ASCII_NUL) {
300037b4:	ea000005 	b	300037d0 <OS_StrLen+0x48>
        psrc++;
300037b8:	e51b3010 	ldr	r3, [fp, #-16]
300037bc:	e2833001 	add	r3, r3, #1
300037c0:	e50b3010 	str	r3, [fp, #-16]
        len++;
300037c4:	e55b3005 	ldrb	r3, [fp, #-5]
300037c8:	e2833001 	add	r3, r3, #1
300037cc:	e54b3005 	strb	r3, [fp, #-5]
        return (0u);
    }
#endif

    len = 0u;
    while (*psrc != OS_ASCII_NUL) {
300037d0:	e51b3010 	ldr	r3, [fp, #-16]
300037d4:	e5d33000 	ldrb	r3, [r3]
300037d8:	e3530000 	cmp	r3, #0
300037dc:	1afffff5 	bne	300037b8 <OS_StrLen+0x30>
        psrc++;
        len++;
    }
    return (len);
300037e0:	e55b3005 	ldrb	r3, [fp, #-5]
}
300037e4:	e1a00003 	mov	r0, r3
300037e8:	e28bd000 	add	sp, fp, #0
300037ec:	e8bd0800 	pop	{fp}
300037f0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300037f4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
300037f4:	e92d4800 	push	{fp, lr}
300037f8:	e28db004 	add	fp, sp, #4
300037fc:	e24dd010 	sub	sp, sp, #16
30003800:	e50b0010 	str	r0, [fp, #-16]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30003804:	e3a03000 	mov	r3, #0
30003808:	e50b3008 	str	r3, [fp, #-8]
#endif

    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
3000380c:	ebfff241 	bl	30000118 <OS_CPU_SaveSR>
30003810:	e1a03000 	mov	r3, r0
30003814:	e50b3008 	str	r3, [fp, #-8]
        OSIdleCtr++;
30003818:	e59f301c 	ldr	r3, [pc, #28]	; 3000383c <OS_TaskIdle+0x48>
3000381c:	e5933000 	ldr	r3, [r3]
30003820:	e2832001 	add	r2, r3, #1
30003824:	e59f3010 	ldr	r3, [pc, #16]	; 3000383c <OS_TaskIdle+0x48>
30003828:	e5832000 	str	r2, [r3]
        OS_EXIT_CRITICAL();
3000382c:	e51b0008 	ldr	r0, [fp, #-8]
30003830:	ebfff240 	bl	30000138 <OS_CPU_RestoreSR>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
30003834:	ebfff89b 	bl	30001aa8 <OSTaskIdleHook>
    }
30003838:	eafffff3 	b	3000380c <OS_TaskIdle+0x18>
3000383c:	300173f4 	.word	0x300173f4

30003840 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
30003840:	e92d4800 	push	{fp, lr}
30003844:	e28db004 	add	fp, sp, #4
30003848:	e24dd010 	sub	sp, sp, #16
3000384c:	e50b0010 	str	r0, [fp, #-16]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30003850:	e3a03000 	mov	r3, #0
30003854:	e50b3008 	str	r3, [fp, #-8]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
30003858:	ea000001 	b	30003864 <OS_TaskStat+0x24>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
3000385c:	e3a00014 	mov	r0, #20
30003860:	eb001c2d 	bl	3000a91c <OSTimeDly>
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
30003864:	e59f315c 	ldr	r3, [pc, #348]	; 300039c8 <OS_TaskStat+0x188>
30003868:	e5d33000 	ldrb	r3, [r3]
3000386c:	e3530000 	cmp	r3, #0
30003870:	0afffff9 	beq	3000385c <OS_TaskStat+0x1c>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100uL;
30003874:	e59f3150 	ldr	r3, [pc, #336]	; 300039cc <OS_TaskStat+0x18c>
30003878:	e5931000 	ldr	r1, [r3]
3000387c:	e59f214c 	ldr	r2, [pc, #332]	; 300039d0 <OS_TaskStat+0x190>
30003880:	e0830192 	umull	r0, r3, r2, r1
30003884:	e1a022a3 	lsr	r2, r3, #5
30003888:	e59f313c 	ldr	r3, [pc, #316]	; 300039cc <OS_TaskStat+0x18c>
3000388c:	e5832000 	str	r2, [r3]
    if (OSIdleCtrMax == 0uL) {
30003890:	e59f3134 	ldr	r3, [pc, #308]	; 300039cc <OS_TaskStat+0x18c>
30003894:	e5933000 	ldr	r3, [r3]
30003898:	e3530000 	cmp	r3, #0
3000389c:	1a000004 	bne	300038b4 <OS_TaskStat+0x74>
        OSCPUUsage = 0u;
300038a0:	e59f312c 	ldr	r3, [pc, #300]	; 300039d4 <OS_TaskStat+0x194>
300038a4:	e3a02000 	mov	r2, #0
300038a8:	e5c32000 	strb	r2, [r3]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
300038ac:	e3a000ff 	mov	r0, #255	; 0xff
300038b0:	eb001a9f 	bl	3000a334 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
300038b4:	ebfff217 	bl	30000118 <OS_CPU_SaveSR>
300038b8:	e1a03000 	mov	r3, r0
300038bc:	e50b3008 	str	r3, [fp, #-8]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
300038c0:	e59f3104 	ldr	r3, [pc, #260]	; 300039cc <OS_TaskStat+0x18c>
300038c4:	e5932000 	ldr	r2, [r3]
300038c8:	e1a03002 	mov	r3, r2
300038cc:	e1a03103 	lsl	r3, r3, #2
300038d0:	e0833002 	add	r3, r3, r2
300038d4:	e1a02103 	lsl	r2, r3, #2
300038d8:	e0833002 	add	r3, r3, r2
300038dc:	e1a03103 	lsl	r3, r3, #2
300038e0:	e1a02003 	mov	r2, r3
300038e4:	e59f30ec 	ldr	r3, [pc, #236]	; 300039d8 <OS_TaskStat+0x198>
300038e8:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
300038ec:	e51b0008 	ldr	r0, [fp, #-8]
300038f0:	ebfff210 	bl	30000138 <OS_CPU_RestoreSR>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
300038f4:	e3a00001 	mov	r0, #1
300038f8:	eb001c07 	bl	3000a91c <OSTimeDly>

        OS_ENTER_CRITICAL();
300038fc:	ebfff205 	bl	30000118 <OS_CPU_SaveSR>
30003900:	e1a03000 	mov	r3, r0
30003904:	e50b3008 	str	r3, [fp, #-8]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
30003908:	e59f30c8 	ldr	r3, [pc, #200]	; 300039d8 <OS_TaskStat+0x198>
3000390c:	e3a02000 	mov	r2, #0
30003910:	e5832000 	str	r2, [r3]
        OS_EXIT_CRITICAL();
30003914:	e51b0008 	ldr	r0, [fp, #-8]
30003918:	ebfff206 	bl	30000138 <OS_CPU_RestoreSR>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
3000391c:	e3a0000a 	mov	r0, #10
30003920:	eb001bfd 	bl	3000a91c <OSTimeDly>

        OS_ENTER_CRITICAL();
30003924:	ebfff1fb 	bl	30000118 <OS_CPU_SaveSR>
30003928:	e1a03000 	mov	r3, r0
3000392c:	e50b3008 	str	r3, [fp, #-8]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
30003930:	e59f30a0 	ldr	r3, [pc, #160]	; 300039d8 <OS_TaskStat+0x198>
30003934:	e5932000 	ldr	r2, [r3]
30003938:	e59f309c 	ldr	r3, [pc, #156]	; 300039dc <OS_TaskStat+0x19c>
3000393c:	e5832000 	str	r2, [r3]
        OS_EXIT_CRITICAL();
30003940:	e51b0008 	ldr	r0, [fp, #-8]
30003944:	ebfff1fb 	bl	30000138 <OS_CPU_RestoreSR>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
30003948:	e59f308c 	ldr	r3, [pc, #140]	; 300039dc <OS_TaskStat+0x19c>
3000394c:	e5932000 	ldr	r2, [r3]
30003950:	e59f3074 	ldr	r3, [pc, #116]	; 300039cc <OS_TaskStat+0x18c>
30003954:	e5933000 	ldr	r3, [r3]
30003958:	e1a00002 	mov	r0, r2
3000395c:	e1a01003 	mov	r1, r3
30003960:	eb002195 	bl	3000bfbc <__aeabi_uidiv>
30003964:	e1a03000 	mov	r3, r0
30003968:	e20330ff 	and	r3, r3, #255	; 0xff
3000396c:	e2633064 	rsb	r3, r3, #100	; 0x64
30003970:	e20330ff 	and	r3, r3, #255	; 0xff
30003974:	e54b3009 	strb	r3, [fp, #-9]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
30003978:	e15b30d9 	ldrsb	r3, [fp, #-9]
3000397c:	e3530000 	cmp	r3, #0
30003980:	ba000003 	blt	30003994 <OS_TaskStat+0x154>
            OSCPUUsage   = (INT8U)usage;
30003984:	e55b2009 	ldrb	r2, [fp, #-9]
30003988:	e59f3044 	ldr	r3, [pc, #68]	; 300039d4 <OS_TaskStat+0x194>
3000398c:	e5c32000 	strb	r2, [r3]
30003990:	ea000009 	b	300039bc <OS_TaskStat+0x17c>
        } else {
            OSCPUUsage   = 0u;
30003994:	e59f3038 	ldr	r3, [pc, #56]	; 300039d4 <OS_TaskStat+0x194>
30003998:	e3a02000 	mov	r2, #0
3000399c:	e5c32000 	strb	r2, [r3]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
300039a0:	e59f3034 	ldr	r3, [pc, #52]	; 300039dc <OS_TaskStat+0x19c>
300039a4:	e5931000 	ldr	r1, [r3]
300039a8:	e59f2020 	ldr	r2, [pc, #32]	; 300039d0 <OS_TaskStat+0x190>
300039ac:	e0830192 	umull	r0, r3, r2, r1
300039b0:	e1a022a3 	lsr	r2, r3, #5
300039b4:	e59f3010 	ldr	r3, [pc, #16]	; 300039cc <OS_TaskStat+0x18c>
300039b8:	e5832000 	str	r2, [r3]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
300039bc:	ebfff83e 	bl	30001abc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
300039c0:	eb000006 	bl	300039e0 <OS_TaskStatStkChk>
#endif
    }
300039c4:	eaffffca 	b	300038f4 <OS_TaskStat+0xb4>
300039c8:	300186cc 	.word	0x300186cc
300039cc:	30017954 	.word	0x30017954
300039d0:	51eb851f 	.word	0x51eb851f
300039d4:	3001795c 	.word	0x3001795c
300039d8:	300173f4 	.word	0x300173f4
300039dc:	300187d0 	.word	0x300187d0

300039e0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
300039e0:	e92d4800 	push	{fp, lr}
300039e4:	e28db004 	add	fp, sp, #4
300039e8:	e24dd010 	sub	sp, sp, #16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
300039ec:	e3a03000 	mov	r3, #0
300039f0:	e54b3005 	strb	r3, [fp, #-5]
300039f4:	ea000021 	b	30003a80 <OS_TaskStatStkChk+0xa0>
        err = OSTaskStkChk(prio, &stk_data);
300039f8:	e55b2005 	ldrb	r2, [fp, #-5]
300039fc:	e24b3014 	sub	r3, fp, #20
30003a00:	e1a00002 	mov	r0, r2
30003a04:	e1a01003 	mov	r1, r3
30003a08:	eb0019e1 	bl	3000a194 <OSTaskStkChk>
30003a0c:	e1a03000 	mov	r3, r0
30003a10:	e54b3006 	strb	r3, [fp, #-6]
        if (err == OS_ERR_NONE) {
30003a14:	e55b3006 	ldrb	r3, [fp, #-6]
30003a18:	e3530000 	cmp	r3, #0
30003a1c:	1a000014 	bne	30003a74 <OS_TaskStatStkChk+0x94>
            ptcb = OSTCBPrioTbl[prio];
30003a20:	e55b2005 	ldrb	r2, [fp, #-5]
30003a24:	e59f306c 	ldr	r3, [pc, #108]	; 30003a98 <OS_TaskStatStkChk+0xb8>
30003a28:	e7933102 	ldr	r3, [r3, r2, lsl #2]
30003a2c:	e50b300c 	str	r3, [fp, #-12]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
30003a30:	e51b300c 	ldr	r3, [fp, #-12]
30003a34:	e3530000 	cmp	r3, #0
30003a38:	0a00000d 	beq	30003a74 <OS_TaskStatStkChk+0x94>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
30003a3c:	e51b300c 	ldr	r3, [fp, #-12]
30003a40:	e3530001 	cmp	r3, #1
30003a44:	0a00000a 	beq	30003a74 <OS_TaskStatStkChk+0x94>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
30003a48:	e51b300c 	ldr	r3, [fp, #-12]
30003a4c:	e5932008 	ldr	r2, [r3, #8]
30003a50:	e51b300c 	ldr	r3, [fp, #-12]
30003a54:	e593300c 	ldr	r3, [r3, #12]
30003a58:	e1a03103 	lsl	r3, r3, #2
30003a5c:	e0822003 	add	r2, r2, r3
30003a60:	e51b300c 	ldr	r3, [fp, #-12]
30003a64:	e583204c 	str	r2, [r3, #76]	; 0x4c
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
30003a68:	e51b2010 	ldr	r2, [fp, #-16]
30003a6c:	e51b300c 	ldr	r3, [fp, #-12]
30003a70:	e5832050 	str	r2, [r3, #80]	; 0x50
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
30003a74:	e55b3005 	ldrb	r3, [fp, #-5]
30003a78:	e2833001 	add	r3, r3, #1
30003a7c:	e54b3005 	strb	r3, [fp, #-5]
30003a80:	e55b3005 	ldrb	r3, [fp, #-5]
30003a84:	e353003f 	cmp	r3, #63	; 0x3f
30003a88:	9affffda 	bls	300039f8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
30003a8c:	e24bd004 	sub	sp, fp, #4
30003a90:	e8bd4800 	pop	{fp, lr}
30003a94:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30003a98:	300186d0 	.word	0x300186d0

30003a9c <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
30003a9c:	e92d4800 	push	{fp, lr}
30003aa0:	e28db004 	add	fp, sp, #4
30003aa4:	e24dd020 	sub	sp, sp, #32
30003aa8:	e50b101c 	str	r1, [fp, #-28]
30003aac:	e50b2020 	str	r2, [fp, #-32]
30003ab0:	e1a02000 	mov	r2, r0
30003ab4:	e54b2015 	strb	r2, [fp, #-21]
30003ab8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
30003abc:	e3a03000 	mov	r3, #0
30003ac0:	e50b300c 	str	r3, [fp, #-12]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
30003ac4:	ebfff193 	bl	30000118 <OS_CPU_SaveSR>
30003ac8:	e1a03000 	mov	r3, r0
30003acc:	e50b300c 	str	r3, [fp, #-12]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
30003ad0:	e59f32e0 	ldr	r3, [pc, #736]	; 30003db8 <OS_TCBInit+0x31c>
30003ad4:	e5933000 	ldr	r3, [r3]
30003ad8:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb != (OS_TCB *)0) {
30003adc:	e51b3010 	ldr	r3, [fp, #-16]
30003ae0:	e3530000 	cmp	r3, #0
30003ae4:	0a0000ac 	beq	30003d9c <OS_TCBInit+0x300>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
30003ae8:	e51b3010 	ldr	r3, [fp, #-16]
30003aec:	e5932014 	ldr	r2, [r3, #20]
30003af0:	e59f32c0 	ldr	r3, [pc, #704]	; 30003db8 <OS_TCBInit+0x31c>
30003af4:	e5832000 	str	r2, [r3]
        OS_EXIT_CRITICAL();
30003af8:	e51b000c 	ldr	r0, [fp, #-12]
30003afc:	ebfff18d 	bl	30000138 <OS_CPU_RestoreSR>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
30003b00:	e51b3010 	ldr	r3, [fp, #-16]
30003b04:	e51b201c 	ldr	r2, [fp, #-28]
30003b08:	e5832000 	str	r2, [r3]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
30003b0c:	e51b3010 	ldr	r3, [fp, #-16]
30003b10:	e55b2015 	ldrb	r2, [fp, #-21]
30003b14:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
30003b18:	e51b3010 	ldr	r3, [fp, #-16]
30003b1c:	e3a02000 	mov	r2, #0
30003b20:	e5c32038 	strb	r2, [r3, #56]	; 0x38
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
30003b24:	e51b3010 	ldr	r3, [fp, #-16]
30003b28:	e3a02000 	mov	r2, #0
30003b2c:	e5c32039 	strb	r2, [r3, #57]	; 0x39
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
30003b30:	e51b3010 	ldr	r3, [fp, #-16]
30003b34:	e3a02000 	mov	r2, #0
30003b38:	e5832034 	str	r2, [r3, #52]	; 0x34

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
30003b3c:	e51b3010 	ldr	r3, [fp, #-16]
30003b40:	e59b2008 	ldr	r2, [fp, #8]
30003b44:	e5832004 	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
30003b48:	e51b3010 	ldr	r3, [fp, #-16]
30003b4c:	e59b2004 	ldr	r2, [fp, #4]
30003b50:	e583200c 	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
30003b54:	e51b3010 	ldr	r3, [fp, #-16]
30003b58:	e51b2020 	ldr	r2, [fp, #-32]
30003b5c:	e5832008 	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
30003b60:	e51b3010 	ldr	r3, [fp, #-16]
30003b64:	e1db20bc 	ldrh	r2, [fp, #12]
30003b68:	e1c321b0 	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
30003b6c:	e51b3010 	ldr	r3, [fp, #-16]
30003b70:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
30003b74:	e1c321b2 	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
30003b78:	e51b3010 	ldr	r3, [fp, #-16]
30003b7c:	e3a02000 	mov	r2, #0
30003b80:	e5c3203f 	strb	r2, [r3, #63]	; 0x3f
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
30003b84:	e55b3015 	ldrb	r3, [fp, #-21]
30003b88:	e1a031a3 	lsr	r3, r3, #3
30003b8c:	e20320ff 	and	r2, r3, #255	; 0xff
30003b90:	e51b3010 	ldr	r3, [fp, #-16]
30003b94:	e5c3203c 	strb	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
30003b98:	e55b3015 	ldrb	r3, [fp, #-21]
30003b9c:	e2033007 	and	r3, r3, #7
30003ba0:	e51b2010 	ldr	r2, [fp, #-16]
30003ba4:	e5c2303b 	strb	r3, [r2, #59]	; 0x3b
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
30003ba8:	e51b3010 	ldr	r3, [fp, #-16]
30003bac:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30003bb0:	e3a02001 	mov	r2, #1
30003bb4:	e1a03312 	lsl	r3, r2, r3
30003bb8:	e20320ff 	and	r2, r3, #255	; 0xff
30003bbc:	e51b3010 	ldr	r3, [fp, #-16]
30003bc0:	e5c3203e 	strb	r2, [r3, #62]	; 0x3e
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
30003bc4:	e51b3010 	ldr	r3, [fp, #-16]
30003bc8:	e5d3303b 	ldrb	r3, [r3, #59]	; 0x3b
30003bcc:	e3a02001 	mov	r2, #1
30003bd0:	e1a03312 	lsl	r3, r2, r3
30003bd4:	e20320ff 	and	r2, r3, #255	; 0xff
30003bd8:	e51b3010 	ldr	r3, [fp, #-16]
30003bdc:	e5c3203d 	strb	r2, [r3, #61]	; 0x3d

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
30003be0:	e51b3010 	ldr	r3, [fp, #-16]
30003be4:	e3a02000 	mov	r2, #0
30003be8:	e583201c 	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
30003bec:	e51b3010 	ldr	r3, [fp, #-16]
30003bf0:	e3a02000 	mov	r2, #0
30003bf4:	e5832020 	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
30003bf8:	e51b3010 	ldr	r3, [fp, #-16]
30003bfc:	e3a02000 	mov	r2, #0
30003c00:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
30003c04:	e51b3010 	ldr	r3, [fp, #-16]
30003c08:	e3a02000 	mov	r2, #0
30003c0c:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
30003c10:	e51b3010 	ldr	r3, [fp, #-16]
30003c14:	e3a02000 	mov	r2, #0
30003c18:	e5832028 	str	r2, [r3, #40]	; 0x28
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
30003c1c:	e51b3010 	ldr	r3, [fp, #-16]
30003c20:	e3a02000 	mov	r2, #0
30003c24:	e5832040 	str	r2, [r3, #64]	; 0x40
        ptcb->OSTCBCyclesStart   = 0uL;
30003c28:	e51b3010 	ldr	r3, [fp, #-16]
30003c2c:	e3a02000 	mov	r2, #0
30003c30:	e5832048 	str	r2, [r3, #72]	; 0x48
        ptcb->OSTCBCyclesTot     = 0uL;
30003c34:	e51b3010 	ldr	r3, [fp, #-16]
30003c38:	e3a02000 	mov	r2, #0
30003c3c:	e5832044 	str	r2, [r3, #68]	; 0x44
        ptcb->OSTCBStkBase       = (OS_STK *)0;
30003c40:	e51b3010 	ldr	r3, [fp, #-16]
30003c44:	e3a02000 	mov	r2, #0
30003c48:	e583204c 	str	r2, [r3, #76]	; 0x4c
        ptcb->OSTCBStkUsed       = 0uL;
30003c4c:	e51b3010 	ldr	r3, [fp, #-16]
30003c50:	e3a02000 	mov	r2, #0
30003c54:	e5832050 	str	r2, [r3, #80]	; 0x50
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
30003c58:	e51b3010 	ldr	r3, [fp, #-16]
30003c5c:	e59f2158 	ldr	r2, [pc, #344]	; 30003dbc <OS_TCBInit+0x320>
30003c60:	e5832054 	str	r2, [r3, #84]	; 0x54
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
30003c64:	e3a03000 	mov	r3, #0
30003c68:	e54b3005 	strb	r3, [fp, #-5]
30003c6c:	ea000007 	b	30003c90 <OS_TCBInit+0x1f4>
            ptcb->OSTCBRegTbl[i] = 0u;
30003c70:	e55b2005 	ldrb	r2, [fp, #-5]
30003c74:	e51b3010 	ldr	r3, [fp, #-16]
30003c78:	e2822016 	add	r2, r2, #22
30003c7c:	e3a01000 	mov	r1, #0
30003c80:	e7831102 	str	r1, [r3, r2, lsl #2]
#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
30003c84:	e55b3005 	ldrb	r3, [fp, #-5]
30003c88:	e2833001 	add	r3, r3, #1
30003c8c:	e54b3005 	strb	r3, [fp, #-5]
30003c90:	e55b3005 	ldrb	r3, [fp, #-5]
30003c94:	e3530000 	cmp	r3, #0
30003c98:	0afffff4 	beq	30003c70 <OS_TCBInit+0x1d4>
            ptcb->OSTCBRegTbl[i] = 0u;
        }
#endif

        OSTCBInitHook(ptcb);
30003c9c:	e51b0010 	ldr	r0, [fp, #-16]
30003ca0:	ebfff7af 	bl	30001b64 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
30003ca4:	ebfff11b 	bl	30000118 <OS_CPU_SaveSR>
30003ca8:	e1a03000 	mov	r3, r0
30003cac:	e50b300c 	str	r3, [fp, #-12]
        OSTCBPrioTbl[prio] = ptcb;
30003cb0:	e55b2015 	ldrb	r2, [fp, #-21]
30003cb4:	e59f3104 	ldr	r3, [pc, #260]	; 30003dc0 <OS_TCBInit+0x324>
30003cb8:	e51b1010 	ldr	r1, [fp, #-16]
30003cbc:	e7831102 	str	r1, [r3, r2, lsl #2]
        OS_EXIT_CRITICAL();
30003cc0:	e51b000c 	ldr	r0, [fp, #-12]
30003cc4:	ebfff11b 	bl	30000138 <OS_CPU_RestoreSR>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
30003cc8:	e51b0010 	ldr	r0, [fp, #-16]
30003ccc:	ebfff767 	bl	30001a70 <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
30003cd0:	ebfff110 	bl	30000118 <OS_CPU_SaveSR>
30003cd4:	e1a03000 	mov	r3, r0
30003cd8:	e50b300c 	str	r3, [fp, #-12]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
30003cdc:	e59f30e0 	ldr	r3, [pc, #224]	; 30003dc4 <OS_TCBInit+0x328>
30003ce0:	e5932000 	ldr	r2, [r3]
30003ce4:	e51b3010 	ldr	r3, [fp, #-16]
30003ce8:	e5832014 	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
30003cec:	e51b3010 	ldr	r3, [fp, #-16]
30003cf0:	e3a02000 	mov	r2, #0
30003cf4:	e5832018 	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
30003cf8:	e59f30c4 	ldr	r3, [pc, #196]	; 30003dc4 <OS_TCBInit+0x328>
30003cfc:	e5933000 	ldr	r3, [r3]
30003d00:	e3530000 	cmp	r3, #0
30003d04:	0a000003 	beq	30003d18 <OS_TCBInit+0x27c>
            OSTCBList->OSTCBPrev = ptcb;
30003d08:	e59f30b4 	ldr	r3, [pc, #180]	; 30003dc4 <OS_TCBInit+0x328>
30003d0c:	e5933000 	ldr	r3, [r3]
30003d10:	e51b2010 	ldr	r2, [fp, #-16]
30003d14:	e5832018 	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
30003d18:	e59f30a4 	ldr	r3, [pc, #164]	; 30003dc4 <OS_TCBInit+0x328>
30003d1c:	e51b2010 	ldr	r2, [fp, #-16]
30003d20:	e5832000 	str	r2, [r3]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
30003d24:	e51b3010 	ldr	r3, [fp, #-16]
30003d28:	e5d3203e 	ldrb	r2, [r3, #62]	; 0x3e
30003d2c:	e59f3094 	ldr	r3, [pc, #148]	; 30003dc8 <OS_TCBInit+0x32c>
30003d30:	e5d33000 	ldrb	r3, [r3]
30003d34:	e1823003 	orr	r3, r2, r3
30003d38:	e20320ff 	and	r2, r3, #255	; 0xff
30003d3c:	e59f3084 	ldr	r3, [pc, #132]	; 30003dc8 <OS_TCBInit+0x32c>
30003d40:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
30003d44:	e51b3010 	ldr	r3, [fp, #-16]
30003d48:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30003d4c:	e51b2010 	ldr	r2, [fp, #-16]
30003d50:	e5d2203c 	ldrb	r2, [r2, #60]	; 0x3c
30003d54:	e59f1070 	ldr	r1, [pc, #112]	; 30003dcc <OS_TCBInit+0x330>
30003d58:	e7d11002 	ldrb	r1, [r1, r2]
30003d5c:	e51b2010 	ldr	r2, [fp, #-16]
30003d60:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
30003d64:	e1812002 	orr	r2, r1, r2
30003d68:	e20210ff 	and	r1, r2, #255	; 0xff
30003d6c:	e59f2058 	ldr	r2, [pc, #88]	; 30003dcc <OS_TCBInit+0x330>
30003d70:	e7c21003 	strb	r1, [r2, r3]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
30003d74:	e59f3054 	ldr	r3, [pc, #84]	; 30003dd0 <OS_TCBInit+0x334>
30003d78:	e5d33000 	ldrb	r3, [r3]
30003d7c:	e2833001 	add	r3, r3, #1
30003d80:	e20320ff 	and	r2, r3, #255	; 0xff
30003d84:	e59f3044 	ldr	r3, [pc, #68]	; 30003dd0 <OS_TCBInit+0x334>
30003d88:	e5c32000 	strb	r2, [r3]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
30003d8c:	e51b000c 	ldr	r0, [fp, #-12]
30003d90:	ebfff0e8 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_NONE);
30003d94:	e3a03000 	mov	r3, #0
30003d98:	ea000002 	b	30003da8 <OS_TCBInit+0x30c>
    }
    OS_EXIT_CRITICAL();
30003d9c:	e51b000c 	ldr	r0, [fp, #-12]
30003da0:	ebfff0e4 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_TASK_NO_MORE_TCB);
30003da4:	e3a03042 	mov	r3, #66	; 0x42
}
30003da8:	e1a00003 	mov	r0, r3
30003dac:	e24bd004 	sub	sp, fp, #4
30003db0:	e8bd4800 	pop	{fp, lr}
30003db4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30003db8:	30017958 	.word	0x30017958
30003dbc:	3000c278 	.word	0x3000c278
30003dc0:	300186d0 	.word	0x300186d0
30003dc4:	300176d0 	.word	0x300176d0
30003dc8:	300179cc 	.word	0x300179cc
30003dcc:	300179d0 	.word	0x300179d0
30003dd0:	3001795d 	.word	0x3001795d

30003dd4 <OSFlagAccept>:
#if OS_FLAG_ACCEPT_EN > 0u
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP  *pgrp,
                        OS_FLAGS      flags,
                        INT8U         wait_type,
                        INT8U        *perr)
{
30003dd4:	e92d4800 	push	{fp, lr}
30003dd8:	e28db004 	add	fp, sp, #4
30003ddc:	e24dd018 	sub	sp, sp, #24
30003de0:	e50b0010 	str	r0, [fp, #-16]
30003de4:	e50b3018 	str	r3, [fp, #-24]
30003de8:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
30003dec:	e1a03002 	mov	r3, r2
30003df0:	e54b3013 	strb	r3, [fp, #-19]
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
30003df4:	e3a03000 	mov	r3, #0
30003df8:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
30003dfc:	e51b3010 	ldr	r3, [fp, #-16]
30003e00:	e3530000 	cmp	r3, #0
30003e04:	1a000004 	bne	30003e1c <OSFlagAccept+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
30003e08:	e51b3018 	ldr	r3, [fp, #-24]
30003e0c:	e3a0206e 	mov	r2, #110	; 0x6e
30003e10:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
30003e14:	e3a03000 	mov	r3, #0
30003e18:	ea0000aa 	b	300040c8 <OSFlagAccept+0x2f4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
30003e1c:	e51b3010 	ldr	r3, [fp, #-16]
30003e20:	e5d33000 	ldrb	r3, [r3]
30003e24:	e3530005 	cmp	r3, #5
30003e28:	0a000004 	beq	30003e40 <OSFlagAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
30003e2c:	e51b3018 	ldr	r3, [fp, #-24]
30003e30:	e3a02001 	mov	r2, #1
30003e34:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
30003e38:	e3a03000 	mov	r3, #0
30003e3c:	ea0000a1 	b	300040c8 <OSFlagAccept+0x2f4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
30003e40:	e55b3013 	ldrb	r3, [fp, #-19]
30003e44:	e3c3307f 	bic	r3, r3, #127	; 0x7f
30003e48:	e54b300a 	strb	r3, [fp, #-10]
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
30003e4c:	e55b300a 	ldrb	r3, [fp, #-10]
30003e50:	e3530000 	cmp	r3, #0
30003e54:	0a000005 	beq	30003e70 <OSFlagAccept+0x9c>
        wait_type &= ~OS_FLAG_CONSUME;
30003e58:	e55b3013 	ldrb	r3, [fp, #-19]
30003e5c:	e203307f 	and	r3, r3, #127	; 0x7f
30003e60:	e54b3013 	strb	r3, [fp, #-19]
        consume    = OS_TRUE;
30003e64:	e3a03001 	mov	r3, #1
30003e68:	e54b3009 	strb	r3, [fp, #-9]
30003e6c:	ea000001 	b	30003e78 <OSFlagAccept+0xa4>
    } else {
        consume    = OS_FALSE;
30003e70:	e3a03000 	mov	r3, #0
30003e74:	e54b3009 	strb	r3, [fp, #-9]
    }

    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
30003e78:	e51b3018 	ldr	r3, [fp, #-24]
30003e7c:	e3a02000 	mov	r2, #0
30003e80:	e5c32000 	strb	r2, [r3]
    OS_ENTER_CRITICAL();
30003e84:	ebfff0a3 	bl	30000118 <OS_CPU_SaveSR>
30003e88:	e1a03000 	mov	r3, r0
30003e8c:	e50b3008 	str	r3, [fp, #-8]
    switch (wait_type) {
30003e90:	e55b3013 	ldrb	r3, [fp, #-19]
30003e94:	e3530003 	cmp	r3, #3
30003e98:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
30003e9c:	ea000081 	b	300040a8 <OSFlagAccept+0x2d4>
30003ea0:	30003fac 	.word	0x30003fac
30003ea4:	3000402c 	.word	0x3000402c
30003ea8:	30003eb0 	.word	0x30003eb0
30003eac:	30003f30 	.word	0x30003f30
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
30003eb0:	e51b3010 	ldr	r3, [fp, #-16]
30003eb4:	e1d320b8 	ldrh	r2, [r3, #8]
30003eb8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
30003ebc:	e0023003 	and	r3, r2, r3
30003ec0:	e14b30bc 	strh	r3, [fp, #-12]
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
30003ec4:	e15b20bc 	ldrh	r2, [fp, #-12]
30003ec8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
30003ecc:	e1520003 	cmp	r2, r3
30003ed0:	1a00000e 	bne	30003f10 <OSFlagAccept+0x13c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
30003ed4:	e55b3009 	ldrb	r3, [fp, #-9]
30003ed8:	e3530001 	cmp	r3, #1
30003edc:	1a00000f 	bne	30003f20 <OSFlagAccept+0x14c>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we wanted  */
30003ee0:	e51b3010 	ldr	r3, [fp, #-16]
30003ee4:	e1d320b8 	ldrh	r2, [r3, #8]
30003ee8:	e15b30bc 	ldrh	r3, [fp, #-12]
30003eec:	e1e03003 	mvn	r3, r3
30003ef0:	e1a03803 	lsl	r3, r3, #16
30003ef4:	e1a03823 	lsr	r3, r3, #16
30003ef8:	e0023003 	and	r3, r2, r3
30003efc:	e1a03803 	lsl	r3, r3, #16
30003f00:	e1a02823 	lsr	r2, r3, #16
30003f04:	e51b3010 	ldr	r3, [fp, #-16]
30003f08:	e1c320b8 	strh	r2, [r3, #8]
30003f0c:	ea000004 	b	30003f24 <OSFlagAccept+0x150>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
30003f10:	e51b3018 	ldr	r3, [fp, #-24]
30003f14:	e3a02070 	mov	r2, #112	; 0x70
30003f18:	e5c32000 	strb	r2, [r3]
30003f1c:	ea000000 	b	30003f24 <OSFlagAccept+0x150>
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we wanted  */
30003f20:	e1a00000 	nop			; (mov r0, r0)
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
             }
             OS_EXIT_CRITICAL();
30003f24:	e51b0008 	ldr	r0, [fp, #-8]
30003f28:	ebfff082 	bl	30000138 <OS_CPU_RestoreSR>
             break;
30003f2c:	ea000064 	b	300040c4 <OSFlagAccept+0x2f0>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
30003f30:	e51b3010 	ldr	r3, [fp, #-16]
30003f34:	e1d320b8 	ldrh	r2, [r3, #8]
30003f38:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
30003f3c:	e0023003 	and	r3, r2, r3
30003f40:	e14b30bc 	strh	r3, [fp, #-12]
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
30003f44:	e15b30bc 	ldrh	r3, [fp, #-12]
30003f48:	e3530000 	cmp	r3, #0
30003f4c:	0a00000e 	beq	30003f8c <OSFlagAccept+0x1b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
30003f50:	e55b3009 	ldrb	r3, [fp, #-9]
30003f54:	e3530001 	cmp	r3, #1
30003f58:	1a00000f 	bne	30003f9c <OSFlagAccept+0x1c8>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we got     */
30003f5c:	e51b3010 	ldr	r3, [fp, #-16]
30003f60:	e1d320b8 	ldrh	r2, [r3, #8]
30003f64:	e15b30bc 	ldrh	r3, [fp, #-12]
30003f68:	e1e03003 	mvn	r3, r3
30003f6c:	e1a03803 	lsl	r3, r3, #16
30003f70:	e1a03823 	lsr	r3, r3, #16
30003f74:	e0023003 	and	r3, r2, r3
30003f78:	e1a03803 	lsl	r3, r3, #16
30003f7c:	e1a02823 	lsr	r2, r3, #16
30003f80:	e51b3010 	ldr	r3, [fp, #-16]
30003f84:	e1c320b8 	strh	r2, [r3, #8]
30003f88:	ea000004 	b	30003fa0 <OSFlagAccept+0x1cc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
30003f8c:	e51b3018 	ldr	r3, [fp, #-24]
30003f90:	e3a02070 	mov	r2, #112	; 0x70
30003f94:	e5c32000 	strb	r2, [r3]
30003f98:	ea000000 	b	30003fa0 <OSFlagAccept+0x1cc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we got     */
30003f9c:	e1a00000 	nop			; (mov r0, r0)
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
             }
             OS_EXIT_CRITICAL();
30003fa0:	e51b0008 	ldr	r0, [fp, #-8]
30003fa4:	ebfff063 	bl	30000138 <OS_CPU_RestoreSR>
             break;
30003fa8:	ea000045 	b	300040c4 <OSFlagAccept+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0u
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
30003fac:	e51b3010 	ldr	r3, [fp, #-16]
30003fb0:	e1d330b8 	ldrh	r3, [r3, #8]
30003fb4:	e1e03003 	mvn	r3, r3
30003fb8:	e1a03803 	lsl	r3, r3, #16
30003fbc:	e1a02823 	lsr	r2, r3, #16
30003fc0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
30003fc4:	e0023003 	and	r3, r2, r3
30003fc8:	e14b30bc 	strh	r3, [fp, #-12]
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
30003fcc:	e15b20bc 	ldrh	r2, [fp, #-12]
30003fd0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
30003fd4:	e1520003 	cmp	r2, r3
30003fd8:	1a00000b 	bne	3000400c <OSFlagAccept+0x238>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
30003fdc:	e55b3009 	ldrb	r3, [fp, #-9]
30003fe0:	e3530001 	cmp	r3, #1
30003fe4:	1a00000c 	bne	3000401c <OSFlagAccept+0x248>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
30003fe8:	e51b3010 	ldr	r3, [fp, #-16]
30003fec:	e1d320b8 	ldrh	r2, [r3, #8]
30003ff0:	e15b30bc 	ldrh	r3, [fp, #-12]
30003ff4:	e1823003 	orr	r3, r2, r3
30003ff8:	e1a03803 	lsl	r3, r3, #16
30003ffc:	e1a02823 	lsr	r2, r3, #16
30004000:	e51b3010 	ldr	r3, [fp, #-16]
30004004:	e1c320b8 	strh	r2, [r3, #8]
30004008:	ea000004 	b	30004020 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
3000400c:	e51b3018 	ldr	r3, [fp, #-24]
30004010:	e3a02070 	mov	r2, #112	; 0x70
30004014:	e5c32000 	strb	r2, [r3]
30004018:	ea000000 	b	30004020 <OSFlagAccept+0x24c>
#if OS_FLAG_WAIT_CLR_EN > 0u
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
3000401c:	e1a00000 	nop			; (mov r0, r0)
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
             }
             OS_EXIT_CRITICAL();
30004020:	e51b0008 	ldr	r0, [fp, #-8]
30004024:	ebfff043 	bl	30000138 <OS_CPU_RestoreSR>
             break;
30004028:	ea000025 	b	300040c4 <OSFlagAccept+0x2f0>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
3000402c:	e51b3010 	ldr	r3, [fp, #-16]
30004030:	e1d330b8 	ldrh	r3, [r3, #8]
30004034:	e1e03003 	mvn	r3, r3
30004038:	e1a03803 	lsl	r3, r3, #16
3000403c:	e1a02823 	lsr	r2, r3, #16
30004040:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
30004044:	e0023003 	and	r3, r2, r3
30004048:	e14b30bc 	strh	r3, [fp, #-12]
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
3000404c:	e15b30bc 	ldrh	r3, [fp, #-12]
30004050:	e3530000 	cmp	r3, #0
30004054:	0a00000b 	beq	30004088 <OSFlagAccept+0x2b4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
30004058:	e55b3009 	ldrb	r3, [fp, #-9]
3000405c:	e3530001 	cmp	r3, #1
30004060:	1a00000c 	bne	30004098 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
30004064:	e51b3010 	ldr	r3, [fp, #-16]
30004068:	e1d320b8 	ldrh	r2, [r3, #8]
3000406c:	e15b30bc 	ldrh	r3, [fp, #-12]
30004070:	e1823003 	orr	r3, r2, r3
30004074:	e1a03803 	lsl	r3, r3, #16
30004078:	e1a02823 	lsr	r2, r3, #16
3000407c:	e51b3010 	ldr	r3, [fp, #-16]
30004080:	e1c320b8 	strh	r2, [r3, #8]
30004084:	ea000004 	b	3000409c <OSFlagAccept+0x2c8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
30004088:	e51b3018 	ldr	r3, [fp, #-24]
3000408c:	e3a02070 	mov	r2, #112	; 0x70
30004090:	e5c32000 	strb	r2, [r3]
30004094:	ea000000 	b	3000409c <OSFlagAccept+0x2c8>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
30004098:	e1a00000 	nop			; (mov r0, r0)
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
             }
             OS_EXIT_CRITICAL();
3000409c:	e51b0008 	ldr	r0, [fp, #-8]
300040a0:	ebfff024 	bl	30000138 <OS_CPU_RestoreSR>
             break;
300040a4:	ea000006 	b	300040c4 <OSFlagAccept+0x2f0>
#endif

        default:
             OS_EXIT_CRITICAL();
300040a8:	e51b0008 	ldr	r0, [fp, #-8]
300040ac:	ebfff021 	bl	30000138 <OS_CPU_RestoreSR>
             flags_rdy = (OS_FLAGS)0;
300040b0:	e3a03000 	mov	r3, #0
300040b4:	e14b30bc 	strh	r3, [fp, #-12]
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
300040b8:	e51b3018 	ldr	r3, [fp, #-24]
300040bc:	e3a0206f 	mov	r2, #111	; 0x6f
300040c0:	e5c32000 	strb	r2, [r3]
             break;
    }
    return (flags_rdy);
300040c4:	e15b30bc 	ldrh	r3, [fp, #-12]
}
300040c8:	e1a00003 	mov	r0, r3
300040cc:	e24bd004 	sub	sp, fp, #4
300040d0:	e8bd4800 	pop	{fp, lr}
300040d4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300040d8 <OSFlagCreate>:
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS  flags,
                            INT8U    *perr)
{
300040d8:	e92d4800 	push	{fp, lr}
300040dc:	e28db004 	add	fp, sp, #4
300040e0:	e24dd010 	sub	sp, sp, #16
300040e4:	e1a03000 	mov	r3, r0
300040e8:	e50b1014 	str	r1, [fp, #-20]
300040ec:	e14b30be 	strh	r3, [fp, #-14]
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3u                        /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0u;
300040f0:	e3a03000 	mov	r3, #0
300040f4:	e50b3008 	str	r3, [fp, #-8]
        *perr = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
        return ((OS_FLAG_GRP *)0);
    }
#endif

    if (OSIntNesting > 0u) {                        /* See if called from ISR ...                      */
300040f8:	e59f30c8 	ldr	r3, [pc, #200]	; 300041c8 <OSFlagCreate+0xf0>
300040fc:	e5d33000 	ldrb	r3, [r3]
30004100:	e3530000 	cmp	r3, #0
30004104:	0a000004 	beq	3000411c <OSFlagCreate+0x44>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
30004108:	e51b3014 	ldr	r3, [fp, #-20]
3000410c:	e3a02010 	mov	r2, #16
30004110:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAG_GRP *)0);
30004114:	e3a03000 	mov	r3, #0
30004118:	ea000026 	b	300041b8 <OSFlagCreate+0xe0>
    }
    OS_ENTER_CRITICAL();
3000411c:	ebffeffd 	bl	30000118 <OS_CPU_SaveSR>
30004120:	e1a03000 	mov	r3, r0
30004124:	e50b3008 	str	r3, [fp, #-8]
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
30004128:	e59f309c 	ldr	r3, [pc, #156]	; 300041cc <OSFlagCreate+0xf4>
3000412c:	e5933000 	ldr	r3, [r3]
30004130:	e50b300c 	str	r3, [fp, #-12]
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
30004134:	e51b300c 	ldr	r3, [fp, #-12]
30004138:	e3530000 	cmp	r3, #0
3000413c:	0a000017 	beq	300041a0 <OSFlagCreate+0xc8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
30004140:	e59f3084 	ldr	r3, [pc, #132]	; 300041cc <OSFlagCreate+0xf4>
30004144:	e5933000 	ldr	r3, [r3]
30004148:	e5933004 	ldr	r3, [r3, #4]
3000414c:	e1a02003 	mov	r2, r3
30004150:	e59f3074 	ldr	r3, [pc, #116]	; 300041cc <OSFlagCreate+0xf4>
30004154:	e5832000 	str	r2, [r3]
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
30004158:	e51b300c 	ldr	r3, [fp, #-12]
3000415c:	e3a02005 	mov	r2, #5
30004160:	e5c32000 	strb	r2, [r3]
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
30004164:	e51b300c 	ldr	r3, [fp, #-12]
30004168:	e15b20be 	ldrh	r2, [fp, #-14]
3000416c:	e1c320b8 	strh	r2, [r3, #8]
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
30004170:	e51b300c 	ldr	r3, [fp, #-12]
30004174:	e3a02000 	mov	r2, #0
30004178:	e5832004 	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp->OSFlagName     = (INT8U *)(void *)"?";
3000417c:	e51b300c 	ldr	r3, [fp, #-12]
30004180:	e59f2048 	ldr	r2, [pc, #72]	; 300041d0 <OSFlagCreate+0xf8>
30004184:	e583200c 	str	r2, [r3, #12]
#endif
        OS_TRACE_FLAG_CREATE(pgrp, pgrp->OSFlagName);
        OS_EXIT_CRITICAL();
30004188:	e51b0008 	ldr	r0, [fp, #-8]
3000418c:	ebffefe9 	bl	30000138 <OS_CPU_RestoreSR>
        *perr                = OS_ERR_NONE;
30004190:	e51b3014 	ldr	r3, [fp, #-20]
30004194:	e3a02000 	mov	r2, #0
30004198:	e5c32000 	strb	r2, [r3]
3000419c:	ea000004 	b	300041b4 <OSFlagCreate+0xdc>
    } else {
        OS_EXIT_CRITICAL();
300041a0:	e51b0008 	ldr	r0, [fp, #-8]
300041a4:	ebffefe3 	bl	30000138 <OS_CPU_RestoreSR>
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
300041a8:	e51b3014 	ldr	r3, [fp, #-20]
300041ac:	e3a02072 	mov	r2, #114	; 0x72
300041b0:	e5c32000 	strb	r2, [r3]
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
300041b4:	e51b300c 	ldr	r3, [fp, #-12]
}
300041b8:	e1a00003 	mov	r0, r3
300041bc:	e24bd004 	sub	sp, fp, #4
300041c0:	e8bd4800 	pop	{fp, lr}
300041c4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300041c8:	30017bdc 	.word	0x30017bdc
300041cc:	300186c8 	.word	0x300186c8
300041d0:	3000c278 	.word	0x3000c278

300041d4 <OSFlagDel>:

#if OS_FLAG_DEL_EN > 0u
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP  *pgrp,
                         INT8U         opt,
                         INT8U        *perr)
{
300041d4:	e92d4800 	push	{fp, lr}
300041d8:	e28db004 	add	fp, sp, #4
300041dc:	e24dd020 	sub	sp, sp, #32
300041e0:	e50b0018 	str	r0, [fp, #-24]
300041e4:	e1a03001 	mov	r3, r1
300041e8:	e50b2020 	str	r2, [fp, #-32]
300041ec:	e54b3019 	strb	r3, [fp, #-25]
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
300041f0:	e3a03000 	mov	r3, #0
300041f4:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_FLAG_GRP *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
300041f8:	e51b3018 	ldr	r3, [fp, #-24]
300041fc:	e3530000 	cmp	r3, #0
30004200:	1a000004 	bne	30004218 <OSFlagDel+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
30004204:	e51b3020 	ldr	r3, [fp, #-32]
30004208:	e3a0206e 	mov	r2, #110	; 0x6e
3000420c:	e5c32000 	strb	r2, [r3]
        return (pgrp);
30004210:	e51b3018 	ldr	r3, [fp, #-24]
30004214:	ea000078 	b	300043fc <OSFlagDel+0x228>
    }
#endif

    OS_TRACE_FLAG_DEL_ENTER(pgrp, opt);

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
30004218:	e59f31ec 	ldr	r3, [pc, #492]	; 3000440c <OSFlagDel+0x238>
3000421c:	e5d33000 	ldrb	r3, [r3]
30004220:	e3530000 	cmp	r3, #0
30004224:	0a000004 	beq	3000423c <OSFlagDel+0x68>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
30004228:	e51b3020 	ldr	r3, [fp, #-32]
3000422c:	e3a0200f 	mov	r2, #15
30004230:	e5c32000 	strb	r2, [r3]
        OS_TRACE_FLAG_DEL_EXIT(*perr);
        return (pgrp);
30004234:	e51b3018 	ldr	r3, [fp, #-24]
30004238:	ea00006f 	b	300043fc <OSFlagDel+0x228>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
3000423c:	e51b3018 	ldr	r3, [fp, #-24]
30004240:	e5d33000 	ldrb	r3, [r3]
30004244:	e3530005 	cmp	r3, #5
30004248:	0a000004 	beq	30004260 <OSFlagDel+0x8c>
        *perr = OS_ERR_EVENT_TYPE;
3000424c:	e51b3020 	ldr	r3, [fp, #-32]
30004250:	e3a02001 	mov	r2, #1
30004254:	e5c32000 	strb	r2, [r3]
        OS_TRACE_FLAG_DEL_EXIT(*perr);
        return (pgrp);
30004258:	e51b3018 	ldr	r3, [fp, #-24]
3000425c:	ea000066 	b	300043fc <OSFlagDel+0x228>
    }
    OS_ENTER_CRITICAL();
30004260:	ebffefac 	bl	30000118 <OS_CPU_SaveSR>
30004264:	e1a03000 	mov	r3, r0
30004268:	e50b3008 	str	r3, [fp, #-8]
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
3000426c:	e51b3018 	ldr	r3, [fp, #-24]
30004270:	e5933004 	ldr	r3, [r3, #4]
30004274:	e3530000 	cmp	r3, #0
30004278:	0a000002 	beq	30004288 <OSFlagDel+0xb4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
3000427c:	e3a03001 	mov	r3, #1
30004280:	e54b3011 	strb	r3, [fp, #-17]
30004284:	ea000001 	b	30004290 <OSFlagDel+0xbc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
30004288:	e3a03000 	mov	r3, #0
3000428c:	e54b3011 	strb	r3, [fp, #-17]
    }
    switch (opt) {
30004290:	e55b3019 	ldrb	r3, [fp, #-25]
30004294:	e3530000 	cmp	r3, #0
30004298:	0a000002 	beq	300042a8 <OSFlagDel+0xd4>
3000429c:	e3530001 	cmp	r3, #1
300042a0:	0a000023 	beq	30004334 <OSFlagDel+0x160>
300042a4:	ea00004c 	b	300043dc <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
300042a8:	e55b3011 	ldrb	r3, [fp, #-17]
300042ac:	e3530000 	cmp	r3, #0
300042b0:	1a000017 	bne	30004314 <OSFlagDel+0x140>
#if OS_FLAG_NAME_EN > 0u
                 pgrp->OSFlagName     = (INT8U *)(void *)"?";
300042b4:	e51b3018 	ldr	r3, [fp, #-24]
300042b8:	e59f2150 	ldr	r2, [pc, #336]	; 30004410 <OSFlagDel+0x23c>
300042bc:	e583200c 	str	r2, [r3, #12]
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
300042c0:	e51b3018 	ldr	r3, [fp, #-24]
300042c4:	e3a02000 	mov	r2, #0
300042c8:	e5c32000 	strb	r2, [r3]
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
300042cc:	e59f3140 	ldr	r3, [pc, #320]	; 30004414 <OSFlagDel+0x240>
300042d0:	e5932000 	ldr	r2, [r3]
300042d4:	e51b3018 	ldr	r3, [fp, #-24]
300042d8:	e5832004 	str	r2, [r3, #4]
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
300042dc:	e51b3018 	ldr	r3, [fp, #-24]
300042e0:	e3a02000 	mov	r2, #0
300042e4:	e1c320b8 	strh	r2, [r3, #8]
                 OSFlagFreeList       = pgrp;
300042e8:	e59f3124 	ldr	r3, [pc, #292]	; 30004414 <OSFlagDel+0x240>
300042ec:	e51b2018 	ldr	r2, [fp, #-24]
300042f0:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
300042f4:	e51b0008 	ldr	r0, [fp, #-8]
300042f8:	ebffef8e 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                = OS_ERR_NONE;
300042fc:	e51b3020 	ldr	r3, [fp, #-32]
30004300:	e3a02000 	mov	r2, #0
30004304:	e5c32000 	strb	r2, [r3]
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
30004308:	e3a03000 	mov	r3, #0
3000430c:	e50b300c 	str	r3, [fp, #-12]
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
30004310:	ea000038 	b	300043f8 <OSFlagDel+0x224>
                 OSFlagFreeList       = pgrp;
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
30004314:	e51b0008 	ldr	r0, [fp, #-8]
30004318:	ebffef86 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                = OS_ERR_TASK_WAITING;
3000431c:	e51b3020 	ldr	r3, [fp, #-32]
30004320:	e3a02049 	mov	r2, #73	; 0x49
30004324:	e5c32000 	strb	r2, [r3]
                 pgrp_return          = pgrp;
30004328:	e51b3018 	ldr	r3, [fp, #-24]
3000432c:	e50b300c 	str	r3, [fp, #-12]
             }
             break;
30004330:	ea000030 	b	300043f8 <OSFlagDel+0x224>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
30004334:	e51b3018 	ldr	r3, [fp, #-24]
30004338:	e5933004 	ldr	r3, [r3, #4]
3000433c:	e50b3010 	str	r3, [fp, #-16]
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
30004340:	ea000006 	b	30004360 <OSFlagDel+0x18c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0, OS_STAT_PEND_ABORT);
30004344:	e51b0010 	ldr	r0, [fp, #-16]
30004348:	e3a01000 	mov	r1, #0
3000434c:	e3a02002 	mov	r2, #2
30004350:	eb0003c7 	bl	30005274 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
30004354:	e51b3010 	ldr	r3, [fp, #-16]
30004358:	e5933000 	ldr	r3, [r3]
3000435c:	e50b3010 	str	r3, [fp, #-16]
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
30004360:	e51b3010 	ldr	r3, [fp, #-16]
30004364:	e3530000 	cmp	r3, #0
30004368:	1afffff5 	bne	30004344 <OSFlagDel+0x170>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0, OS_STAT_PEND_ABORT);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_EN > 0u
             pgrp->OSFlagName     = (INT8U *)(void *)"?";
3000436c:	e51b3018 	ldr	r3, [fp, #-24]
30004370:	e59f2098 	ldr	r2, [pc, #152]	; 30004410 <OSFlagDel+0x23c>
30004374:	e583200c 	str	r2, [r3, #12]
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
30004378:	e51b3018 	ldr	r3, [fp, #-24]
3000437c:	e3a02000 	mov	r2, #0
30004380:	e5c32000 	strb	r2, [r3]
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
30004384:	e59f3088 	ldr	r3, [pc, #136]	; 30004414 <OSFlagDel+0x240>
30004388:	e5932000 	ldr	r2, [r3]
3000438c:	e51b3018 	ldr	r3, [fp, #-24]
30004390:	e5832004 	str	r2, [r3, #4]
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
30004394:	e51b3018 	ldr	r3, [fp, #-24]
30004398:	e3a02000 	mov	r2, #0
3000439c:	e1c320b8 	strh	r2, [r3, #8]
             OSFlagFreeList       = pgrp;
300043a0:	e59f306c 	ldr	r3, [pc, #108]	; 30004414 <OSFlagDel+0x240>
300043a4:	e51b2018 	ldr	r2, [fp, #-24]
300043a8:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
300043ac:	e51b0008 	ldr	r0, [fp, #-8]
300043b0:	ebffef60 	bl	30000138 <OS_CPU_RestoreSR>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
300043b4:	e55b3011 	ldrb	r3, [fp, #-17]
300043b8:	e3530001 	cmp	r3, #1
300043bc:	1a000000 	bne	300043c4 <OSFlagDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
300043c0:	ebfffca0 	bl	30003648 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
300043c4:	e51b3020 	ldr	r3, [fp, #-32]
300043c8:	e3a02000 	mov	r2, #0
300043cc:	e5c32000 	strb	r2, [r3]
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
300043d0:	e3a03000 	mov	r3, #0
300043d4:	e50b300c 	str	r3, [fp, #-12]
             break;
300043d8:	ea000006 	b	300043f8 <OSFlagDel+0x224>

        default:
             OS_EXIT_CRITICAL();
300043dc:	e51b0008 	ldr	r0, [fp, #-8]
300043e0:	ebffef54 	bl	30000138 <OS_CPU_RestoreSR>
             *perr                = OS_ERR_INVALID_OPT;
300043e4:	e51b3020 	ldr	r3, [fp, #-32]
300043e8:	e3a02007 	mov	r2, #7
300043ec:	e5c32000 	strb	r2, [r3]
             pgrp_return          = pgrp;
300043f0:	e51b3018 	ldr	r3, [fp, #-24]
300043f4:	e50b300c 	str	r3, [fp, #-12]
             break;
    }

    OS_TRACE_FLAG_DEL_EXIT(*perr);

    return (pgrp_return);
300043f8:	e51b300c 	ldr	r3, [fp, #-12]
}
300043fc:	e1a00003 	mov	r0, r3
30004400:	e24bd004 	sub	sp, fp, #4
30004404:	e8bd4800 	pop	{fp, lr}
30004408:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000440c:	30017bdc 	.word	0x30017bdc
30004410:	3000c278 	.word	0x3000c278
30004414:	300186c8 	.word	0x300186c8

30004418 <OSFlagNameGet>:

#if OS_FLAG_NAME_EN > 0u
INT8U  OSFlagNameGet (OS_FLAG_GRP   *pgrp,
                      INT8U        **pname,
                      INT8U         *perr)
{
30004418:	e92d4800 	push	{fp, lr}
3000441c:	e28db004 	add	fp, sp, #4
30004420:	e24dd018 	sub	sp, sp, #24
30004424:	e50b0010 	str	r0, [fp, #-16]
30004428:	e50b1014 	str	r1, [fp, #-20]
3000442c:	e50b2018 	str	r2, [fp, #-24]
    INT8U      len;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30004430:	e3a03000 	mov	r3, #0
30004434:	e50b3008 	str	r3, [fp, #-8]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
30004438:	e51b3010 	ldr	r3, [fp, #-16]
3000443c:	e3530000 	cmp	r3, #0
30004440:	1a000004 	bne	30004458 <OSFlagNameGet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
30004444:	e51b3018 	ldr	r3, [fp, #-24]
30004448:	e3a0206e 	mov	r2, #110	; 0x6e
3000444c:	e5c32000 	strb	r2, [r3]
        return (0u);
30004450:	e3a03000 	mov	r3, #0
30004454:	ea00002e 	b	30004514 <OSFlagNameGet+0xfc>
    }
    if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                         */
30004458:	e51b3014 	ldr	r3, [fp, #-20]
3000445c:	e3530000 	cmp	r3, #0
30004460:	1a000004 	bne	30004478 <OSFlagNameGet+0x60>
        *perr = OS_ERR_PNAME_NULL;
30004464:	e51b3018 	ldr	r3, [fp, #-24]
30004468:	e3a0200c 	mov	r2, #12
3000446c:	e5c32000 	strb	r2, [r3]
        return (0u);
30004470:	e3a03000 	mov	r3, #0
30004474:	ea000026 	b	30004514 <OSFlagNameGet+0xfc>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
30004478:	e59f30a4 	ldr	r3, [pc, #164]	; 30004524 <OSFlagNameGet+0x10c>
3000447c:	e5d33000 	ldrb	r3, [r3]
30004480:	e3530000 	cmp	r3, #0
30004484:	0a000004 	beq	3000449c <OSFlagNameGet+0x84>
        *perr = OS_ERR_NAME_GET_ISR;
30004488:	e51b3018 	ldr	r3, [fp, #-24]
3000448c:	e3a02011 	mov	r2, #17
30004490:	e5c32000 	strb	r2, [r3]
        return (0u);
30004494:	e3a03000 	mov	r3, #0
30004498:	ea00001d 	b	30004514 <OSFlagNameGet+0xfc>
    }
    OS_ENTER_CRITICAL();
3000449c:	ebffef1d 	bl	30000118 <OS_CPU_SaveSR>
300044a0:	e1a03000 	mov	r3, r0
300044a4:	e50b3008 	str	r3, [fp, #-8]
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
300044a8:	e51b3010 	ldr	r3, [fp, #-16]
300044ac:	e5d33000 	ldrb	r3, [r3]
300044b0:	e3530005 	cmp	r3, #5
300044b4:	0a000006 	beq	300044d4 <OSFlagNameGet+0xbc>
        OS_EXIT_CRITICAL();
300044b8:	e51b0008 	ldr	r0, [fp, #-8]
300044bc:	ebffef1d 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_EVENT_TYPE;
300044c0:	e51b3018 	ldr	r3, [fp, #-24]
300044c4:	e3a02001 	mov	r2, #1
300044c8:	e5c32000 	strb	r2, [r3]
        return (0u);
300044cc:	e3a03000 	mov	r3, #0
300044d0:	ea00000f 	b	30004514 <OSFlagNameGet+0xfc>
    }
    *pname = pgrp->OSFlagName;
300044d4:	e51b3010 	ldr	r3, [fp, #-16]
300044d8:	e593200c 	ldr	r2, [r3, #12]
300044dc:	e51b3014 	ldr	r3, [fp, #-20]
300044e0:	e5832000 	str	r2, [r3]
    len    = OS_StrLen(*pname);
300044e4:	e51b3014 	ldr	r3, [fp, #-20]
300044e8:	e5933000 	ldr	r3, [r3]
300044ec:	e1a00003 	mov	r0, r3
300044f0:	ebfffca4 	bl	30003788 <OS_StrLen>
300044f4:	e1a03000 	mov	r3, r0
300044f8:	e54b3009 	strb	r3, [fp, #-9]
    OS_EXIT_CRITICAL();
300044fc:	e51b0008 	ldr	r0, [fp, #-8]
30004500:	ebffef0c 	bl	30000138 <OS_CPU_RestoreSR>
    *perr  = OS_ERR_NONE;
30004504:	e51b3018 	ldr	r3, [fp, #-24]
30004508:	e3a02000 	mov	r2, #0
3000450c:	e5c32000 	strb	r2, [r3]
    return (len);
30004510:	e55b3009 	ldrb	r3, [fp, #-9]
}
30004514:	e1a00003 	mov	r0, r3
30004518:	e24bd004 	sub	sp, fp, #4
3000451c:	e8bd4800 	pop	{fp, lr}
30004520:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30004524:	30017bdc 	.word	0x30017bdc

30004528 <OSFlagNameSet>:

#if OS_FLAG_NAME_EN > 0u
void  OSFlagNameSet (OS_FLAG_GRP  *pgrp,
                     INT8U        *pname,
                     INT8U        *perr)
{
30004528:	e92d4800 	push	{fp, lr}
3000452c:	e28db004 	add	fp, sp, #4
30004530:	e24dd018 	sub	sp, sp, #24
30004534:	e50b0010 	str	r0, [fp, #-16]
30004538:	e50b1014 	str	r1, [fp, #-20]
3000453c:	e50b2018 	str	r2, [fp, #-24]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30004540:	e3a03000 	mov	r3, #0
30004544:	e50b3008 	str	r3, [fp, #-8]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
30004548:	e51b3010 	ldr	r3, [fp, #-16]
3000454c:	e3530000 	cmp	r3, #0
30004550:	1a000003 	bne	30004564 <OSFlagNameSet+0x3c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
30004554:	e51b3018 	ldr	r3, [fp, #-24]
30004558:	e3a0206e 	mov	r2, #110	; 0x6e
3000455c:	e5c32000 	strb	r2, [r3]
        return;
30004560:	ea000024 	b	300045f8 <OSFlagNameSet+0xd0>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
30004564:	e51b3014 	ldr	r3, [fp, #-20]
30004568:	e3530000 	cmp	r3, #0
3000456c:	1a000003 	bne	30004580 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
30004570:	e51b3018 	ldr	r3, [fp, #-24]
30004574:	e3a0200c 	mov	r2, #12
30004578:	e5c32000 	strb	r2, [r3]
        return;
3000457c:	ea00001d 	b	300045f8 <OSFlagNameSet+0xd0>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
30004580:	e59f307c 	ldr	r3, [pc, #124]	; 30004604 <OSFlagNameSet+0xdc>
30004584:	e5d33000 	ldrb	r3, [r3]
30004588:	e3530000 	cmp	r3, #0
3000458c:	0a000003 	beq	300045a0 <OSFlagNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
30004590:	e51b3018 	ldr	r3, [fp, #-24]
30004594:	e3a02012 	mov	r2, #18
30004598:	e5c32000 	strb	r2, [r3]
        return;
3000459c:	ea000015 	b	300045f8 <OSFlagNameSet+0xd0>
    }
    OS_ENTER_CRITICAL();
300045a0:	ebffeedc 	bl	30000118 <OS_CPU_SaveSR>
300045a4:	e1a03000 	mov	r3, r0
300045a8:	e50b3008 	str	r3, [fp, #-8]
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
300045ac:	e51b3010 	ldr	r3, [fp, #-16]
300045b0:	e5d33000 	ldrb	r3, [r3]
300045b4:	e3530005 	cmp	r3, #5
300045b8:	0a000005 	beq	300045d4 <OSFlagNameSet+0xac>
        OS_EXIT_CRITICAL();
300045bc:	e51b0008 	ldr	r0, [fp, #-8]
300045c0:	ebffeedc 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_EVENT_TYPE;
300045c4:	e51b3018 	ldr	r3, [fp, #-24]
300045c8:	e3a02001 	mov	r2, #1
300045cc:	e5c32000 	strb	r2, [r3]
        return;
300045d0:	ea000008 	b	300045f8 <OSFlagNameSet+0xd0>
    }
    pgrp->OSFlagName = pname;
300045d4:	e51b3010 	ldr	r3, [fp, #-16]
300045d8:	e51b2014 	ldr	r2, [fp, #-20]
300045dc:	e583200c 	str	r2, [r3, #12]
    OS_EXIT_CRITICAL();
300045e0:	e51b0008 	ldr	r0, [fp, #-8]
300045e4:	ebffeed3 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_EVENT_NAME_SET(pgrp, pname);
    *perr            = OS_ERR_NONE;
300045e8:	e51b3018 	ldr	r3, [fp, #-24]
300045ec:	e3a02000 	mov	r2, #0
300045f0:	e5c32000 	strb	r2, [r3]
    return;
300045f4:	e1a00000 	nop			; (mov r0, r0)
}
300045f8:	e24bd004 	sub	sp, fp, #4
300045fc:	e8bd4800 	pop	{fp, lr}
30004600:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30004604:	30017bdc 	.word	0x30017bdc

30004608 <OSFlagPend>:
OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         wait_type,
                      INT32U        timeout,
                      INT8U        *perr)
{
30004608:	e92d4800 	push	{fp, lr}
3000460c:	e28db004 	add	fp, sp, #4
30004610:	e24dd038 	sub	sp, sp, #56	; 0x38
30004614:	e50b0028 	str	r0, [fp, #-40]	; 0x28
30004618:	e50b3030 	str	r3, [fp, #-48]	; 0x30
3000461c:	e14b12ba 	strh	r1, [fp, #-42]	; 0xffffffd6
30004620:	e1a03002 	mov	r3, r2
30004624:	e54b302b 	strb	r3, [fp, #-43]	; 0x2b
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
30004628:	e3a03000 	mov	r3, #0
3000462c:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
30004630:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004634:	e3530000 	cmp	r3, #0
30004638:	1a000004 	bne	30004650 <OSFlagPend+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
3000463c:	e59b3004 	ldr	r3, [fp, #4]
30004640:	e3a0206e 	mov	r2, #110	; 0x6e
30004644:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
30004648:	e3a03000 	mov	r3, #0
3000464c:	ea000143 	b	30004b60 <OSFlagPend+0x558>
    }
#endif

    OS_TRACE_FLAG_PEND_ENTER(pgrp, flags, timeout, wait_type);

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
30004650:	e59f3518 	ldr	r3, [pc, #1304]	; 30004b70 <OSFlagPend+0x568>
30004654:	e5d33000 	ldrb	r3, [r3]
30004658:	e3530000 	cmp	r3, #0
3000465c:	0a000004 	beq	30004674 <OSFlagPend+0x6c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
30004660:	e59b3004 	ldr	r3, [fp, #4]
30004664:	e3a02002 	mov	r2, #2
30004668:	e5c32000 	strb	r2, [r3]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
3000466c:	e3a03000 	mov	r3, #0
30004670:	ea00013a 	b	30004b60 <OSFlagPend+0x558>
    }
    if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
30004674:	e59f34f8 	ldr	r3, [pc, #1272]	; 30004b74 <OSFlagPend+0x56c>
30004678:	e5d33000 	ldrb	r3, [r3]
3000467c:	e3530000 	cmp	r3, #0
30004680:	0a000004 	beq	30004698 <OSFlagPend+0x90>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
30004684:	e59b3004 	ldr	r3, [fp, #4]
30004688:	e3a0200d 	mov	r2, #13
3000468c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
30004690:	e3a03000 	mov	r3, #0
30004694:	ea000131 	b	30004b60 <OSFlagPend+0x558>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
30004698:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
3000469c:	e5d33000 	ldrb	r3, [r3]
300046a0:	e3530005 	cmp	r3, #5
300046a4:	0a000004 	beq	300046bc <OSFlagPend+0xb4>
        *perr = OS_ERR_EVENT_TYPE;
300046a8:	e59b3004 	ldr	r3, [fp, #4]
300046ac:	e3a02001 	mov	r2, #1
300046b0:	e5c32000 	strb	r2, [r3]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
300046b4:	e3a03000 	mov	r3, #0
300046b8:	ea000128 	b	30004b60 <OSFlagPend+0x558>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
300046bc:	e55b302b 	ldrb	r3, [fp, #-43]	; 0x2b
300046c0:	e3c3307f 	bic	r3, r3, #127	; 0x7f
300046c4:	e54b300b 	strb	r3, [fp, #-11]
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
300046c8:	e55b300b 	ldrb	r3, [fp, #-11]
300046cc:	e3530000 	cmp	r3, #0
300046d0:	0a000005 	beq	300046ec <OSFlagPend+0xe4>
        wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
300046d4:	e55b302b 	ldrb	r3, [fp, #-43]	; 0x2b
300046d8:	e203307f 	and	r3, r3, #127	; 0x7f
300046dc:	e54b302b 	strb	r3, [fp, #-43]	; 0x2b
        consume    = OS_TRUE;
300046e0:	e3a03001 	mov	r3, #1
300046e4:	e54b3009 	strb	r3, [fp, #-9]
300046e8:	ea000001 	b	300046f4 <OSFlagPend+0xec>
    } else {
        consume    = OS_FALSE;
300046ec:	e3a03000 	mov	r3, #0
300046f0:	e54b3009 	strb	r3, [fp, #-9]
    }

    OS_ENTER_CRITICAL();
300046f4:	ebffee87 	bl	30000118 <OS_CPU_SaveSR>
300046f8:	e1a03000 	mov	r3, r0
300046fc:	e50b3008 	str	r3, [fp, #-8]
    switch (wait_type) {
30004700:	e55b302b 	ldrb	r3, [fp, #-43]	; 0x2b
30004704:	e3530003 	cmp	r3, #3
30004708:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
3000470c:	ea0000b1 	b	300049d8 <OSFlagPend+0x3d0>
30004710:	3000487c 	.word	0x3000487c
30004714:	3000492c 	.word	0x3000492c
30004718:	30004720 	.word	0x30004720
3000471c:	300047d0 	.word	0x300047d0
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
30004720:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004724:	e1d320b8 	ldrh	r2, [r3, #8]
30004728:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
3000472c:	e0023003 	and	r3, r2, r3
30004730:	e14b30be 	strh	r3, [fp, #-14]
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
30004734:	e15b20be 	ldrh	r2, [fp, #-14]
30004738:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
3000473c:	e1520003 	cmp	r2, r3
30004740:	1a000018 	bne	300047a8 <OSFlagPend+0x1a0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
30004744:	e55b3009 	ldrb	r3, [fp, #-9]
30004748:	e3530001 	cmp	r3, #1
3000474c:	1a00000a 	bne	3000477c <OSFlagPend+0x174>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted    */
30004750:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004754:	e1d320b8 	ldrh	r2, [r3, #8]
30004758:	e15b30be 	ldrh	r3, [fp, #-14]
3000475c:	e1e03003 	mvn	r3, r3
30004760:	e1a03803 	lsl	r3, r3, #16
30004764:	e1a03823 	lsr	r3, r3, #16
30004768:	e0023003 	and	r3, r2, r3
3000476c:	e1a03803 	lsl	r3, r3, #16
30004770:	e1a02823 	lsr	r2, r3, #16
30004774:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004778:	e1c320b8 	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
3000477c:	e59f33f4 	ldr	r3, [pc, #1012]	; 30004b78 <OSFlagPend+0x570>
30004780:	e5933000 	ldr	r3, [r3]
30004784:	e15b20be 	ldrh	r2, [fp, #-14]
30004788:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
3000478c:	e51b0008 	ldr	r0, [fp, #-8]
30004790:	ebffee68 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                   = OS_ERR_NONE;
30004794:	e59b3004 	ldr	r3, [fp, #4]
30004798:	e3a02000 	mov	r2, #0
3000479c:	e5c32000 	strb	r2, [r3]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
300047a0:	e15b30be 	ldrh	r3, [fp, #-14]
300047a4:	ea0000ed 	b	30004b60 <OSFlagPend+0x558>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
300047a8:	e24b1024 	sub	r1, fp, #36	; 0x24
300047ac:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
300047b0:	e55b302b 	ldrb	r3, [fp, #-43]	; 0x2b
300047b4:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
300047b8:	e58d0000 	str	r0, [sp]
300047bc:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
300047c0:	eb00020c 	bl	30004ff8 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
300047c4:	e51b0008 	ldr	r0, [fp, #-8]
300047c8:	ebffee5a 	bl	30000138 <OS_CPU_RestoreSR>
             }
             break;
300047cc:	ea00008a 	b	300049fc <OSFlagPend+0x3f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
300047d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
300047d4:	e1d320b8 	ldrh	r2, [r3, #8]
300047d8:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
300047dc:	e0023003 	and	r3, r2, r3
300047e0:	e14b30be 	strh	r3, [fp, #-14]
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
300047e4:	e15b30be 	ldrh	r3, [fp, #-14]
300047e8:	e3530000 	cmp	r3, #0
300047ec:	0a000018 	beq	30004854 <OSFlagPend+0x24c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
300047f0:	e55b3009 	ldrb	r3, [fp, #-9]
300047f4:	e3530001 	cmp	r3, #1
300047f8:	1a00000a 	bne	30004828 <OSFlagPend+0x220>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we got */
300047fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004800:	e1d320b8 	ldrh	r2, [r3, #8]
30004804:	e15b30be 	ldrh	r3, [fp, #-14]
30004808:	e1e03003 	mvn	r3, r3
3000480c:	e1a03803 	lsl	r3, r3, #16
30004810:	e1a03823 	lsr	r3, r3, #16
30004814:	e0023003 	and	r3, r2, r3
30004818:	e1a03803 	lsl	r3, r3, #16
3000481c:	e1a02823 	lsr	r2, r3, #16
30004820:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004824:	e1c320b8 	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
30004828:	e59f3348 	ldr	r3, [pc, #840]	; 30004b78 <OSFlagPend+0x570>
3000482c:	e5933000 	ldr	r3, [r3]
30004830:	e15b20be 	ldrh	r2, [fp, #-14]
30004834:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
30004838:	e51b0008 	ldr	r0, [fp, #-8]
3000483c:	ebffee3d 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                   = OS_ERR_NONE;
30004840:	e59b3004 	ldr	r3, [fp, #4]
30004844:	e3a02000 	mov	r2, #0
30004848:	e5c32000 	strb	r2, [r3]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
3000484c:	e15b30be 	ldrh	r3, [fp, #-14]
30004850:	ea0000c2 	b	30004b60 <OSFlagPend+0x558>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
30004854:	e24b1024 	sub	r1, fp, #36	; 0x24
30004858:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
3000485c:	e55b302b 	ldrb	r3, [fp, #-43]	; 0x2b
30004860:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
30004864:	e58d0000 	str	r0, [sp]
30004868:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
3000486c:	eb0001e1 	bl	30004ff8 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
30004870:	e51b0008 	ldr	r0, [fp, #-8]
30004874:	ebffee2f 	bl	30000138 <OS_CPU_RestoreSR>
             }
             break;
30004878:	ea00005f 	b	300049fc <OSFlagPend+0x3f4>

#if OS_FLAG_WAIT_CLR_EN > 0u
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
3000487c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004880:	e1d330b8 	ldrh	r3, [r3, #8]
30004884:	e1e03003 	mvn	r3, r3
30004888:	e1a03803 	lsl	r3, r3, #16
3000488c:	e1a02823 	lsr	r2, r3, #16
30004890:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
30004894:	e0023003 	and	r3, r2, r3
30004898:	e14b30be 	strh	r3, [fp, #-14]
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
3000489c:	e15b20be 	ldrh	r2, [fp, #-14]
300048a0:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
300048a4:	e1520003 	cmp	r2, r3
300048a8:	1a000015 	bne	30004904 <OSFlagPend+0x2fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
300048ac:	e55b3009 	ldrb	r3, [fp, #-9]
300048b0:	e3530001 	cmp	r3, #1
300048b4:	1a000007 	bne	300048d8 <OSFlagPend+0x2d0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
300048b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
300048bc:	e1d320b8 	ldrh	r2, [r3, #8]
300048c0:	e15b30be 	ldrh	r3, [fp, #-14]
300048c4:	e1823003 	orr	r3, r2, r3
300048c8:	e1a03803 	lsl	r3, r3, #16
300048cc:	e1a02823 	lsr	r2, r3, #16
300048d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
300048d4:	e1c320b8 	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
300048d8:	e59f3298 	ldr	r3, [pc, #664]	; 30004b78 <OSFlagPend+0x570>
300048dc:	e5933000 	ldr	r3, [r3]
300048e0:	e15b20be 	ldrh	r2, [fp, #-14]
300048e4:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
300048e8:	e51b0008 	ldr	r0, [fp, #-8]
300048ec:	ebffee11 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                   = OS_ERR_NONE;
300048f0:	e59b3004 	ldr	r3, [fp, #4]
300048f4:	e3a02000 	mov	r2, #0
300048f8:	e5c32000 	strb	r2, [r3]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
300048fc:	e15b30be 	ldrh	r3, [fp, #-14]
30004900:	ea000096 	b	30004b60 <OSFlagPend+0x558>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
30004904:	e24b1024 	sub	r1, fp, #36	; 0x24
30004908:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
3000490c:	e55b302b 	ldrb	r3, [fp, #-43]	; 0x2b
30004910:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
30004914:	e58d0000 	str	r0, [sp]
30004918:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
3000491c:	eb0001b5 	bl	30004ff8 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
30004920:	e51b0008 	ldr	r0, [fp, #-8]
30004924:	ebffee03 	bl	30000138 <OS_CPU_RestoreSR>
             }
             break;
30004928:	ea000033 	b	300049fc <OSFlagPend+0x3f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
3000492c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004930:	e1d330b8 	ldrh	r3, [r3, #8]
30004934:	e1e03003 	mvn	r3, r3
30004938:	e1a03803 	lsl	r3, r3, #16
3000493c:	e1a02823 	lsr	r2, r3, #16
30004940:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
30004944:	e0023003 	and	r3, r2, r3
30004948:	e14b30be 	strh	r3, [fp, #-14]
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
3000494c:	e15b30be 	ldrh	r3, [fp, #-14]
30004950:	e3530000 	cmp	r3, #0
30004954:	0a000015 	beq	300049b0 <OSFlagPend+0x3a8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
30004958:	e55b3009 	ldrb	r3, [fp, #-9]
3000495c:	e3530001 	cmp	r3, #1
30004960:	1a000007 	bne	30004984 <OSFlagPend+0x37c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
30004964:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004968:	e1d320b8 	ldrh	r2, [r3, #8]
3000496c:	e15b30be 	ldrh	r3, [fp, #-14]
30004970:	e1823003 	orr	r3, r2, r3
30004974:	e1a03803 	lsl	r3, r3, #16
30004978:	e1a02823 	lsr	r2, r3, #16
3000497c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004980:	e1c320b8 	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
30004984:	e59f31ec 	ldr	r3, [pc, #492]	; 30004b78 <OSFlagPend+0x570>
30004988:	e5933000 	ldr	r3, [r3]
3000498c:	e15b20be 	ldrh	r2, [fp, #-14]
30004990:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
30004994:	e51b0008 	ldr	r0, [fp, #-8]
30004998:	ebffede6 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                   = OS_ERR_NONE;
3000499c:	e59b3004 	ldr	r3, [fp, #4]
300049a0:	e3a02000 	mov	r2, #0
300049a4:	e5c32000 	strb	r2, [r3]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
300049a8:	e15b30be 	ldrh	r3, [fp, #-14]
300049ac:	ea00006b 	b	30004b60 <OSFlagPend+0x558>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
300049b0:	e24b1024 	sub	r1, fp, #36	; 0x24
300049b4:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
300049b8:	e55b302b 	ldrb	r3, [fp, #-43]	; 0x2b
300049bc:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
300049c0:	e58d0000 	str	r0, [sp]
300049c4:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
300049c8:	eb00018a 	bl	30004ff8 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
300049cc:	e51b0008 	ldr	r0, [fp, #-8]
300049d0:	ebffedd8 	bl	30000138 <OS_CPU_RestoreSR>
             }
             break;
300049d4:	ea000008 	b	300049fc <OSFlagPend+0x3f4>
#endif

        default:
             OS_EXIT_CRITICAL();
300049d8:	e51b0008 	ldr	r0, [fp, #-8]
300049dc:	ebffedd5 	bl	30000138 <OS_CPU_RestoreSR>
             flags_rdy = (OS_FLAGS)0;
300049e0:	e3a03000 	mov	r3, #0
300049e4:	e14b30be 	strh	r3, [fp, #-14]
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
300049e8:	e59b3004 	ldr	r3, [fp, #4]
300049ec:	e3a0206f 	mov	r2, #111	; 0x6f
300049f0:	e5c32000 	strb	r2, [r3]
             OS_TRACE_FLAG_PEND_EXIT(*perr);
             return (flags_rdy);
300049f4:	e15b30be 	ldrh	r3, [fp, #-14]
300049f8:	ea000058 	b	30004b60 <OSFlagPend+0x558>
    }

    OS_Sched();                                            /* Find next HPT ready to run               */
300049fc:	ebfffb11 	bl	30003648 <OS_Sched>
    OS_ENTER_CRITICAL();
30004a00:	ebffedc4 	bl	30000118 <OS_CPU_SaveSR>
30004a04:	e1a03000 	mov	r3, r0
30004a08:	e50b3008 	str	r3, [fp, #-8]
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
30004a0c:	e59f3164 	ldr	r3, [pc, #356]	; 30004b78 <OSFlagPend+0x570>
30004a10:	e5933000 	ldr	r3, [r3]
30004a14:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
30004a18:	e3530000 	cmp	r3, #0
30004a1c:	0a00001e 	beq	30004a9c <OSFlagPend+0x494>
        pend_stat                = OSTCBCur->OSTCBStatPend;
30004a20:	e59f3150 	ldr	r3, [pc, #336]	; 30004b78 <OSFlagPend+0x570>
30004a24:	e5933000 	ldr	r3, [r3]
30004a28:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
30004a2c:	e54b300a 	strb	r3, [fp, #-10]
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
30004a30:	e59f3140 	ldr	r3, [pc, #320]	; 30004b78 <OSFlagPend+0x570>
30004a34:	e5933000 	ldr	r3, [r3]
30004a38:	e3a02000 	mov	r2, #0
30004a3c:	e5c32039 	strb	r2, [r3, #57]	; 0x39
        OS_FlagUnlink(&node);
30004a40:	e24b3024 	sub	r3, fp, #36	; 0x24
30004a44:	e1a00003 	mov	r0, r3
30004a48:	eb000247 	bl	3000536c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
30004a4c:	e59f3124 	ldr	r3, [pc, #292]	; 30004b78 <OSFlagPend+0x570>
30004a50:	e5933000 	ldr	r3, [r3]
30004a54:	e3a02000 	mov	r2, #0
30004a58:	e5c32038 	strb	r2, [r3, #56]	; 0x38
        OS_EXIT_CRITICAL();
30004a5c:	e51b0008 	ldr	r0, [fp, #-8]
30004a60:	ebffedb4 	bl	30000138 <OS_CPU_RestoreSR>
        flags_rdy                = (OS_FLAGS)0;
30004a64:	e3a03000 	mov	r3, #0
30004a68:	e14b30be 	strh	r3, [fp, #-14]
        switch (pend_stat) {
30004a6c:	e55b300a 	ldrb	r3, [fp, #-10]
30004a70:	e3530002 	cmp	r3, #2
30004a74:	1a000003 	bne	30004a88 <OSFlagPend+0x480>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                /* Indicate that we aborted   waiting       */
30004a78:	e59b3004 	ldr	r3, [fp, #4]
30004a7c:	e3a0200e 	mov	r2, #14
30004a80:	e5c32000 	strb	r2, [r3]
                 break;
30004a84:	ea000002 	b	30004a94 <OSFlagPend+0x48c>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                   /* Indicate that we timed-out waiting       */
30004a88:	e59b3004 	ldr	r3, [fp, #4]
30004a8c:	e3a0200a 	mov	r2, #10
30004a90:	e5c32000 	strb	r2, [r3]
                 break;
        }
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return (flags_rdy);
30004a94:	e15b30be 	ldrh	r3, [fp, #-14]
30004a98:	ea000030 	b	30004b60 <OSFlagPend+0x558>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
30004a9c:	e59f30d4 	ldr	r3, [pc, #212]	; 30004b78 <OSFlagPend+0x570>
30004aa0:	e5933000 	ldr	r3, [r3]
30004aa4:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
30004aa8:	e14b30be 	strh	r3, [fp, #-14]
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
30004aac:	e55b3009 	ldrb	r3, [fp, #-9]
30004ab0:	e3530001 	cmp	r3, #1
30004ab4:	1a000023 	bne	30004b48 <OSFlagPend+0x540>
        switch (wait_type) {
30004ab8:	e55b302b 	ldrb	r3, [fp, #-43]	; 0x2b
30004abc:	e3530003 	cmp	r3, #3
30004ac0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
30004ac4:	ea000018 	b	30004b2c <OSFlagPend+0x524>
30004ac8:	30004b08 	.word	0x30004b08
30004acc:	30004b08 	.word	0x30004b08
30004ad0:	30004ad8 	.word	0x30004ad8
30004ad4:	30004ad8 	.word	0x30004ad8
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;
30004ad8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004adc:	e1d320b8 	ldrh	r2, [r3, #8]
30004ae0:	e15b30be 	ldrh	r3, [fp, #-14]
30004ae4:	e1e03003 	mvn	r3, r3
30004ae8:	e1a03803 	lsl	r3, r3, #16
30004aec:	e1a03823 	lsr	r3, r3, #16
30004af0:	e0023003 	and	r3, r2, r3
30004af4:	e1a03803 	lsl	r3, r3, #16
30004af8:	e1a02823 	lsr	r2, r3, #16
30004afc:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004b00:	e1c320b8 	strh	r2, [r3, #8]
                 break;
30004b04:	ea00000f 	b	30004b48 <OSFlagPend+0x540>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
30004b08:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004b0c:	e1d320b8 	ldrh	r2, [r3, #8]
30004b10:	e15b30be 	ldrh	r3, [fp, #-14]
30004b14:	e1823003 	orr	r3, r2, r3
30004b18:	e1a03803 	lsl	r3, r3, #16
30004b1c:	e1a02823 	lsr	r2, r3, #16
30004b20:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30004b24:	e1c320b8 	strh	r2, [r3, #8]
                 break;
30004b28:	ea000006 	b	30004b48 <OSFlagPend+0x540>
#endif
            default:
                 OS_EXIT_CRITICAL();
30004b2c:	e51b0008 	ldr	r0, [fp, #-8]
30004b30:	ebffed80 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
30004b34:	e59b3004 	ldr	r3, [fp, #4]
30004b38:	e3a0206f 	mov	r2, #111	; 0x6f
30004b3c:	e5c32000 	strb	r2, [r3]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return ((OS_FLAGS)0);
30004b40:	e3a03000 	mov	r3, #0
30004b44:	ea000005 	b	30004b60 <OSFlagPend+0x558>
        }
    }
    OS_EXIT_CRITICAL();
30004b48:	e51b0008 	ldr	r0, [fp, #-8]
30004b4c:	ebffed79 	bl	30000138 <OS_CPU_RestoreSR>
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
30004b50:	e59b3004 	ldr	r3, [fp, #4]
30004b54:	e3a02000 	mov	r2, #0
30004b58:	e5c32000 	strb	r2, [r3]
    OS_TRACE_FLAG_PEND_EXIT(*perr);
    return (flags_rdy);
30004b5c:	e15b30be 	ldrh	r3, [fp, #-14]
}
30004b60:	e1a00003 	mov	r0, r3
30004b64:	e24bd004 	sub	sp, fp, #4
30004b68:	e8bd4800 	pop	{fp, lr}
30004b6c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30004b70:	30017bdc 	.word	0x30017bdc
30004b74:	300173e8 	.word	0x300173e8
30004b78:	30017be0 	.word	0x30017be0

30004b7c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
30004b7c:	e92d4800 	push	{fp, lr}
30004b80:	e28db004 	add	fp, sp, #4
30004b84:	e24dd008 	sub	sp, sp, #8
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
30004b88:	e3a03000 	mov	r3, #0
30004b8c:	e50b3008 	str	r3, [fp, #-8]
#endif



    OS_ENTER_CRITICAL();
30004b90:	ebffed60 	bl	30000118 <OS_CPU_SaveSR>
30004b94:	e1a03000 	mov	r3, r0
30004b98:	e50b3008 	str	r3, [fp, #-8]
    flags = OSTCBCur->OSTCBFlagsRdy;
30004b9c:	e59f3024 	ldr	r3, [pc, #36]	; 30004bc8 <OSFlagPendGetFlagsRdy+0x4c>
30004ba0:	e5933000 	ldr	r3, [r3]
30004ba4:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
30004ba8:	e14b30ba 	strh	r3, [fp, #-10]
    OS_EXIT_CRITICAL();
30004bac:	e51b0008 	ldr	r0, [fp, #-8]
30004bb0:	ebffed60 	bl	30000138 <OS_CPU_RestoreSR>
    return (flags);
30004bb4:	e15b30ba 	ldrh	r3, [fp, #-10]
}
30004bb8:	e1a00003 	mov	r0, r3
30004bbc:	e24bd004 	sub	sp, fp, #4
30004bc0:	e8bd4800 	pop	{fp, lr}
30004bc4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30004bc8:	30017be0 	.word	0x30017be0

30004bcc <OSFlagPost>:
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         opt,
                      INT8U        *perr)
{
30004bcc:	e92d4800 	push	{fp, lr}
30004bd0:	e28db004 	add	fp, sp, #4
30004bd4:	e24dd020 	sub	sp, sp, #32
30004bd8:	e50b0018 	str	r0, [fp, #-24]
30004bdc:	e50b3020 	str	r3, [fp, #-32]
30004be0:	e14b11ba 	strh	r1, [fp, #-26]	; 0xffffffe6
30004be4:	e1a03002 	mov	r3, r2
30004be8:	e54b301b 	strb	r3, [fp, #-27]
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0u;
30004bec:	e3a03000 	mov	r3, #0
30004bf0:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
30004bf4:	e51b3018 	ldr	r3, [fp, #-24]
30004bf8:	e3530000 	cmp	r3, #0
30004bfc:	1a000004 	bne	30004c14 <OSFlagPost+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
30004c00:	e51b3020 	ldr	r3, [fp, #-32]
30004c04:	e3a0206e 	mov	r2, #110	; 0x6e
30004c08:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
30004c0c:	e3a03000 	mov	r3, #0
30004c10:	ea0000cc 	b	30004f48 <OSFlagPost+0x37c>
    }
#endif

    OS_TRACE_FLAG_POST_ENTER(pgrp, flags, opt);

    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
30004c14:	e51b3018 	ldr	r3, [fp, #-24]
30004c18:	e5d33000 	ldrb	r3, [r3]
30004c1c:	e3530005 	cmp	r3, #5
30004c20:	0a000004 	beq	30004c38 <OSFlagPost+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
30004c24:	e51b3020 	ldr	r3, [fp, #-32]
30004c28:	e3a02001 	mov	r2, #1
30004c2c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_FLAG_POST_EXIT(*perr);
        return ((OS_FLAGS)0);
30004c30:	e3a03000 	mov	r3, #0
30004c34:	ea0000c3 	b	30004f48 <OSFlagPost+0x37c>
    }

    OS_ENTER_CRITICAL();
30004c38:	ebffed36 	bl	30000118 <OS_CPU_SaveSR>
30004c3c:	e1a03000 	mov	r3, r0
30004c40:	e50b3008 	str	r3, [fp, #-8]
    switch (opt) {
30004c44:	e55b301b 	ldrb	r3, [fp, #-27]
30004c48:	e3530000 	cmp	r3, #0
30004c4c:	0a000002 	beq	30004c5c <OSFlagPost+0x90>
30004c50:	e3530001 	cmp	r3, #1
30004c54:	0a00000c 	beq	30004c8c <OSFlagPost+0xc0>
30004c58:	ea000014 	b	30004cb0 <OSFlagPost+0xe4>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= (OS_FLAGS)~flags;  /* Clear the flags specified in the group         */
30004c5c:	e51b3018 	ldr	r3, [fp, #-24]
30004c60:	e1d320b8 	ldrh	r2, [r3, #8]
30004c64:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
30004c68:	e1e03003 	mvn	r3, r3
30004c6c:	e1a03803 	lsl	r3, r3, #16
30004c70:	e1a03823 	lsr	r3, r3, #16
30004c74:	e0023003 	and	r3, r2, r3
30004c78:	e1a03803 	lsl	r3, r3, #16
30004c7c:	e1a02823 	lsr	r2, r3, #16
30004c80:	e51b3018 	ldr	r3, [fp, #-24]
30004c84:	e1c320b8 	strh	r2, [r3, #8]
             break;
30004c88:	ea00000f 	b	30004ccc <OSFlagPost+0x100>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
30004c8c:	e51b3018 	ldr	r3, [fp, #-24]
30004c90:	e1d320b8 	ldrh	r2, [r3, #8]
30004c94:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
30004c98:	e1823003 	orr	r3, r2, r3
30004c9c:	e1a03803 	lsl	r3, r3, #16
30004ca0:	e1a02823 	lsr	r2, r3, #16
30004ca4:	e51b3018 	ldr	r3, [fp, #-24]
30004ca8:	e1c320b8 	strh	r2, [r3, #8]
             break;
30004cac:	ea000006 	b	30004ccc <OSFlagPost+0x100>

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
30004cb0:	e51b0008 	ldr	r0, [fp, #-8]
30004cb4:	ebffed1f 	bl	30000138 <OS_CPU_RestoreSR>
             *perr = OS_ERR_FLAG_INVALID_OPT;
30004cb8:	e51b3020 	ldr	r3, [fp, #-32]
30004cbc:	e3a02071 	mov	r2, #113	; 0x71
30004cc0:	e5c32000 	strb	r2, [r3]
             OS_TRACE_FLAG_POST_EXIT(*perr);
             return ((OS_FLAGS)0);
30004cc4:	e3a03000 	mov	r3, #0
30004cc8:	ea00009e 	b	30004f48 <OSFlagPost+0x37c>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
30004ccc:	e3a03000 	mov	r3, #0
30004cd0:	e54b300f 	strb	r3, [fp, #-15]
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
30004cd4:	e51b3018 	ldr	r3, [fp, #-24]
30004cd8:	e5933004 	ldr	r3, [r3, #4]
30004cdc:	e50b3014 	str	r3, [fp, #-20]
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
30004ce0:	ea000083 	b	30004ef4 <OSFlagPost+0x328>
        switch (pnode->OSFlagNodeWaitType) {
30004ce4:	e51b3014 	ldr	r3, [fp, #-20]
30004ce8:	e5d33012 	ldrb	r3, [r3, #18]
30004cec:	e3530003 	cmp	r3, #3
30004cf0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
30004cf4:	ea000065 	b	30004e90 <OSFlagPost+0x2c4>
30004cf8:	30004dc0 	.word	0x30004dc0
30004cfc:	30004e2c 	.word	0x30004e2c
30004d00:	30004d08 	.word	0x30004d08
30004d04:	30004d68 	.word	0x30004d68
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
30004d08:	e51b3018 	ldr	r3, [fp, #-24]
30004d0c:	e1d320b8 	ldrh	r2, [r3, #8]
30004d10:	e51b3014 	ldr	r3, [fp, #-20]
30004d14:	e1d331b0 	ldrh	r3, [r3, #16]
30004d18:	e0023003 	and	r3, r2, r3
30004d1c:	e14b30bc 	strh	r3, [fp, #-12]
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
30004d20:	e51b3014 	ldr	r3, [fp, #-20]
30004d24:	e1d331b0 	ldrh	r3, [r3, #16]
30004d28:	e15b20bc 	ldrh	r2, [fp, #-12]
30004d2c:	e1520003 	cmp	r2, r3
30004d30:	1a00005d 	bne	30004eac <OSFlagPost+0x2e0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
30004d34:	e15b30bc 	ldrh	r3, [fp, #-12]
30004d38:	e51b0014 	ldr	r0, [fp, #-20]
30004d3c:	e1a01003 	mov	r1, r3
30004d40:	e3a02000 	mov	r2, #0
30004d44:	eb00014a 	bl	30005274 <OS_FlagTaskRdy>
30004d48:	e1a03000 	mov	r3, r0
30004d4c:	e54b3009 	strb	r3, [fp, #-9]
                     if (rdy == OS_TRUE) {
30004d50:	e55b3009 	ldrb	r3, [fp, #-9]
30004d54:	e3530001 	cmp	r3, #1
30004d58:	1a000055 	bne	30004eb4 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
30004d5c:	e3a03001 	mov	r3, #1
30004d60:	e54b300f 	strb	r3, [fp, #-15]
                     }
                 }
                 break;
30004d64:	ea00005f 	b	30004ee8 <OSFlagPost+0x31c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
30004d68:	e51b3018 	ldr	r3, [fp, #-24]
30004d6c:	e1d320b8 	ldrh	r2, [r3, #8]
30004d70:	e51b3014 	ldr	r3, [fp, #-20]
30004d74:	e1d331b0 	ldrh	r3, [r3, #16]
30004d78:	e0023003 	and	r3, r2, r3
30004d7c:	e14b30bc 	strh	r3, [fp, #-12]
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
30004d80:	e15b30bc 	ldrh	r3, [fp, #-12]
30004d84:	e3530000 	cmp	r3, #0
30004d88:	0a00004b 	beq	30004ebc <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
30004d8c:	e15b30bc 	ldrh	r3, [fp, #-12]
30004d90:	e51b0014 	ldr	r0, [fp, #-20]
30004d94:	e1a01003 	mov	r1, r3
30004d98:	e3a02000 	mov	r2, #0
30004d9c:	eb000134 	bl	30005274 <OS_FlagTaskRdy>
30004da0:	e1a03000 	mov	r3, r0
30004da4:	e54b3009 	strb	r3, [fp, #-9]
                     if (rdy == OS_TRUE) {
30004da8:	e55b3009 	ldrb	r3, [fp, #-9]
30004dac:	e3530001 	cmp	r3, #1
30004db0:	1a000043 	bne	30004ec4 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
30004db4:	e3a03001 	mov	r3, #1
30004db8:	e54b300f 	strb	r3, [fp, #-15]
                     }
                 }
                 break;
30004dbc:	ea000049 	b	30004ee8 <OSFlagPost+0x31c>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
30004dc0:	e51b3018 	ldr	r3, [fp, #-24]
30004dc4:	e1d330b8 	ldrh	r3, [r3, #8]
30004dc8:	e1e03003 	mvn	r3, r3
30004dcc:	e1a03803 	lsl	r3, r3, #16
30004dd0:	e1a02823 	lsr	r2, r3, #16
30004dd4:	e51b3014 	ldr	r3, [fp, #-20]
30004dd8:	e1d331b0 	ldrh	r3, [r3, #16]
30004ddc:	e0023003 	and	r3, r2, r3
30004de0:	e14b30bc 	strh	r3, [fp, #-12]
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
30004de4:	e51b3014 	ldr	r3, [fp, #-20]
30004de8:	e1d331b0 	ldrh	r3, [r3, #16]
30004dec:	e15b20bc 	ldrh	r2, [fp, #-12]
30004df0:	e1520003 	cmp	r2, r3
30004df4:	1a000034 	bne	30004ecc <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
30004df8:	e15b30bc 	ldrh	r3, [fp, #-12]
30004dfc:	e51b0014 	ldr	r0, [fp, #-20]
30004e00:	e1a01003 	mov	r1, r3
30004e04:	e3a02000 	mov	r2, #0
30004e08:	eb000119 	bl	30005274 <OS_FlagTaskRdy>
30004e0c:	e1a03000 	mov	r3, r0
30004e10:	e54b3009 	strb	r3, [fp, #-9]
                     if (rdy == OS_TRUE) {
30004e14:	e55b3009 	ldrb	r3, [fp, #-9]
30004e18:	e3530001 	cmp	r3, #1
30004e1c:	1a00002c 	bne	30004ed4 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
30004e20:	e3a03001 	mov	r3, #1
30004e24:	e54b300f 	strb	r3, [fp, #-15]
                     }
                 }
                 break;
30004e28:	ea00002e 	b	30004ee8 <OSFlagPost+0x31c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
30004e2c:	e51b3018 	ldr	r3, [fp, #-24]
30004e30:	e1d330b8 	ldrh	r3, [r3, #8]
30004e34:	e1e03003 	mvn	r3, r3
30004e38:	e1a03803 	lsl	r3, r3, #16
30004e3c:	e1a02823 	lsr	r2, r3, #16
30004e40:	e51b3014 	ldr	r3, [fp, #-20]
30004e44:	e1d331b0 	ldrh	r3, [r3, #16]
30004e48:	e0023003 	and	r3, r2, r3
30004e4c:	e14b30bc 	strh	r3, [fp, #-12]
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
30004e50:	e15b30bc 	ldrh	r3, [fp, #-12]
30004e54:	e3530000 	cmp	r3, #0
30004e58:	0a00001f 	beq	30004edc <OSFlagPost+0x310>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
30004e5c:	e15b30bc 	ldrh	r3, [fp, #-12]
30004e60:	e51b0014 	ldr	r0, [fp, #-20]
30004e64:	e1a01003 	mov	r1, r3
30004e68:	e3a02000 	mov	r2, #0
30004e6c:	eb000100 	bl	30005274 <OS_FlagTaskRdy>
30004e70:	e1a03000 	mov	r3, r0
30004e74:	e54b3009 	strb	r3, [fp, #-9]
                     if (rdy == OS_TRUE) {
30004e78:	e55b3009 	ldrb	r3, [fp, #-9]
30004e7c:	e3530001 	cmp	r3, #1
30004e80:	1a000017 	bne	30004ee4 <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
30004e84:	e3a03001 	mov	r3, #1
30004e88:	e54b300f 	strb	r3, [fp, #-15]
                     }
                 }
                 break;
30004e8c:	ea000015 	b	30004ee8 <OSFlagPost+0x31c>
#endif
            default:
                 OS_EXIT_CRITICAL();
30004e90:	e51b0008 	ldr	r0, [fp, #-8]
30004e94:	ebffeca7 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
30004e98:	e51b3020 	ldr	r3, [fp, #-32]
30004e9c:	e3a0206f 	mov	r2, #111	; 0x6f
30004ea0:	e5c32000 	strb	r2, [r3]
                 OS_TRACE_FLAG_POST_EXIT(*perr);
                 return ((OS_FLAGS)0);
30004ea4:	e3a03000 	mov	r3, #0
30004ea8:	ea000026 	b	30004f48 <OSFlagPost+0x37c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
30004eac:	e1a00000 	nop			; (mov r0, r0)
30004eb0:	ea00000c 	b	30004ee8 <OSFlagPost+0x31c>
30004eb4:	e1a00000 	nop			; (mov r0, r0)
30004eb8:	ea00000a 	b	30004ee8 <OSFlagPost+0x31c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
30004ebc:	e1a00000 	nop			; (mov r0, r0)
30004ec0:	ea000008 	b	30004ee8 <OSFlagPost+0x31c>
30004ec4:	e1a00000 	nop			; (mov r0, r0)
30004ec8:	ea000006 	b	30004ee8 <OSFlagPost+0x31c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
30004ecc:	e1a00000 	nop			; (mov r0, r0)
30004ed0:	ea000004 	b	30004ee8 <OSFlagPost+0x31c>
30004ed4:	e1a00000 	nop			; (mov r0, r0)
30004ed8:	ea000002 	b	30004ee8 <OSFlagPost+0x31c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
30004edc:	e1a00000 	nop			; (mov r0, r0)
30004ee0:	ea000000 	b	30004ee8 <OSFlagPost+0x31c>
30004ee4:	e1a00000 	nop			; (mov r0, r0)
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 OS_TRACE_FLAG_POST_EXIT(*perr);
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
30004ee8:	e51b3014 	ldr	r3, [fp, #-20]
30004eec:	e5933000 	ldr	r3, [r3]
30004ef0:	e50b3014 	str	r3, [fp, #-20]
             OS_TRACE_FLAG_POST_EXIT(*perr);
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
30004ef4:	e51b3014 	ldr	r3, [fp, #-20]
30004ef8:	e3530000 	cmp	r3, #0
30004efc:	1affff78 	bne	30004ce4 <OSFlagPost+0x118>
                 OS_TRACE_FLAG_POST_EXIT(*perr);
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
30004f00:	e51b0008 	ldr	r0, [fp, #-8]
30004f04:	ebffec8b 	bl	30000138 <OS_CPU_RestoreSR>
    if (sched == OS_TRUE) {
30004f08:	e55b300f 	ldrb	r3, [fp, #-15]
30004f0c:	e3530001 	cmp	r3, #1
30004f10:	1a000000 	bne	30004f18 <OSFlagPost+0x34c>
        OS_Sched();
30004f14:	ebfff9cb 	bl	30003648 <OS_Sched>
    }
    OS_ENTER_CRITICAL();
30004f18:	ebffec7e 	bl	30000118 <OS_CPU_SaveSR>
30004f1c:	e1a03000 	mov	r3, r0
30004f20:	e50b3008 	str	r3, [fp, #-8]
    flags_cur = pgrp->OSFlagFlags;
30004f24:	e51b3018 	ldr	r3, [fp, #-24]
30004f28:	e1d330b8 	ldrh	r3, [r3, #8]
30004f2c:	e14b30be 	strh	r3, [fp, #-14]
    OS_EXIT_CRITICAL();
30004f30:	e51b0008 	ldr	r0, [fp, #-8]
30004f34:	ebffec7f 	bl	30000138 <OS_CPU_RestoreSR>
    *perr     = OS_ERR_NONE;
30004f38:	e51b3020 	ldr	r3, [fp, #-32]
30004f3c:	e3a02000 	mov	r2, #0
30004f40:	e5c32000 	strb	r2, [r3]
    OS_TRACE_FLAG_POST_EXIT(*perr);

    return (flags_cur);
30004f44:	e15b30be 	ldrh	r3, [fp, #-14]
}
30004f48:	e1a00003 	mov	r0, r3
30004f4c:	e24bd004 	sub	sp, fp, #4
30004f50:	e8bd4800 	pop	{fp, lr}
30004f54:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30004f58 <OSFlagQuery>:
*/

#if OS_FLAG_QUERY_EN > 0u
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP  *pgrp,
                       INT8U        *perr)
{
30004f58:	e92d4800 	push	{fp, lr}
30004f5c:	e28db004 	add	fp, sp, #4
30004f60:	e24dd010 	sub	sp, sp, #16
30004f64:	e50b0010 	str	r0, [fp, #-16]
30004f68:	e50b1014 	str	r1, [fp, #-20]
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3u                      /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0u;
30004f6c:	e3a03000 	mov	r3, #0
30004f70:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
30004f74:	e51b3010 	ldr	r3, [fp, #-16]
30004f78:	e3530000 	cmp	r3, #0
30004f7c:	1a000004 	bne	30004f94 <OSFlagQuery+0x3c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
30004f80:	e51b3014 	ldr	r3, [fp, #-20]
30004f84:	e3a0206e 	mov	r2, #110	; 0x6e
30004f88:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
30004f8c:	e3a03000 	mov	r3, #0
30004f90:	ea000014 	b	30004fe8 <OSFlagQuery+0x90>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
30004f94:	e51b3010 	ldr	r3, [fp, #-16]
30004f98:	e5d33000 	ldrb	r3, [r3]
30004f9c:	e3530005 	cmp	r3, #5
30004fa0:	0a000004 	beq	30004fb8 <OSFlagQuery+0x60>
        *perr = OS_ERR_EVENT_TYPE;
30004fa4:	e51b3014 	ldr	r3, [fp, #-20]
30004fa8:	e3a02001 	mov	r2, #1
30004fac:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
30004fb0:	e3a03000 	mov	r3, #0
30004fb4:	ea00000b 	b	30004fe8 <OSFlagQuery+0x90>
    }
    OS_ENTER_CRITICAL();
30004fb8:	ebffec56 	bl	30000118 <OS_CPU_SaveSR>
30004fbc:	e1a03000 	mov	r3, r0
30004fc0:	e50b3008 	str	r3, [fp, #-8]
    flags = pgrp->OSFlagFlags;
30004fc4:	e51b3010 	ldr	r3, [fp, #-16]
30004fc8:	e1d330b8 	ldrh	r3, [r3, #8]
30004fcc:	e14b30ba 	strh	r3, [fp, #-10]
    OS_EXIT_CRITICAL();
30004fd0:	e51b0008 	ldr	r0, [fp, #-8]
30004fd4:	ebffec57 	bl	30000138 <OS_CPU_RestoreSR>
    *perr = OS_ERR_NONE;
30004fd8:	e51b3014 	ldr	r3, [fp, #-20]
30004fdc:	e3a02000 	mov	r2, #0
30004fe0:	e5c32000 	strb	r2, [r3]
    return (flags);                               /* Return the current value of the event flags       */
30004fe4:	e15b30ba 	ldrh	r3, [fp, #-10]
}
30004fe8:	e1a00003 	mov	r0, r3
30004fec:	e24bd004 	sub	sp, fp, #4
30004ff0:	e8bd4800 	pop	{fp, lr}
30004ff4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30004ff8 <OS_FlagBlock>:
static  void  OS_FlagBlock (OS_FLAG_GRP  *pgrp,
                            OS_FLAG_NODE *pnode,
                            OS_FLAGS      flags,
                            INT8U         wait_type,
                            INT32U        timeout)
{
30004ff8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30004ffc:	e28db000 	add	fp, sp, #0
30005000:	e24dd01c 	sub	sp, sp, #28
30005004:	e50b0010 	str	r0, [fp, #-16]
30005008:	e50b1014 	str	r1, [fp, #-20]
3000500c:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
30005010:	e54b3017 	strb	r3, [fp, #-23]
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
30005014:	e59f3158 	ldr	r3, [pc, #344]	; 30005174 <OS_FlagBlock+0x17c>
30005018:	e5933000 	ldr	r3, [r3]
3000501c:	e59f2150 	ldr	r2, [pc, #336]	; 30005174 <OS_FlagBlock+0x17c>
30005020:	e5922000 	ldr	r2, [r2]
30005024:	e5d22038 	ldrb	r2, [r2, #56]	; 0x38
30005028:	e3822020 	orr	r2, r2, #32
3000502c:	e20220ff 	and	r2, r2, #255	; 0xff
30005030:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
30005034:	e59f3138 	ldr	r3, [pc, #312]	; 30005174 <OS_FlagBlock+0x17c>
30005038:	e5933000 	ldr	r3, [r3]
3000503c:	e3a02000 	mov	r2, #0
30005040:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
30005044:	e59f3128 	ldr	r3, [pc, #296]	; 30005174 <OS_FlagBlock+0x17c>
30005048:	e5933000 	ldr	r3, [r3]
3000504c:	e59b2004 	ldr	r2, [fp, #4]
30005050:	e5832034 	str	r2, [r3, #52]	; 0x34
#if OS_TASK_DEL_EN > 0u
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
30005054:	e59f3118 	ldr	r3, [pc, #280]	; 30005174 <OS_FlagBlock+0x17c>
30005058:	e5933000 	ldr	r3, [r3]
3000505c:	e51b2014 	ldr	r2, [fp, #-20]
30005060:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
30005064:	e51b3014 	ldr	r3, [fp, #-20]
30005068:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
3000506c:	e1c321b0 	strh	r2, [r3, #16]
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
30005070:	e51b3014 	ldr	r3, [fp, #-20]
30005074:	e55b2017 	ldrb	r2, [fp, #-23]
30005078:	e5c32012 	strb	r2, [r3, #18]
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
3000507c:	e59f30f0 	ldr	r3, [pc, #240]	; 30005174 <OS_FlagBlock+0x17c>
30005080:	e5932000 	ldr	r2, [r3]
30005084:	e51b3014 	ldr	r3, [fp, #-20]
30005088:	e5832008 	str	r2, [r3, #8]
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
3000508c:	e51b3010 	ldr	r3, [fp, #-16]
30005090:	e5932004 	ldr	r2, [r3, #4]
30005094:	e51b3014 	ldr	r3, [fp, #-20]
30005098:	e5832000 	str	r2, [r3]
    pnode->OSFlagNodePrev     = (void *)0;
3000509c:	e51b3014 	ldr	r3, [fp, #-20]
300050a0:	e3a02000 	mov	r2, #0
300050a4:	e5832004 	str	r2, [r3, #4]
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
300050a8:	e51b3014 	ldr	r3, [fp, #-20]
300050ac:	e51b2010 	ldr	r2, [fp, #-16]
300050b0:	e583200c 	str	r2, [r3, #12]
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
300050b4:	e51b3010 	ldr	r3, [fp, #-16]
300050b8:	e5933004 	ldr	r3, [r3, #4]
300050bc:	e50b300c 	str	r3, [fp, #-12]
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
300050c0:	e51b300c 	ldr	r3, [fp, #-12]
300050c4:	e3530000 	cmp	r3, #0
300050c8:	0a000002 	beq	300050d8 <OS_FlagBlock+0xe0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
300050cc:	e51b300c 	ldr	r3, [fp, #-12]
300050d0:	e51b2014 	ldr	r2, [fp, #-20]
300050d4:	e5832004 	str	r2, [r3, #4]
    }
    pgrp->OSFlagWaitList = (void *)pnode;
300050d8:	e51b3010 	ldr	r3, [fp, #-16]
300050dc:	e51b2014 	ldr	r2, [fp, #-20]
300050e0:	e5832004 	str	r2, [r3, #4]

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
300050e4:	e59f3088 	ldr	r3, [pc, #136]	; 30005174 <OS_FlagBlock+0x17c>
300050e8:	e5933000 	ldr	r3, [r3]
300050ec:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
300050f0:	e54b3005 	strb	r3, [fp, #-5]
    OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
300050f4:	e55b3005 	ldrb	r3, [fp, #-5]
300050f8:	e55b2005 	ldrb	r2, [fp, #-5]
300050fc:	e59f1074 	ldr	r1, [pc, #116]	; 30005178 <OS_FlagBlock+0x180>
30005100:	e7d11002 	ldrb	r1, [r1, r2]
30005104:	e59f2068 	ldr	r2, [pc, #104]	; 30005174 <OS_FlagBlock+0x17c>
30005108:	e5922000 	ldr	r2, [r2]
3000510c:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
30005110:	e1e02002 	mvn	r2, r2
30005114:	e20220ff 	and	r2, r2, #255	; 0xff
30005118:	e0012002 	and	r2, r1, r2
3000511c:	e20210ff 	and	r1, r2, #255	; 0xff
30005120:	e59f2050 	ldr	r2, [pc, #80]	; 30005178 <OS_FlagBlock+0x180>
30005124:	e7c21003 	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0x00u) {
30005128:	e55b3005 	ldrb	r3, [fp, #-5]
3000512c:	e59f2044 	ldr	r2, [pc, #68]	; 30005178 <OS_FlagBlock+0x180>
30005130:	e7d23003 	ldrb	r3, [r2, r3]
30005134:	e3530000 	cmp	r3, #0
30005138:	1a00000a 	bne	30005168 <OS_FlagBlock+0x170>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
3000513c:	e59f3030 	ldr	r3, [pc, #48]	; 30005174 <OS_FlagBlock+0x17c>
30005140:	e5933000 	ldr	r3, [r3]
30005144:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30005148:	e1e03003 	mvn	r3, r3
3000514c:	e20320ff 	and	r2, r3, #255	; 0xff
30005150:	e59f3024 	ldr	r3, [pc, #36]	; 3000517c <OS_FlagBlock+0x184>
30005154:	e5d33000 	ldrb	r3, [r3]
30005158:	e0023003 	and	r3, r2, r3
3000515c:	e20320ff 	and	r2, r3, #255	; 0xff
30005160:	e59f3014 	ldr	r3, [pc, #20]	; 3000517c <OS_FlagBlock+0x184>
30005164:	e5c32000 	strb	r2, [r3]
    }
}
30005168:	e28bd000 	add	sp, fp, #0
3000516c:	e8bd0800 	pop	{fp}
30005170:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30005174:	30017be0 	.word	0x30017be0
30005178:	300179d0 	.word	0x300179d0
3000517c:	300179cc 	.word	0x300179cc

30005180 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
30005180:	e92d4800 	push	{fp, lr}
30005184:	e28db004 	add	fp, sp, #4
30005188:	e24dd010 	sub	sp, sp, #16
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
3000518c:	e59f30d4 	ldr	r3, [pc, #212]	; 30005268 <OS_FlagInit+0xe8>
30005190:	e1a00003 	mov	r0, r3
30005194:	e3a01050 	mov	r1, #80	; 0x50
30005198:	ebfff8f9 	bl	30003584 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
3000519c:	e3a03000 	mov	r3, #0
300051a0:	e14b31b0 	strh	r3, [fp, #-16]
300051a4:	ea000018 	b	3000520c <OS_FlagInit+0x8c>
        ix_next = ix + 1u;
300051a8:	e15b31b0 	ldrh	r3, [fp, #-16]
300051ac:	e2833001 	add	r3, r3, #1
300051b0:	e14b30be 	strh	r3, [fp, #-14]
        pgrp1 = &OSFlagTbl[ix];
300051b4:	e15b31b0 	ldrh	r3, [fp, #-16]
300051b8:	e1a02203 	lsl	r2, r3, #4
300051bc:	e59f30a4 	ldr	r3, [pc, #164]	; 30005268 <OS_FlagInit+0xe8>
300051c0:	e0823003 	add	r3, r2, r3
300051c4:	e50b300c 	str	r3, [fp, #-12]
        pgrp2 = &OSFlagTbl[ix_next];
300051c8:	e15b30be 	ldrh	r3, [fp, #-14]
300051cc:	e1a02203 	lsl	r2, r3, #4
300051d0:	e59f3090 	ldr	r3, [pc, #144]	; 30005268 <OS_FlagInit+0xe8>
300051d4:	e0823003 	add	r3, r2, r3
300051d8:	e50b3008 	str	r3, [fp, #-8]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
300051dc:	e51b300c 	ldr	r3, [fp, #-12]
300051e0:	e3a02000 	mov	r2, #0
300051e4:	e5c32000 	strb	r2, [r3]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
300051e8:	e51b300c 	ldr	r3, [fp, #-12]
300051ec:	e51b2008 	ldr	r2, [fp, #-8]
300051f0:	e5832004 	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
300051f4:	e51b300c 	ldr	r3, [fp, #-12]
300051f8:	e59f206c 	ldr	r2, [pc, #108]	; 3000526c <OS_FlagInit+0xec>
300051fc:	e583200c 	str	r2, [r3, #12]
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
30005200:	e15b31b0 	ldrh	r3, [fp, #-16]
30005204:	e2833001 	add	r3, r3, #1
30005208:	e14b31b0 	strh	r3, [fp, #-16]
3000520c:	e15b31b0 	ldrh	r3, [fp, #-16]
30005210:	e3530003 	cmp	r3, #3
30005214:	9affffe3 	bls	300051a8 <OS_FlagInit+0x28>
        pgrp1->OSFlagWaitList = (void *)pgrp2;
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
30005218:	e15b31b0 	ldrh	r3, [fp, #-16]
3000521c:	e1a02203 	lsl	r2, r3, #4
30005220:	e59f3040 	ldr	r3, [pc, #64]	; 30005268 <OS_FlagInit+0xe8>
30005224:	e0823003 	add	r3, r2, r3
30005228:	e50b300c 	str	r3, [fp, #-12]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
3000522c:	e51b300c 	ldr	r3, [fp, #-12]
30005230:	e3a02000 	mov	r2, #0
30005234:	e5c32000 	strb	r2, [r3]
    pgrp1->OSFlagWaitList = (void *)0;
30005238:	e51b300c 	ldr	r3, [fp, #-12]
3000523c:	e3a02000 	mov	r2, #0
30005240:	e5832004 	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
30005244:	e51b300c 	ldr	r3, [fp, #-12]
30005248:	e59f201c 	ldr	r2, [pc, #28]	; 3000526c <OS_FlagInit+0xec>
3000524c:	e583200c 	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
30005250:	e59f3018 	ldr	r3, [pc, #24]	; 30005270 <OS_FlagInit+0xf0>
30005254:	e59f200c 	ldr	r2, [pc, #12]	; 30005268 <OS_FlagInit+0xe8>
30005258:	e5832000 	str	r2, [r3]
#endif
}
3000525c:	e24bd004 	sub	sp, fp, #4
30005260:	e8bd4800 	pop	{fp, lr}
30005264:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30005268:	300173fc 	.word	0x300173fc
3000526c:	3000c278 	.word	0x3000c278
30005270:	300186c8 	.word	0x300186c8

30005274 <OS_FlagTaskRdy>:
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode,
                                 OS_FLAGS      flags_rdy,
                                 INT8U         pend_stat)
{
30005274:	e92d4800 	push	{fp, lr}
30005278:	e28db004 	add	fp, sp, #4
3000527c:	e24dd010 	sub	sp, sp, #16
30005280:	e50b0010 	str	r0, [fp, #-16]
30005284:	e1a03002 	mov	r3, r2
30005288:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
3000528c:	e54b3013 	strb	r3, [fp, #-19]
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
30005290:	e51b3010 	ldr	r3, [fp, #-16]
30005294:	e5933008 	ldr	r3, [r3, #8]
30005298:	e50b300c 	str	r3, [fp, #-12]
    ptcb->OSTCBDly       = 0u;
3000529c:	e51b300c 	ldr	r3, [fp, #-12]
300052a0:	e3a02000 	mov	r2, #0
300052a4:	e5832034 	str	r2, [r3, #52]	; 0x34
    ptcb->OSTCBFlagsRdy  = flags_rdy;
300052a8:	e51b300c 	ldr	r3, [fp, #-12]
300052ac:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
300052b0:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
    ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
300052b4:	e51b300c 	ldr	r3, [fp, #-12]
300052b8:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
300052bc:	e20330df 	and	r3, r3, #223	; 0xdf
300052c0:	e51b200c 	ldr	r2, [fp, #-12]
300052c4:	e5c23038 	strb	r3, [r2, #56]	; 0x38
    ptcb->OSTCBStatPend  = pend_stat;
300052c8:	e51b300c 	ldr	r3, [fp, #-12]
300052cc:	e55b2013 	ldrb	r2, [fp, #-19]
300052d0:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
300052d4:	e51b300c 	ldr	r3, [fp, #-12]
300052d8:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
300052dc:	e3530000 	cmp	r3, #0
300052e0:	1a000016 	bne	30005340 <OS_FlagTaskRdy+0xcc>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
300052e4:	e51b300c 	ldr	r3, [fp, #-12]
300052e8:	e5d3203e 	ldrb	r2, [r3, #62]	; 0x3e
300052ec:	e59f3070 	ldr	r3, [pc, #112]	; 30005364 <OS_FlagTaskRdy+0xf0>
300052f0:	e5d33000 	ldrb	r3, [r3]
300052f4:	e1823003 	orr	r3, r2, r3
300052f8:	e20320ff 	and	r2, r3, #255	; 0xff
300052fc:	e59f3060 	ldr	r3, [pc, #96]	; 30005364 <OS_FlagTaskRdy+0xf0>
30005300:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
30005304:	e51b300c 	ldr	r3, [fp, #-12]
30005308:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
3000530c:	e51b200c 	ldr	r2, [fp, #-12]
30005310:	e5d2203c 	ldrb	r2, [r2, #60]	; 0x3c
30005314:	e59f104c 	ldr	r1, [pc, #76]	; 30005368 <OS_FlagTaskRdy+0xf4>
30005318:	e7d11002 	ldrb	r1, [r1, r2]
3000531c:	e51b200c 	ldr	r2, [fp, #-12]
30005320:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
30005324:	e1812002 	orr	r2, r1, r2
30005328:	e20210ff 	and	r1, r2, #255	; 0xff
3000532c:	e59f2034 	ldr	r2, [pc, #52]	; 30005368 <OS_FlagTaskRdy+0xf4>
30005330:	e7c21003 	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
        sched                   = OS_TRUE;
30005334:	e3a03001 	mov	r3, #1
30005338:	e54b3005 	strb	r3, [fp, #-5]
3000533c:	ea000001 	b	30005348 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
30005340:	e3a03000 	mov	r3, #0
30005344:	e54b3005 	strb	r3, [fp, #-5]
    }
    OS_FlagUnlink(pnode);
30005348:	e51b0010 	ldr	r0, [fp, #-16]
3000534c:	eb000006 	bl	3000536c <OS_FlagUnlink>
    return (sched);
30005350:	e55b3005 	ldrb	r3, [fp, #-5]
}
30005354:	e1a00003 	mov	r0, r3
30005358:	e24bd004 	sub	sp, fp, #4
3000535c:	e8bd4800 	pop	{fp, lr}
30005360:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30005364:	300179cc 	.word	0x300179cc
30005368:	300179d0 	.word	0x300179d0

3000536c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
3000536c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30005370:	e28db000 	add	fp, sp, #0
30005374:	e24dd01c 	sub	sp, sp, #28
30005378:	e50b0018 	str	r0, [fp, #-24]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
3000537c:	e51b3018 	ldr	r3, [fp, #-24]
30005380:	e5933004 	ldr	r3, [r3, #4]
30005384:	e50b300c 	str	r3, [fp, #-12]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
30005388:	e51b3018 	ldr	r3, [fp, #-24]
3000538c:	e5933000 	ldr	r3, [r3]
30005390:	e50b3008 	str	r3, [fp, #-8]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
30005394:	e51b300c 	ldr	r3, [fp, #-12]
30005398:	e3530000 	cmp	r3, #0
3000539c:	1a00000c 	bne	300053d4 <OS_FlagUnlink+0x68>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
300053a0:	e51b3018 	ldr	r3, [fp, #-24]
300053a4:	e593300c 	ldr	r3, [r3, #12]
300053a8:	e50b3010 	str	r3, [fp, #-16]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
300053ac:	e51b3010 	ldr	r3, [fp, #-16]
300053b0:	e51b2008 	ldr	r2, [fp, #-8]
300053b4:	e5832004 	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
300053b8:	e51b3008 	ldr	r3, [fp, #-8]
300053bc:	e3530000 	cmp	r3, #0
300053c0:	0a00000d 	beq	300053fc <OS_FlagUnlink+0x90>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
300053c4:	e51b3008 	ldr	r3, [fp, #-8]
300053c8:	e3a02000 	mov	r2, #0
300053cc:	e5832004 	str	r2, [r3, #4]
300053d0:	ea00000a 	b	30005400 <OS_FlagUnlink+0x94>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
300053d4:	e51b300c 	ldr	r3, [fp, #-12]
300053d8:	e51b2008 	ldr	r2, [fp, #-8]
300053dc:	e5832000 	str	r2, [r3]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
300053e0:	e51b3008 	ldr	r3, [fp, #-8]
300053e4:	e3530000 	cmp	r3, #0
300053e8:	0a000004 	beq	30005400 <OS_FlagUnlink+0x94>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
300053ec:	e51b3008 	ldr	r3, [fp, #-8]
300053f0:	e51b200c 	ldr	r2, [fp, #-12]
300053f4:	e5832004 	str	r2, [r3, #4]
300053f8:	ea000000 	b	30005400 <OS_FlagUnlink+0x94>
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
        if (pnode_next != (OS_FLAG_NODE *)0) {
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
300053fc:	e1a00000 	nop			; (mov r0, r0)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
30005400:	e51b3018 	ldr	r3, [fp, #-24]
30005404:	e5933008 	ldr	r3, [r3, #8]
30005408:	e50b3014 	str	r3, [fp, #-20]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
3000540c:	e51b3014 	ldr	r3, [fp, #-20]
30005410:	e3a02000 	mov	r2, #0
30005414:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif
}
30005418:	e28bd000 	add	sp, fp, #0
3000541c:	e8bd0800 	pop	{fp}
30005420:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30005424 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0u
void  *OSMboxAccept (OS_EVENT *pevent)
{
30005424:	e92d4800 	push	{fp, lr}
30005428:	e28db004 	add	fp, sp, #4
3000542c:	e24dd010 	sub	sp, sp, #16
30005430:	e50b0010 	str	r0, [fp, #-16]
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3u                              /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0u;
30005434:	e3a03000 	mov	r3, #0
30005438:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
3000543c:	e51b3010 	ldr	r3, [fp, #-16]
30005440:	e3530000 	cmp	r3, #0
30005444:	1a000001 	bne	30005450 <OSMboxAccept+0x2c>
        return ((void *)0);
30005448:	e3a03000 	mov	r3, #0
3000544c:	ea000011 	b	30005498 <OSMboxAccept+0x74>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
30005450:	e51b3010 	ldr	r3, [fp, #-16]
30005454:	e5d33000 	ldrb	r3, [r3]
30005458:	e3530001 	cmp	r3, #1
3000545c:	0a000001 	beq	30005468 <OSMboxAccept+0x44>
        return ((void *)0);
30005460:	e3a03000 	mov	r3, #0
30005464:	ea00000b 	b	30005498 <OSMboxAccept+0x74>
    }
    OS_ENTER_CRITICAL();
30005468:	ebffeb2a 	bl	30000118 <OS_CPU_SaveSR>
3000546c:	e1a03000 	mov	r3, r0
30005470:	e50b3008 	str	r3, [fp, #-8]
    pmsg               = pevent->OSEventPtr;
30005474:	e51b3010 	ldr	r3, [fp, #-16]
30005478:	e5933004 	ldr	r3, [r3, #4]
3000547c:	e50b300c 	str	r3, [fp, #-12]
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
30005480:	e51b3010 	ldr	r3, [fp, #-16]
30005484:	e3a02000 	mov	r2, #0
30005488:	e5832004 	str	r2, [r3, #4]
    OS_EXIT_CRITICAL();
3000548c:	e51b0008 	ldr	r0, [fp, #-8]
30005490:	ebffeb28 	bl	30000138 <OS_CPU_RestoreSR>
    return (pmsg);                                        /* Return the message received (or NULL)     */
30005494:	e51b300c 	ldr	r3, [fp, #-12]
}
30005498:	e1a00003 	mov	r0, r3
3000549c:	e24bd004 	sub	sp, fp, #4
300054a0:	e8bd4800 	pop	{fp, lr}
300054a4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300054a8 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
300054a8:	e92d4800 	push	{fp, lr}
300054ac:	e28db004 	add	fp, sp, #4
300054b0:	e24dd010 	sub	sp, sp, #16
300054b4:	e50b0010 	str	r0, [fp, #-16]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
300054b8:	e3a03000 	mov	r3, #0
300054bc:	e50b3008 	str	r3, [fp, #-8]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
300054c0:	e59f30b0 	ldr	r3, [pc, #176]	; 30005578 <OSMboxCreate+0xd0>
300054c4:	e5d33000 	ldrb	r3, [r3]
300054c8:	e3530000 	cmp	r3, #0
300054cc:	0a000001 	beq	300054d8 <OSMboxCreate+0x30>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
300054d0:	e3a03000 	mov	r3, #0
300054d4:	ea000023 	b	30005568 <OSMboxCreate+0xc0>
    }
    OS_ENTER_CRITICAL();
300054d8:	ebffeb0e 	bl	30000118 <OS_CPU_SaveSR>
300054dc:	e1a03000 	mov	r3, r0
300054e0:	e50b3008 	str	r3, [fp, #-8]
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
300054e4:	e59f3090 	ldr	r3, [pc, #144]	; 3000557c <OSMboxCreate+0xd4>
300054e8:	e5933000 	ldr	r3, [r3]
300054ec:	e50b300c 	str	r3, [fp, #-12]
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
300054f0:	e59f3084 	ldr	r3, [pc, #132]	; 3000557c <OSMboxCreate+0xd4>
300054f4:	e5933000 	ldr	r3, [r3]
300054f8:	e3530000 	cmp	r3, #0
300054fc:	0a000005 	beq	30005518 <OSMboxCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
30005500:	e59f3074 	ldr	r3, [pc, #116]	; 3000557c <OSMboxCreate+0xd4>
30005504:	e5933000 	ldr	r3, [r3]
30005508:	e5933004 	ldr	r3, [r3, #4]
3000550c:	e1a02003 	mov	r2, r3
30005510:	e59f3064 	ldr	r3, [pc, #100]	; 3000557c <OSMboxCreate+0xd4>
30005514:	e5832000 	str	r2, [r3]
    }
    OS_EXIT_CRITICAL();
30005518:	e51b0008 	ldr	r0, [fp, #-8]
3000551c:	ebffeb05 	bl	30000138 <OS_CPU_RestoreSR>
    if (pevent != (OS_EVENT *)0) {
30005520:	e51b300c 	ldr	r3, [fp, #-12]
30005524:	e3530000 	cmp	r3, #0
30005528:	0a00000d 	beq	30005564 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
3000552c:	e51b300c 	ldr	r3, [fp, #-12]
30005530:	e3a02001 	mov	r2, #1
30005534:	e5c32000 	strb	r2, [r3]
        pevent->OSEventCnt     = 0u;
30005538:	e51b300c 	ldr	r3, [fp, #-12]
3000553c:	e3a02000 	mov	r2, #0
30005540:	e1c320b8 	strh	r2, [r3, #8]
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
30005544:	e51b300c 	ldr	r3, [fp, #-12]
30005548:	e51b2010 	ldr	r2, [fp, #-16]
3000554c:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
30005550:	e51b300c 	ldr	r3, [fp, #-12]
30005554:	e59f2024 	ldr	r2, [pc, #36]	; 30005580 <OSMboxCreate+0xd8>
30005558:	e5832014 	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);
3000555c:	e51b000c 	ldr	r0, [fp, #-12]
30005560:	ebfff6ba 	bl	30003050 <OS_EventWaitListInit>

        OS_TRACE_MBOX_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);                             /* Return pointer to event control block              */
30005564:	e51b300c 	ldr	r3, [fp, #-12]
}
30005568:	e1a00003 	mov	r0, r3
3000556c:	e24bd004 	sub	sp, fp, #4
30005570:	e8bd4800 	pop	{fp, lr}
30005574:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30005578:	30017bdc 	.word	0x30017bdc
3000557c:	30017bd8 	.word	0x30017bd8
30005580:	3000c278 	.word	0x3000c278

30005584 <OSMboxDel>:

#if OS_MBOX_DEL_EN > 0u
OS_EVENT  *OSMboxDel (OS_EVENT  *pevent,
                      INT8U      opt,
                      INT8U     *perr)
{
30005584:	e92d4800 	push	{fp, lr}
30005588:	e28db004 	add	fp, sp, #4
3000558c:	e24dd020 	sub	sp, sp, #32
30005590:	e50b0018 	str	r0, [fp, #-24]
30005594:	e1a03001 	mov	r3, r1
30005598:	e50b2020 	str	r2, [fp, #-32]
3000559c:	e54b3019 	strb	r3, [fp, #-25]
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
300055a0:	e3a03000 	mov	r3, #0
300055a4:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_EVENT *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
300055a8:	e51b3018 	ldr	r3, [fp, #-24]
300055ac:	e3530000 	cmp	r3, #0
300055b0:	1a000004 	bne	300055c8 <OSMboxDel+0x44>
        *perr = OS_ERR_PEVENT_NULL;
300055b4:	e51b3020 	ldr	r3, [fp, #-32]
300055b8:	e3a02004 	mov	r2, #4
300055bc:	e5c32000 	strb	r2, [r3]
        return (pevent);
300055c0:	e51b3018 	ldr	r3, [fp, #-24]
300055c4:	ea000075 	b	300057a0 <OSMboxDel+0x21c>
    }
#endif

    OS_TRACE_MBOX_DEL_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
300055c8:	e51b3018 	ldr	r3, [fp, #-24]
300055cc:	e5d33000 	ldrb	r3, [r3]
300055d0:	e3530001 	cmp	r3, #1
300055d4:	0a000004 	beq	300055ec <OSMboxDel+0x68>
        *perr = OS_ERR_EVENT_TYPE;
300055d8:	e51b3020 	ldr	r3, [fp, #-32]
300055dc:	e3a02001 	mov	r2, #1
300055e0:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MBOX_DEL_EXIT(*perr);
        return (pevent);
300055e4:	e51b3018 	ldr	r3, [fp, #-24]
300055e8:	ea00006c 	b	300057a0 <OSMboxDel+0x21c>
    }
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
300055ec:	e59f31bc 	ldr	r3, [pc, #444]	; 300057b0 <OSMboxDel+0x22c>
300055f0:	e5d33000 	ldrb	r3, [r3]
300055f4:	e3530000 	cmp	r3, #0
300055f8:	0a000004 	beq	30005610 <OSMboxDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
300055fc:	e51b3020 	ldr	r3, [fp, #-32]
30005600:	e3a0200f 	mov	r2, #15
30005604:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MBOX_DEL_EXIT(*perr);
        return (pevent);
30005608:	e51b3018 	ldr	r3, [fp, #-24]
3000560c:	ea000063 	b	300057a0 <OSMboxDel+0x21c>
    }
    OS_ENTER_CRITICAL();
30005610:	ebffeac0 	bl	30000118 <OS_CPU_SaveSR>
30005614:	e1a03000 	mov	r3, r0
30005618:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mailbox      */
3000561c:	e51b3018 	ldr	r3, [fp, #-24]
30005620:	e5d3300a 	ldrb	r3, [r3, #10]
30005624:	e3530000 	cmp	r3, #0
30005628:	0a000002 	beq	30005638 <OSMboxDel+0xb4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
3000562c:	e3a03001 	mov	r3, #1
30005630:	e54b300d 	strb	r3, [fp, #-13]
30005634:	ea000001 	b	30005640 <OSMboxDel+0xbc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
30005638:	e3a03000 	mov	r3, #0
3000563c:	e54b300d 	strb	r3, [fp, #-13]
    }
    switch (opt) {
30005640:	e55b3019 	ldrb	r3, [fp, #-25]
30005644:	e3530000 	cmp	r3, #0
30005648:	0a000002 	beq	30005658 <OSMboxDel+0xd4>
3000564c:	e3530001 	cmp	r3, #1
30005650:	0a000029 	beq	300056fc <OSMboxDel+0x178>
30005654:	ea000049 	b	30005780 <OSMboxDel+0x1fc>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
30005658:	e55b300d 	ldrb	r3, [fp, #-13]
3000565c:	e3530000 	cmp	r3, #0
30005660:	1a000017 	bne	300056c4 <OSMboxDel+0x140>
#if OS_EVENT_NAME_EN > 0u
                 pevent->OSEventName = (INT8U *)(void *)"?";
30005664:	e51b3018 	ldr	r3, [fp, #-24]
30005668:	e59f2144 	ldr	r2, [pc, #324]	; 300057b4 <OSMboxDel+0x230>
3000566c:	e5832014 	str	r2, [r3, #20]
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
30005670:	e51b3018 	ldr	r3, [fp, #-24]
30005674:	e3a02000 	mov	r2, #0
30005678:	e5c32000 	strb	r2, [r3]
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
3000567c:	e59f3134 	ldr	r3, [pc, #308]	; 300057b8 <OSMboxDel+0x234>
30005680:	e5932000 	ldr	r2, [r3]
30005684:	e51b3018 	ldr	r3, [fp, #-24]
30005688:	e5832004 	str	r2, [r3, #4]
                 pevent->OSEventCnt  = 0u;
3000568c:	e51b3018 	ldr	r3, [fp, #-24]
30005690:	e3a02000 	mov	r2, #0
30005694:	e1c320b8 	strh	r2, [r3, #8]
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
30005698:	e59f3118 	ldr	r3, [pc, #280]	; 300057b8 <OSMboxDel+0x234>
3000569c:	e51b2018 	ldr	r2, [fp, #-24]
300056a0:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
300056a4:	e51b0008 	ldr	r0, [fp, #-8]
300056a8:	ebffeaa2 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr               = OS_ERR_NONE;
300056ac:	e51b3020 	ldr	r3, [fp, #-32]
300056b0:	e3a02000 	mov	r2, #0
300056b4:	e5c32000 	strb	r2, [r3]
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
300056b8:	e3a03000 	mov	r3, #0
300056bc:	e50b300c 	str	r3, [fp, #-12]
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
300056c0:	ea000035 	b	3000579c <OSMboxDel+0x218>
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
300056c4:	e51b0008 	ldr	r0, [fp, #-8]
300056c8:	ebffea9a 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr               = OS_ERR_TASK_WAITING;
300056cc:	e51b3020 	ldr	r3, [fp, #-32]
300056d0:	e3a02049 	mov	r2, #73	; 0x49
300056d4:	e5c32000 	strb	r2, [r3]
                 pevent_return       = pevent;
300056d8:	e51b3018 	ldr	r3, [fp, #-24]
300056dc:	e50b300c 	str	r3, [fp, #-12]
             }
             break;
300056e0:	ea00002d 	b	3000579c <OSMboxDel+0x218>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
300056e4:	e51b0018 	ldr	r0, [fp, #-24]
300056e8:	e3a01000 	mov	r1, #0
300056ec:	e3a02002 	mov	r2, #2
300056f0:	e3a03002 	mov	r3, #2
300056f4:	ebfff4cd 	bl	30002a30 <OS_EventTaskRdy>
300056f8:	ea000000 	b	30005700 <OSMboxDel+0x17c>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mailbox      */
300056fc:	e1a00000 	nop			; (mov r0, r0)
30005700:	e51b3018 	ldr	r3, [fp, #-24]
30005704:	e5d3300a 	ldrb	r3, [r3, #10]
30005708:	e3530000 	cmp	r3, #0
3000570c:	1afffff4 	bne	300056e4 <OSMboxDel+0x160>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
             }
#if OS_EVENT_NAME_EN > 0u
             pevent->OSEventName    = (INT8U *)(void *)"?";
30005710:	e51b3018 	ldr	r3, [fp, #-24]
30005714:	e59f2098 	ldr	r2, [pc, #152]	; 300057b4 <OSMboxDel+0x230>
30005718:	e5832014 	str	r2, [r3, #20]
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
3000571c:	e51b3018 	ldr	r3, [fp, #-24]
30005720:	e3a02000 	mov	r2, #0
30005724:	e5c32000 	strb	r2, [r3]
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
30005728:	e59f3088 	ldr	r3, [pc, #136]	; 300057b8 <OSMboxDel+0x234>
3000572c:	e5932000 	ldr	r2, [r3]
30005730:	e51b3018 	ldr	r3, [fp, #-24]
30005734:	e5832004 	str	r2, [r3, #4]
             pevent->OSEventCnt     = 0u;
30005738:	e51b3018 	ldr	r3, [fp, #-24]
3000573c:	e3a02000 	mov	r2, #0
30005740:	e1c320b8 	strh	r2, [r3, #8]
             OSEventFreeList        = pevent;              /* Get next free event control block        */
30005744:	e59f306c 	ldr	r3, [pc, #108]	; 300057b8 <OSMboxDel+0x234>
30005748:	e51b2018 	ldr	r2, [fp, #-24]
3000574c:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
30005750:	e51b0008 	ldr	r0, [fp, #-8]
30005754:	ebffea77 	bl	30000138 <OS_CPU_RestoreSR>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
30005758:	e55b300d 	ldrb	r3, [fp, #-13]
3000575c:	e3530001 	cmp	r3, #1
30005760:	1a000000 	bne	30005768 <OSMboxDel+0x1e4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
30005764:	ebfff7b7 	bl	30003648 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
30005768:	e51b3020 	ldr	r3, [fp, #-32]
3000576c:	e3a02000 	mov	r2, #0
30005770:	e5c32000 	strb	r2, [r3]
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
30005774:	e3a03000 	mov	r3, #0
30005778:	e50b300c 	str	r3, [fp, #-12]
             break;
3000577c:	ea000006 	b	3000579c <OSMboxDel+0x218>

        default:
             OS_EXIT_CRITICAL();
30005780:	e51b0008 	ldr	r0, [fp, #-8]
30005784:	ebffea6b 	bl	30000138 <OS_CPU_RestoreSR>
             *perr         = OS_ERR_INVALID_OPT;
30005788:	e51b3020 	ldr	r3, [fp, #-32]
3000578c:	e3a02007 	mov	r2, #7
30005790:	e5c32000 	strb	r2, [r3]
             pevent_return = pevent;
30005794:	e51b3018 	ldr	r3, [fp, #-24]
30005798:	e50b300c 	str	r3, [fp, #-12]
             break;
    }

    OS_TRACE_MBOX_DEL_EXIT(*perr);

    return (pevent_return);
3000579c:	e51b300c 	ldr	r3, [fp, #-12]
}
300057a0:	e1a00003 	mov	r0, r3
300057a4:	e24bd004 	sub	sp, fp, #4
300057a8:	e8bd4800 	pop	{fp, lr}
300057ac:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300057b0:	30017bdc 	.word	0x30017bdc
300057b4:	3000c278 	.word	0x3000c278
300057b8:	30017bd8 	.word	0x30017bd8

300057bc <OSMboxPend>:
*/

void  *OSMboxPend (OS_EVENT  *pevent,
                   INT32U     timeout,
                   INT8U     *perr)
{
300057bc:	e92d4800 	push	{fp, lr}
300057c0:	e28db004 	add	fp, sp, #4
300057c4:	e24dd018 	sub	sp, sp, #24
300057c8:	e50b0010 	str	r0, [fp, #-16]
300057cc:	e50b1014 	str	r1, [fp, #-20]
300057d0:	e50b2018 	str	r2, [fp, #-24]
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
300057d4:	e3a03000 	mov	r3, #0
300057d8:	e50b3008 	str	r3, [fp, #-8]
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
300057dc:	e51b3010 	ldr	r3, [fp, #-16]
300057e0:	e3530000 	cmp	r3, #0
300057e4:	1a000004 	bne	300057fc <OSMboxPend+0x40>
        *perr = OS_ERR_PEVENT_NULL;
300057e8:	e51b3018 	ldr	r3, [fp, #-24]
300057ec:	e3a02004 	mov	r2, #4
300057f0:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
300057f4:	e3a03000 	mov	r3, #0
300057f8:	ea000080 	b	30005a00 <OSMboxPend+0x244>
    }
#endif

    OS_TRACE_MBOX_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
300057fc:	e51b3010 	ldr	r3, [fp, #-16]
30005800:	e5d33000 	ldrb	r3, [r3]
30005804:	e3530001 	cmp	r3, #1
30005808:	0a000004 	beq	30005820 <OSMboxPend+0x64>
        *perr = OS_ERR_EVENT_TYPE;
3000580c:	e51b3018 	ldr	r3, [fp, #-24]
30005810:	e3a02001 	mov	r2, #1
30005814:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MBOX_PEND_EXIT(*perr);
        return ((void *)0);
30005818:	e3a03000 	mov	r3, #0
3000581c:	ea000077 	b	30005a00 <OSMboxPend+0x244>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
30005820:	e59f31e8 	ldr	r3, [pc, #488]	; 30005a10 <OSMboxPend+0x254>
30005824:	e5d33000 	ldrb	r3, [r3]
30005828:	e3530000 	cmp	r3, #0
3000582c:	0a000004 	beq	30005844 <OSMboxPend+0x88>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
30005830:	e51b3018 	ldr	r3, [fp, #-24]
30005834:	e3a02002 	mov	r2, #2
30005838:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MBOX_PEND_EXIT(*perr);
        return ((void *)0);
3000583c:	e3a03000 	mov	r3, #0
30005840:	ea00006e 	b	30005a00 <OSMboxPend+0x244>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
30005844:	e59f31c8 	ldr	r3, [pc, #456]	; 30005a14 <OSMboxPend+0x258>
30005848:	e5d33000 	ldrb	r3, [r3]
3000584c:	e3530000 	cmp	r3, #0
30005850:	0a000004 	beq	30005868 <OSMboxPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
30005854:	e51b3018 	ldr	r3, [fp, #-24]
30005858:	e3a0200d 	mov	r2, #13
3000585c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MBOX_PEND_EXIT(*perr);
        return ((void *)0);
30005860:	e3a03000 	mov	r3, #0
30005864:	ea000065 	b	30005a00 <OSMboxPend+0x244>
    }
    OS_ENTER_CRITICAL();
30005868:	ebffea2a 	bl	30000118 <OS_CPU_SaveSR>
3000586c:	e1a03000 	mov	r3, r0
30005870:	e50b3008 	str	r3, [fp, #-8]
    pmsg = pevent->OSEventPtr;
30005874:	e51b3010 	ldr	r3, [fp, #-16]
30005878:	e5933004 	ldr	r3, [r3, #4]
3000587c:	e50b300c 	str	r3, [fp, #-12]
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
30005880:	e51b300c 	ldr	r3, [fp, #-12]
30005884:	e3530000 	cmp	r3, #0
30005888:	0a000009 	beq	300058b4 <OSMboxPend+0xf8>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
3000588c:	e51b3010 	ldr	r3, [fp, #-16]
30005890:	e3a02000 	mov	r2, #0
30005894:	e5832004 	str	r2, [r3, #4]
        OS_EXIT_CRITICAL();
30005898:	e51b0008 	ldr	r0, [fp, #-8]
3000589c:	ebffea25 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_NONE;
300058a0:	e51b3018 	ldr	r3, [fp, #-24]
300058a4:	e3a02000 	mov	r2, #0
300058a8:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MBOX_PEND_EXIT(*perr);
        return (pmsg);                                /* Return the message received (or NULL)         */
300058ac:	e51b300c 	ldr	r3, [fp, #-12]
300058b0:	ea000052 	b	30005a00 <OSMboxPend+0x244>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
300058b4:	e59f315c 	ldr	r3, [pc, #348]	; 30005a18 <OSMboxPend+0x25c>
300058b8:	e5933000 	ldr	r3, [r3]
300058bc:	e59f2154 	ldr	r2, [pc, #340]	; 30005a18 <OSMboxPend+0x25c>
300058c0:	e5922000 	ldr	r2, [r2]
300058c4:	e5d22038 	ldrb	r2, [r2, #56]	; 0x38
300058c8:	e3822002 	orr	r2, r2, #2
300058cc:	e20220ff 	and	r2, r2, #255	; 0xff
300058d0:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
300058d4:	e59f313c 	ldr	r3, [pc, #316]	; 30005a18 <OSMboxPend+0x25c>
300058d8:	e5933000 	ldr	r3, [r3]
300058dc:	e3a02000 	mov	r2, #0
300058e0:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
300058e4:	e59f312c 	ldr	r3, [pc, #300]	; 30005a18 <OSMboxPend+0x25c>
300058e8:	e5933000 	ldr	r3, [r3]
300058ec:	e51b2014 	ldr	r2, [fp, #-20]
300058f0:	e5832034 	str	r2, [r3, #52]	; 0x34
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
300058f4:	e51b0010 	ldr	r0, [fp, #-16]
300058f8:	ebfff4af 	bl	30002bbc <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
300058fc:	e51b0008 	ldr	r0, [fp, #-8]
30005900:	ebffea0c 	bl	30000138 <OS_CPU_RestoreSR>
    OS_Sched();                                       /* Find next highest priority task ready to run  */
30005904:	ebfff74f 	bl	30003648 <OS_Sched>
    OS_ENTER_CRITICAL();
30005908:	ebffea02 	bl	30000118 <OS_CPU_SaveSR>
3000590c:	e1a03000 	mov	r3, r0
30005910:	e50b3008 	str	r3, [fp, #-8]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
30005914:	e59f30fc 	ldr	r3, [pc, #252]	; 30005a18 <OSMboxPend+0x25c>
30005918:	e5933000 	ldr	r3, [r3]
3000591c:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
30005920:	e3530000 	cmp	r3, #0
30005924:	0a000002 	beq	30005934 <OSMboxPend+0x178>
30005928:	e3530002 	cmp	r3, #2
3000592c:	0a000008 	beq	30005954 <OSMboxPend+0x198>
30005930:	ea00000d 	b	3000596c <OSMboxPend+0x1b0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
30005934:	e59f30dc 	ldr	r3, [pc, #220]	; 30005a18 <OSMboxPend+0x25c>
30005938:	e5933000 	ldr	r3, [r3]
3000593c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
30005940:	e50b300c 	str	r3, [fp, #-12]
            *perr =  OS_ERR_NONE;
30005944:	e51b3018 	ldr	r3, [fp, #-24]
30005948:	e3a02000 	mov	r2, #0
3000594c:	e5c32000 	strb	r2, [r3]
             break;
30005950:	ea00000f 	b	30005994 <OSMboxPend+0x1d8>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
30005954:	e3a03000 	mov	r3, #0
30005958:	e50b300c 	str	r3, [fp, #-12]
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
3000595c:	e51b3018 	ldr	r3, [fp, #-24]
30005960:	e3a0200e 	mov	r2, #14
30005964:	e5c32000 	strb	r2, [r3]
             break;
30005968:	ea000009 	b	30005994 <OSMboxPend+0x1d8>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
3000596c:	e59f30a4 	ldr	r3, [pc, #164]	; 30005a18 <OSMboxPend+0x25c>
30005970:	e5933000 	ldr	r3, [r3]
30005974:	e1a00003 	mov	r0, r3
30005978:	e51b1010 	ldr	r1, [fp, #-16]
3000597c:	ebfff53f 	bl	30002e80 <OS_EventTaskRemove>
             pmsg = (void *)0;
30005980:	e3a03000 	mov	r3, #0
30005984:	e50b300c 	str	r3, [fp, #-12]
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
30005988:	e51b3018 	ldr	r3, [fp, #-24]
3000598c:	e3a0200a 	mov	r2, #10
30005990:	e5c32000 	strb	r2, [r3]
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
30005994:	e59f307c 	ldr	r3, [pc, #124]	; 30005a18 <OSMboxPend+0x25c>
30005998:	e5933000 	ldr	r3, [r3]
3000599c:	e3a02000 	mov	r2, #0
300059a0:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
300059a4:	e59f306c 	ldr	r3, [pc, #108]	; 30005a18 <OSMboxPend+0x25c>
300059a8:	e5933000 	ldr	r3, [r3]
300059ac:	e3a02000 	mov	r2, #0
300059b0:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
300059b4:	e59f305c 	ldr	r3, [pc, #92]	; 30005a18 <OSMboxPend+0x25c>
300059b8:	e5933000 	ldr	r3, [r3]
300059bc:	e3a02000 	mov	r2, #0
300059c0:	e583201c 	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
300059c4:	e59f304c 	ldr	r3, [pc, #76]	; 30005a18 <OSMboxPend+0x25c>
300059c8:	e5933000 	ldr	r3, [r3]
300059cc:	e3a02000 	mov	r2, #0
300059d0:	e5832020 	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
300059d4:	e59f303c 	ldr	r3, [pc, #60]	; 30005a18 <OSMboxPend+0x25c>
300059d8:	e5933000 	ldr	r3, [r3]
300059dc:	e3a02000 	mov	r2, #0
300059e0:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
300059e4:	e59f302c 	ldr	r3, [pc, #44]	; 30005a18 <OSMboxPend+0x25c>
300059e8:	e5933000 	ldr	r3, [r3]
300059ec:	e3a02000 	mov	r2, #0
300059f0:	e5832028 	str	r2, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL();
300059f4:	e51b0008 	ldr	r0, [fp, #-8]
300059f8:	ebffe9ce 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_MBOX_PEND_EXIT(*perr);

    return (pmsg);                                    /* Return received message                       */
300059fc:	e51b300c 	ldr	r3, [fp, #-12]
}
30005a00:	e1a00003 	mov	r0, r3
30005a04:	e24bd004 	sub	sp, fp, #4
30005a08:	e8bd4800 	pop	{fp, lr}
30005a0c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30005a10:	30017bdc 	.word	0x30017bdc
30005a14:	300173e8 	.word	0x300173e8
30005a18:	30017be0 	.word	0x30017be0

30005a1c <OSMboxPendAbort>:

#if OS_MBOX_PEND_ABORT_EN > 0u
INT8U  OSMboxPendAbort (OS_EVENT  *pevent,
                        INT8U      opt,
                        INT8U     *perr)
{
30005a1c:	e92d4800 	push	{fp, lr}
30005a20:	e28db004 	add	fp, sp, #4
30005a24:	e24dd018 	sub	sp, sp, #24
30005a28:	e50b0010 	str	r0, [fp, #-16]
30005a2c:	e1a03001 	mov	r3, r1
30005a30:	e50b2018 	str	r2, [fp, #-24]
30005a34:	e54b3011 	strb	r3, [fp, #-17]
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
30005a38:	e3a03000 	mov	r3, #0
30005a3c:	e50b3008 	str	r3, [fp, #-8]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
30005a40:	e51b3010 	ldr	r3, [fp, #-16]
30005a44:	e3530000 	cmp	r3, #0
30005a48:	1a000004 	bne	30005a60 <OSMboxPendAbort+0x44>
        *perr = OS_ERR_PEVENT_NULL;
30005a4c:	e51b3018 	ldr	r3, [fp, #-24]
30005a50:	e3a02004 	mov	r2, #4
30005a54:	e5c32000 	strb	r2, [r3]
        return (0u);
30005a58:	e3a03000 	mov	r3, #0
30005a5c:	ea00003a 	b	30005b4c <OSMboxPendAbort+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
30005a60:	e51b3010 	ldr	r3, [fp, #-16]
30005a64:	e5d33000 	ldrb	r3, [r3]
30005a68:	e3530001 	cmp	r3, #1
30005a6c:	0a000004 	beq	30005a84 <OSMboxPendAbort+0x68>
        *perr = OS_ERR_EVENT_TYPE;
30005a70:	e51b3018 	ldr	r3, [fp, #-24]
30005a74:	e3a02001 	mov	r2, #1
30005a78:	e5c32000 	strb	r2, [r3]
        return (0u);
30005a7c:	e3a03000 	mov	r3, #0
30005a80:	ea000031 	b	30005b4c <OSMboxPendAbort+0x130>
    }
    OS_ENTER_CRITICAL();
30005a84:	ebffe9a3 	bl	30000118 <OS_CPU_SaveSR>
30005a88:	e1a03000 	mov	r3, r0
30005a8c:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on mailbox?      */
30005a90:	e51b3010 	ldr	r3, [fp, #-16]
30005a94:	e5d3300a 	ldrb	r3, [r3, #10]
30005a98:	e3530000 	cmp	r3, #0
30005a9c:	0a000024 	beq	30005b34 <OSMboxPendAbort+0x118>
        nbr_tasks = 0u;
30005aa0:	e3a03000 	mov	r3, #0
30005aa4:	e54b3009 	strb	r3, [fp, #-9]
        switch (opt) {
30005aa8:	e55b3011 	ldrb	r3, [fp, #-17]
30005aac:	e3530001 	cmp	r3, #1
30005ab0:	0a000009 	beq	30005adc <OSMboxPendAbort+0xc0>
30005ab4:	ea00000e 	b	30005af4 <OSMboxPendAbort+0xd8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on mailbox  */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
30005ab8:	e51b0010 	ldr	r0, [fp, #-16]
30005abc:	e3a01000 	mov	r1, #0
30005ac0:	e3a02002 	mov	r2, #2
30005ac4:	e3a03002 	mov	r3, #2
30005ac8:	ebfff3d8 	bl	30002a30 <OS_EventTaskRdy>
                     nbr_tasks++;
30005acc:	e55b3009 	ldrb	r3, [fp, #-9]
30005ad0:	e2833001 	add	r3, r3, #1
30005ad4:	e54b3009 	strb	r3, [fp, #-9]
30005ad8:	ea000000 	b	30005ae0 <OSMboxPendAbort+0xc4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on mailbox?      */
        nbr_tasks = 0u;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on mailbox  */
30005adc:	e1a00000 	nop			; (mov r0, r0)
30005ae0:	e51b3010 	ldr	r3, [fp, #-16]
30005ae4:	e5d3300a 	ldrb	r3, [r3, #10]
30005ae8:	e3530000 	cmp	r3, #0
30005aec:	1afffff1 	bne	30005ab8 <OSMboxPendAbort+0x9c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
30005af0:	ea000007 	b	30005b14 <OSMboxPendAbort+0xf8>

            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
30005af4:	e51b0010 	ldr	r0, [fp, #-16]
30005af8:	e3a01000 	mov	r1, #0
30005afc:	e3a02002 	mov	r2, #2
30005b00:	e3a03002 	mov	r3, #2
30005b04:	ebfff3c9 	bl	30002a30 <OS_EventTaskRdy>
                 nbr_tasks++;
30005b08:	e55b3009 	ldrb	r3, [fp, #-9]
30005b0c:	e2833001 	add	r3, r3, #1
30005b10:	e54b3009 	strb	r3, [fp, #-9]
                 break;
        }
        OS_EXIT_CRITICAL();
30005b14:	e51b0008 	ldr	r0, [fp, #-8]
30005b18:	ebffe986 	bl	30000138 <OS_CPU_RestoreSR>
        OS_Sched();                                        /* Find HPT ready to run                    */
30005b1c:	ebfff6c9 	bl	30003648 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
30005b20:	e51b3018 	ldr	r3, [fp, #-24]
30005b24:	e3a0200e 	mov	r2, #14
30005b28:	e5c32000 	strb	r2, [r3]
        return (nbr_tasks);
30005b2c:	e55b3009 	ldrb	r3, [fp, #-9]
30005b30:	ea000005 	b	30005b4c <OSMboxPendAbort+0x130>
    }
    OS_EXIT_CRITICAL();
30005b34:	e51b0008 	ldr	r0, [fp, #-8]
30005b38:	ebffe97e 	bl	30000138 <OS_CPU_RestoreSR>
    *perr = OS_ERR_NONE;
30005b3c:	e51b3018 	ldr	r3, [fp, #-24]
30005b40:	e3a02000 	mov	r2, #0
30005b44:	e5c32000 	strb	r2, [r3]
    return (0u);                                           /* No tasks waiting on mailbox              */
30005b48:	e3a03000 	mov	r3, #0
}
30005b4c:	e1a00003 	mov	r0, r3
30005b50:	e24bd004 	sub	sp, fp, #4
30005b54:	e8bd4800 	pop	{fp, lr}
30005b58:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30005b5c <OSMboxPost>:
*/

#if OS_MBOX_POST_EN > 0u
INT8U  OSMboxPost (OS_EVENT  *pevent,
                   void      *pmsg)
{
30005b5c:	e92d4800 	push	{fp, lr}
30005b60:	e28db004 	add	fp, sp, #4
30005b64:	e24dd010 	sub	sp, sp, #16
30005b68:	e50b0010 	str	r0, [fp, #-16]
30005b6c:	e50b1014 	str	r1, [fp, #-20]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30005b70:	e3a03000 	mov	r3, #0
30005b74:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
30005b78:	e51b3010 	ldr	r3, [fp, #-16]
30005b7c:	e3530000 	cmp	r3, #0
30005b80:	1a000001 	bne	30005b8c <OSMboxPost+0x30>
        return (OS_ERR_PEVENT_NULL);
30005b84:	e3a03004 	mov	r3, #4
30005b88:	ea000029 	b	30005c34 <OSMboxPost+0xd8>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
30005b8c:	e51b3014 	ldr	r3, [fp, #-20]
30005b90:	e3530000 	cmp	r3, #0
30005b94:	1a000001 	bne	30005ba0 <OSMboxPost+0x44>
        return (OS_ERR_POST_NULL_PTR);
30005b98:	e3a03003 	mov	r3, #3
30005b9c:	ea000024 	b	30005c34 <OSMboxPost+0xd8>
    }
#endif

    OS_TRACE_MBOX_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
30005ba0:	e51b3010 	ldr	r3, [fp, #-16]
30005ba4:	e5d33000 	ldrb	r3, [r3]
30005ba8:	e3530001 	cmp	r3, #1
30005bac:	0a000001 	beq	30005bb8 <OSMboxPost+0x5c>
        OS_TRACE_MBOX_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
30005bb0:	e3a03001 	mov	r3, #1
30005bb4:	ea00001e 	b	30005c34 <OSMboxPost+0xd8>
    }
    OS_ENTER_CRITICAL();
30005bb8:	ebffe956 	bl	30000118 <OS_CPU_SaveSR>
30005bbc:	e1a03000 	mov	r3, r0
30005bc0:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
30005bc4:	e51b3010 	ldr	r3, [fp, #-16]
30005bc8:	e5d3300a 	ldrb	r3, [r3, #10]
30005bcc:	e3530000 	cmp	r3, #0
30005bd0:	0a000009 	beq	30005bfc <OSMboxPost+0xa0>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
30005bd4:	e51b0010 	ldr	r0, [fp, #-16]
30005bd8:	e51b1014 	ldr	r1, [fp, #-20]
30005bdc:	e3a02002 	mov	r2, #2
30005be0:	e3a03000 	mov	r3, #0
30005be4:	ebfff391 	bl	30002a30 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
30005be8:	e51b0008 	ldr	r0, [fp, #-8]
30005bec:	ebffe951 	bl	30000138 <OS_CPU_RestoreSR>
        OS_Sched();                                   /* Find highest priority task ready to run       */
30005bf0:	ebfff694 	bl	30003648 <OS_Sched>
        OS_TRACE_MBOX_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
30005bf4:	e3a03000 	mov	r3, #0
30005bf8:	ea00000d 	b	30005c34 <OSMboxPost+0xd8>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
30005bfc:	e51b3010 	ldr	r3, [fp, #-16]
30005c00:	e5933004 	ldr	r3, [r3, #4]
30005c04:	e3530000 	cmp	r3, #0
30005c08:	0a000003 	beq	30005c1c <OSMboxPost+0xc0>
        OS_EXIT_CRITICAL();
30005c0c:	e51b0008 	ldr	r0, [fp, #-8]
30005c10:	ebffe948 	bl	30000138 <OS_CPU_RestoreSR>
        OS_TRACE_MBOX_POST_EXIT(OS_ERR_MBOX_FULL);
        return (OS_ERR_MBOX_FULL);
30005c14:	e3a03014 	mov	r3, #20
30005c18:	ea000005 	b	30005c34 <OSMboxPost+0xd8>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
30005c1c:	e51b3010 	ldr	r3, [fp, #-16]
30005c20:	e51b2014 	ldr	r2, [fp, #-20]
30005c24:	e5832004 	str	r2, [r3, #4]
    OS_EXIT_CRITICAL();
30005c28:	e51b0008 	ldr	r0, [fp, #-8]
30005c2c:	ebffe941 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_MBOX_POST_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);
30005c30:	e3a03000 	mov	r3, #0
}
30005c34:	e1a00003 	mov	r0, r3
30005c38:	e24bd004 	sub	sp, fp, #4
30005c3c:	e8bd4800 	pop	{fp, lr}
30005c40:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30005c44 <OSMboxPostOpt>:

#if OS_MBOX_POST_OPT_EN > 0u
INT8U  OSMboxPostOpt (OS_EVENT  *pevent,
                      void      *pmsg,
                      INT8U      opt)
{
30005c44:	e92d4800 	push	{fp, lr}
30005c48:	e28db004 	add	fp, sp, #4
30005c4c:	e24dd018 	sub	sp, sp, #24
30005c50:	e50b0010 	str	r0, [fp, #-16]
30005c54:	e50b1014 	str	r1, [fp, #-20]
30005c58:	e1a03002 	mov	r3, r2
30005c5c:	e54b3015 	strb	r3, [fp, #-21]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30005c60:	e3a03000 	mov	r3, #0
30005c64:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
30005c68:	e51b3010 	ldr	r3, [fp, #-16]
30005c6c:	e3530000 	cmp	r3, #0
30005c70:	1a000001 	bne	30005c7c <OSMboxPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
30005c74:	e3a03004 	mov	r3, #4
30005c78:	ea00003d 	b	30005d74 <OSMboxPostOpt+0x130>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
30005c7c:	e51b3014 	ldr	r3, [fp, #-20]
30005c80:	e3530000 	cmp	r3, #0
30005c84:	1a000001 	bne	30005c90 <OSMboxPostOpt+0x4c>
        return (OS_ERR_POST_NULL_PTR);
30005c88:	e3a03003 	mov	r3, #3
30005c8c:	ea000038 	b	30005d74 <OSMboxPostOpt+0x130>
    }
#endif

    OS_TRACE_MBOX_POST_OPT_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
30005c90:	e51b3010 	ldr	r3, [fp, #-16]
30005c94:	e5d33000 	ldrb	r3, [r3]
30005c98:	e3530001 	cmp	r3, #1
30005c9c:	0a000001 	beq	30005ca8 <OSMboxPostOpt+0x64>
        OS_TRACE_MBOX_POST_OPT_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
30005ca0:	e3a03001 	mov	r3, #1
30005ca4:	ea000032 	b	30005d74 <OSMboxPostOpt+0x130>
    }
    OS_ENTER_CRITICAL();
30005ca8:	ebffe91a 	bl	30000118 <OS_CPU_SaveSR>
30005cac:	e1a03000 	mov	r3, r0
30005cb0:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
30005cb4:	e51b3010 	ldr	r3, [fp, #-16]
30005cb8:	e5d3300a 	ldrb	r3, [r3, #10]
30005cbc:	e3530000 	cmp	r3, #0
30005cc0:	0a00001d 	beq	30005d3c <OSMboxPostOpt+0xf8>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
30005cc4:	e55b3015 	ldrb	r3, [fp, #-21]
30005cc8:	e2033001 	and	r3, r3, #1
30005ccc:	e20330ff 	and	r3, r3, #255	; 0xff
30005cd0:	e3530000 	cmp	r3, #0
30005cd4:	0a00000a 	beq	30005d04 <OSMboxPostOpt+0xc0>
            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on mailbox     */
30005cd8:	ea000004 	b	30005cf0 <OSMboxPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
30005cdc:	e51b0010 	ldr	r0, [fp, #-16]
30005ce0:	e51b1014 	ldr	r1, [fp, #-20]
30005ce4:	e3a02002 	mov	r2, #2
30005ce8:	e3a03000 	mov	r3, #0
30005cec:	ebfff34f 	bl	30002a30 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on mailbox     */
30005cf0:	e51b3010 	ldr	r3, [fp, #-16]
30005cf4:	e5d3300a 	ldrb	r3, [r3, #10]
30005cf8:	e3530000 	cmp	r3, #0
30005cfc:	1afffff6 	bne	30005cdc <OSMboxPostOpt+0x98>
30005d00:	ea000004 	b	30005d18 <OSMboxPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
30005d04:	e51b0010 	ldr	r0, [fp, #-16]
30005d08:	e51b1014 	ldr	r1, [fp, #-20]
30005d0c:	e3a02002 	mov	r2, #2
30005d10:	e3a03000 	mov	r3, #0
30005d14:	ebfff345 	bl	30002a30 <OS_EventTaskRdy>
        }
        OS_EXIT_CRITICAL();
30005d18:	e51b0008 	ldr	r0, [fp, #-8]
30005d1c:	ebffe905 	bl	30000138 <OS_CPU_RestoreSR>
        if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
30005d20:	e55b3015 	ldrb	r3, [fp, #-21]
30005d24:	e2033004 	and	r3, r3, #4
30005d28:	e3530000 	cmp	r3, #0
30005d2c:	1a000000 	bne	30005d34 <OSMboxPostOpt+0xf0>
            OS_Sched();                               /* Find HPT ready to run                         */
30005d30:	ebfff644 	bl	30003648 <OS_Sched>
        }
        OS_TRACE_MBOX_POST_OPT_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
30005d34:	e3a03000 	mov	r3, #0
30005d38:	ea00000d 	b	30005d74 <OSMboxPostOpt+0x130>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
30005d3c:	e51b3010 	ldr	r3, [fp, #-16]
30005d40:	e5933004 	ldr	r3, [r3, #4]
30005d44:	e3530000 	cmp	r3, #0
30005d48:	0a000003 	beq	30005d5c <OSMboxPostOpt+0x118>
        OS_EXIT_CRITICAL();
30005d4c:	e51b0008 	ldr	r0, [fp, #-8]
30005d50:	ebffe8f8 	bl	30000138 <OS_CPU_RestoreSR>
        OS_TRACE_MBOX_POST_OPT_EXIT(OS_ERR_MBOX_FULL);
        return (OS_ERR_MBOX_FULL);
30005d54:	e3a03014 	mov	r3, #20
30005d58:	ea000005 	b	30005d74 <OSMboxPostOpt+0x130>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
30005d5c:	e51b3010 	ldr	r3, [fp, #-16]
30005d60:	e51b2014 	ldr	r2, [fp, #-20]
30005d64:	e5832004 	str	r2, [r3, #4]
    OS_EXIT_CRITICAL();
30005d68:	e51b0008 	ldr	r0, [fp, #-8]
30005d6c:	ebffe8f1 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_MBOX_POST_OPT_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);
30005d70:	e3a03000 	mov	r3, #0
}
30005d74:	e1a00003 	mov	r0, r3
30005d78:	e24bd004 	sub	sp, fp, #4
30005d7c:	e8bd4800 	pop	{fp, lr}
30005d80:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30005d84 <OSMboxQuery>:
*/

#if OS_MBOX_QUERY_EN > 0u
INT8U  OSMboxQuery (OS_EVENT      *pevent,
                    OS_MBOX_DATA  *p_mbox_data)
{
30005d84:	e92d4800 	push	{fp, lr}
30005d88:	e28db004 	add	fp, sp, #4
30005d8c:	e24dd018 	sub	sp, sp, #24
30005d90:	e50b0018 	str	r0, [fp, #-24]
30005d94:	e50b101c 	str	r1, [fp, #-28]
    INT8U       i;
    OS_PRIO    *psrc;
    OS_PRIO    *pdest;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR   cpu_sr = 0u;
30005d98:	e3a03000 	mov	r3, #0
30005d9c:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
30005da0:	e51b3018 	ldr	r3, [fp, #-24]
30005da4:	e3530000 	cmp	r3, #0
30005da8:	1a000001 	bne	30005db4 <OSMboxQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
30005dac:	e3a03004 	mov	r3, #4
30005db0:	ea000031 	b	30005e7c <OSMboxQuery+0xf8>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
30005db4:	e51b301c 	ldr	r3, [fp, #-28]
30005db8:	e3530000 	cmp	r3, #0
30005dbc:	1a000001 	bne	30005dc8 <OSMboxQuery+0x44>
        return (OS_ERR_PDATA_NULL);
30005dc0:	e3a03009 	mov	r3, #9
30005dc4:	ea00002c 	b	30005e7c <OSMboxQuery+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
30005dc8:	e51b3018 	ldr	r3, [fp, #-24]
30005dcc:	e5d33000 	ldrb	r3, [r3]
30005dd0:	e3530001 	cmp	r3, #1
30005dd4:	0a000001 	beq	30005de0 <OSMboxQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
30005dd8:	e3a03001 	mov	r3, #1
30005ddc:	ea000026 	b	30005e7c <OSMboxQuery+0xf8>
    }
    OS_ENTER_CRITICAL();
30005de0:	ebffe8cc 	bl	30000118 <OS_CPU_SaveSR>
30005de4:	e1a03000 	mov	r3, r0
30005de8:	e50b3008 	str	r3, [fp, #-8]
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
30005dec:	e51b3018 	ldr	r3, [fp, #-24]
30005df0:	e5d3200a 	ldrb	r2, [r3, #10]
30005df4:	e51b301c 	ldr	r3, [fp, #-28]
30005df8:	e5c3200c 	strb	r2, [r3, #12]
    psrc                    = &pevent->OSEventTbl[0];
30005dfc:	e51b3018 	ldr	r3, [fp, #-24]
30005e00:	e283300b 	add	r3, r3, #11
30005e04:	e50b3010 	str	r3, [fp, #-16]
    pdest                   = &p_mbox_data->OSEventTbl[0];
30005e08:	e51b301c 	ldr	r3, [fp, #-28]
30005e0c:	e2833004 	add	r3, r3, #4
30005e10:	e50b300c 	str	r3, [fp, #-12]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
30005e14:	e3a03000 	mov	r3, #0
30005e18:	e54b3011 	strb	r3, [fp, #-17]
30005e1c:	ea00000c 	b	30005e54 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
30005e20:	e51b3010 	ldr	r3, [fp, #-16]
30005e24:	e5d32000 	ldrb	r2, [r3]
30005e28:	e51b300c 	ldr	r3, [fp, #-12]
30005e2c:	e5c32000 	strb	r2, [r3]
30005e30:	e51b300c 	ldr	r3, [fp, #-12]
30005e34:	e2833001 	add	r3, r3, #1
30005e38:	e50b300c 	str	r3, [fp, #-12]
30005e3c:	e51b3010 	ldr	r3, [fp, #-16]
30005e40:	e2833001 	add	r3, r3, #1
30005e44:	e50b3010 	str	r3, [fp, #-16]
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
30005e48:	e55b3011 	ldrb	r3, [fp, #-17]
30005e4c:	e2833001 	add	r3, r3, #1
30005e50:	e54b3011 	strb	r3, [fp, #-17]
30005e54:	e55b3011 	ldrb	r3, [fp, #-17]
30005e58:	e3530007 	cmp	r3, #7
30005e5c:	9affffef 	bls	30005e20 <OSMboxQuery+0x9c>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
30005e60:	e51b3018 	ldr	r3, [fp, #-24]
30005e64:	e5932004 	ldr	r2, [r3, #4]
30005e68:	e51b301c 	ldr	r3, [fp, #-28]
30005e6c:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
30005e70:	e51b0008 	ldr	r0, [fp, #-8]
30005e74:	ebffe8af 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_NONE);
30005e78:	e3a03000 	mov	r3, #0
}
30005e7c:	e1a00003 	mov	r0, r3
30005e80:	e24bd004 	sub	sp, fp, #4
30005e84:	e8bd4800 	pop	{fp, lr}
30005e88:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30005e8c <OSMemCreate>:

OS_MEM  *OSMemCreate (void   *addr,
                      INT32U  nblks,
                      INT32U  blksize,
                      INT8U  *perr)
{
30005e8c:	e92d4800 	push	{fp, lr}
30005e90:	e28db004 	add	fp, sp, #4
30005e94:	e24dd028 	sub	sp, sp, #40	; 0x28
30005e98:	e50b0020 	str	r0, [fp, #-32]
30005e9c:	e50b1024 	str	r1, [fp, #-36]	; 0x24
30005ea0:	e50b2028 	str	r2, [fp, #-40]	; 0x28
30005ea4:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
    INT8U     *pblk;
    void     **plink;
    INT32U     loops;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30005ea8:	e3a03000 	mov	r3, #0
30005eac:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_MEM *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
30005eb0:	e51b3020 	ldr	r3, [fp, #-32]
30005eb4:	e3530000 	cmp	r3, #0
30005eb8:	1a000004 	bne	30005ed0 <OSMemCreate+0x44>
        *perr = OS_ERR_MEM_INVALID_ADDR;
30005ebc:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
30005ec0:	e3a02062 	mov	r2, #98	; 0x62
30005ec4:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
30005ec8:	e3a03000 	mov	r3, #0
30005ecc:	ea000062 	b	3000605c <OSMemCreate+0x1d0>
    }
    if (((INT32U)addr & (sizeof(void *) - 1u)) != 0u){  /* Must be pointer size aligned                */
30005ed0:	e51b3020 	ldr	r3, [fp, #-32]
30005ed4:	e2033003 	and	r3, r3, #3
30005ed8:	e3530000 	cmp	r3, #0
30005edc:	0a000004 	beq	30005ef4 <OSMemCreate+0x68>
        *perr = OS_ERR_MEM_INVALID_ADDR;
30005ee0:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
30005ee4:	e3a02062 	mov	r2, #98	; 0x62
30005ee8:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
30005eec:	e3a03000 	mov	r3, #0
30005ef0:	ea000059 	b	3000605c <OSMemCreate+0x1d0>
    }
    if (nblks < 2u) {                                 /* Must have at least 2 blocks per partition     */
30005ef4:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30005ef8:	e3530001 	cmp	r3, #1
30005efc:	8a000004 	bhi	30005f14 <OSMemCreate+0x88>
        *perr = OS_ERR_MEM_INVALID_BLKS;
30005f00:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
30005f04:	e3a0205b 	mov	r2, #91	; 0x5b
30005f08:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
30005f0c:	e3a03000 	mov	r3, #0
30005f10:	ea000051 	b	3000605c <OSMemCreate+0x1d0>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
30005f14:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30005f18:	e3530003 	cmp	r3, #3
30005f1c:	8a000004 	bhi	30005f34 <OSMemCreate+0xa8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
30005f20:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
30005f24:	e3a0205c 	mov	r2, #92	; 0x5c
30005f28:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
30005f2c:	e3a03000 	mov	r3, #0
30005f30:	ea000049 	b	3000605c <OSMemCreate+0x1d0>
    }
#endif
    OS_ENTER_CRITICAL();
30005f34:	ebffe877 	bl	30000118 <OS_CPU_SaveSR>
30005f38:	e1a03000 	mov	r3, r0
30005f3c:	e50b3008 	str	r3, [fp, #-8]
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
30005f40:	e59f3124 	ldr	r3, [pc, #292]	; 3000606c <OSMemCreate+0x1e0>
30005f44:	e5933000 	ldr	r3, [r3]
30005f48:	e50b301c 	str	r3, [fp, #-28]
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
30005f4c:	e59f3118 	ldr	r3, [pc, #280]	; 3000606c <OSMemCreate+0x1e0>
30005f50:	e5933000 	ldr	r3, [r3]
30005f54:	e3530000 	cmp	r3, #0
30005f58:	0a000005 	beq	30005f74 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
30005f5c:	e59f3108 	ldr	r3, [pc, #264]	; 3000606c <OSMemCreate+0x1e0>
30005f60:	e5933000 	ldr	r3, [r3]
30005f64:	e5933004 	ldr	r3, [r3, #4]
30005f68:	e1a02003 	mov	r2, r3
30005f6c:	e59f30f8 	ldr	r3, [pc, #248]	; 3000606c <OSMemCreate+0x1e0>
30005f70:	e5832000 	str	r2, [r3]
    }
    OS_EXIT_CRITICAL();
30005f74:	e51b0008 	ldr	r0, [fp, #-8]
30005f78:	ebffe86e 	bl	30000138 <OS_CPU_RestoreSR>
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
30005f7c:	e51b301c 	ldr	r3, [fp, #-28]
30005f80:	e3530000 	cmp	r3, #0
30005f84:	1a000004 	bne	30005f9c <OSMemCreate+0x110>
        *perr = OS_ERR_MEM_INVALID_PART;
30005f88:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
30005f8c:	e3a0205a 	mov	r2, #90	; 0x5a
30005f90:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
30005f94:	e3a03000 	mov	r3, #0
30005f98:	ea00002f 	b	3000605c <OSMemCreate+0x1d0>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
30005f9c:	e51b3020 	ldr	r3, [fp, #-32]
30005fa0:	e50b3014 	str	r3, [fp, #-20]
    pblk  = (INT8U *)addr;
30005fa4:	e51b3020 	ldr	r3, [fp, #-32]
30005fa8:	e50b3018 	str	r3, [fp, #-24]
    loops  = nblks - 1u;
30005fac:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30005fb0:	e2433001 	sub	r3, r3, #1
30005fb4:	e50b3010 	str	r3, [fp, #-16]
    for (i = 0u; i < loops; i++) {
30005fb8:	e3a03000 	mov	r3, #0
30005fbc:	e50b300c 	str	r3, [fp, #-12]
30005fc0:	ea00000b 	b	30005ff4 <OSMemCreate+0x168>
        pblk +=  blksize;                             /* Point to the FOLLOWING block                  */
30005fc4:	e51b2018 	ldr	r2, [fp, #-24]
30005fc8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30005fcc:	e0823003 	add	r3, r2, r3
30005fd0:	e50b3018 	str	r3, [fp, #-24]
       *plink = (void  *)pblk;                        /* Save pointer to NEXT block in CURRENT block   */
30005fd4:	e51b3014 	ldr	r3, [fp, #-20]
30005fd8:	e51b2018 	ldr	r2, [fp, #-24]
30005fdc:	e5832000 	str	r2, [r3]
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
30005fe0:	e51b3018 	ldr	r3, [fp, #-24]
30005fe4:	e50b3014 	str	r3, [fp, #-20]
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)addr;
    loops  = nblks - 1u;
    for (i = 0u; i < loops; i++) {
30005fe8:	e51b300c 	ldr	r3, [fp, #-12]
30005fec:	e2833001 	add	r3, r3, #1
30005ff0:	e50b300c 	str	r3, [fp, #-12]
30005ff4:	e51b200c 	ldr	r2, [fp, #-12]
30005ff8:	e51b3010 	ldr	r3, [fp, #-16]
30005ffc:	e1520003 	cmp	r2, r3
30006000:	3affffef 	bcc	30005fc4 <OSMemCreate+0x138>
        pblk +=  blksize;                             /* Point to the FOLLOWING block                  */
       *plink = (void  *)pblk;                        /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
30006004:	e51b3014 	ldr	r3, [fp, #-20]
30006008:	e3a02000 	mov	r2, #0
3000600c:	e5832000 	str	r2, [r3]
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
30006010:	e51b301c 	ldr	r3, [fp, #-28]
30006014:	e51b2020 	ldr	r2, [fp, #-32]
30006018:	e5832000 	str	r2, [r3]
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
3000601c:	e51b301c 	ldr	r3, [fp, #-28]
30006020:	e51b2020 	ldr	r2, [fp, #-32]
30006024:	e5832004 	str	r2, [r3, #4]
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
30006028:	e51b301c 	ldr	r3, [fp, #-28]
3000602c:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
30006030:	e5832010 	str	r2, [r3, #16]
    pmem->OSMemNBlks    = nblks;
30006034:	e51b301c 	ldr	r3, [fp, #-28]
30006038:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
3000603c:	e583200c 	str	r2, [r3, #12]
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
30006040:	e51b301c 	ldr	r3, [fp, #-28]
30006044:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
30006048:	e5832008 	str	r2, [r3, #8]

    OS_TRACE_MEM_CREATE(pmem);

    *perr               = OS_ERR_NONE;
3000604c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
30006050:	e3a02000 	mov	r2, #0
30006054:	e5c32000 	strb	r2, [r3]
    return (pmem);
30006058:	e51b301c 	ldr	r3, [fp, #-28]
}
3000605c:	e1a00003 	mov	r0, r3
30006060:	e24bd004 	sub	sp, fp, #4
30006064:	e8bd4800 	pop	{fp, lr}
30006068:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000606c:	30017960 	.word	0x30017960

30006070 <OSMemGet>:
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM  *pmem,
                 INT8U   *perr)
{
30006070:	e92d4800 	push	{fp, lr}
30006074:	e28db004 	add	fp, sp, #4
30006078:	e24dd010 	sub	sp, sp, #16
3000607c:	e50b0010 	str	r0, [fp, #-16]
30006080:	e50b1014 	str	r1, [fp, #-20]
    void      *pblk;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30006084:	e3a03000 	mov	r3, #0
30006088:	e50b3008 	str	r3, [fp, #-8]
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
3000608c:	e51b3010 	ldr	r3, [fp, #-16]
30006090:	e3530000 	cmp	r3, #0
30006094:	1a000004 	bne	300060ac <OSMemGet+0x3c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
30006098:	e51b3014 	ldr	r3, [fp, #-20]
3000609c:	e3a02060 	mov	r2, #96	; 0x60
300060a0:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
300060a4:	e3a03000 	mov	r3, #0
300060a8:	ea00001f 	b	3000612c <OSMemGet+0xbc>
    }
#endif

    OS_TRACE_MEM_GET_ENTER(pmem);

    OS_ENTER_CRITICAL();
300060ac:	ebffe819 	bl	30000118 <OS_CPU_SaveSR>
300060b0:	e1a03000 	mov	r3, r0
300060b4:	e50b3008 	str	r3, [fp, #-8]
    if (pmem->OSMemNFree > 0u) {                      /* See if there are any free memory blocks       */
300060b8:	e51b3010 	ldr	r3, [fp, #-16]
300060bc:	e5933010 	ldr	r3, [r3, #16]
300060c0:	e3530000 	cmp	r3, #0
300060c4:	0a000012 	beq	30006114 <OSMemGet+0xa4>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
300060c8:	e51b3010 	ldr	r3, [fp, #-16]
300060cc:	e5933004 	ldr	r3, [r3, #4]
300060d0:	e50b300c 	str	r3, [fp, #-12]
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
300060d4:	e51b300c 	ldr	r3, [fp, #-12]
300060d8:	e5932000 	ldr	r2, [r3]
300060dc:	e51b3010 	ldr	r3, [fp, #-16]
300060e0:	e5832004 	str	r2, [r3, #4]
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
300060e4:	e51b3010 	ldr	r3, [fp, #-16]
300060e8:	e5933010 	ldr	r3, [r3, #16]
300060ec:	e2432001 	sub	r2, r3, #1
300060f0:	e51b3010 	ldr	r3, [fp, #-16]
300060f4:	e5832010 	str	r2, [r3, #16]
        OS_EXIT_CRITICAL();
300060f8:	e51b0008 	ldr	r0, [fp, #-8]
300060fc:	ebffe80d 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_NONE;                          /*      No error                                 */
30006100:	e51b3014 	ldr	r3, [fp, #-20]
30006104:	e3a02000 	mov	r2, #0
30006108:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MEM_GET_EXIT(*perr);
        return (pblk);                                /*      Return memory block to caller            */
3000610c:	e51b300c 	ldr	r3, [fp, #-12]
30006110:	ea000005 	b	3000612c <OSMemGet+0xbc>
    }
    OS_EXIT_CRITICAL();
30006114:	e51b0008 	ldr	r0, [fp, #-8]
30006118:	ebffe806 	bl	30000138 <OS_CPU_RestoreSR>
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
3000611c:	e51b3014 	ldr	r3, [fp, #-20]
30006120:	e3a0205d 	mov	r2, #93	; 0x5d
30006124:	e5c32000 	strb	r2, [r3]
    OS_TRACE_MEM_GET_EXIT(*perr);
    return ((void *)0);                               /*      Return NULL pointer to caller            */
30006128:	e3a03000 	mov	r3, #0
}
3000612c:	e1a00003 	mov	r0, r3
30006130:	e24bd004 	sub	sp, fp, #4
30006134:	e8bd4800 	pop	{fp, lr}
30006138:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

3000613c <OSMemNameGet>:

#if OS_MEM_NAME_EN > 0u
INT8U  OSMemNameGet (OS_MEM   *pmem,
                     INT8U   **pname,
                     INT8U    *perr)
{
3000613c:	e92d4800 	push	{fp, lr}
30006140:	e28db004 	add	fp, sp, #4
30006144:	e24dd018 	sub	sp, sp, #24
30006148:	e50b0010 	str	r0, [fp, #-16]
3000614c:	e50b1014 	str	r1, [fp, #-20]
30006150:	e50b2018 	str	r2, [fp, #-24]
    INT8U      len;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30006154:	e3a03000 	mov	r3, #0
30006158:	e50b3008 	str	r3, [fp, #-8]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
3000615c:	e51b3010 	ldr	r3, [fp, #-16]
30006160:	e3530000 	cmp	r3, #0
30006164:	1a000004 	bne	3000617c <OSMemNameGet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
30006168:	e51b3018 	ldr	r3, [fp, #-24]
3000616c:	e3a02060 	mov	r2, #96	; 0x60
30006170:	e5c32000 	strb	r2, [r3]
        return (0u);
30006174:	e3a03000 	mov	r3, #0
30006178:	ea000023 	b	3000620c <OSMemNameGet+0xd0>
    }
    if (pname == (INT8U **)0) {                  /* Is 'pname' a NULL pointer?                         */
3000617c:	e51b3014 	ldr	r3, [fp, #-20]
30006180:	e3530000 	cmp	r3, #0
30006184:	1a000004 	bne	3000619c <OSMemNameGet+0x60>
        *perr = OS_ERR_PNAME_NULL;
30006188:	e51b3018 	ldr	r3, [fp, #-24]
3000618c:	e3a0200c 	mov	r2, #12
30006190:	e5c32000 	strb	r2, [r3]
        return (0u);
30006194:	e3a03000 	mov	r3, #0
30006198:	ea00001b 	b	3000620c <OSMemNameGet+0xd0>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
3000619c:	e59f3078 	ldr	r3, [pc, #120]	; 3000621c <OSMemNameGet+0xe0>
300061a0:	e5d33000 	ldrb	r3, [r3]
300061a4:	e3530000 	cmp	r3, #0
300061a8:	0a000004 	beq	300061c0 <OSMemNameGet+0x84>
        *perr = OS_ERR_NAME_GET_ISR;
300061ac:	e51b3018 	ldr	r3, [fp, #-24]
300061b0:	e3a02011 	mov	r2, #17
300061b4:	e5c32000 	strb	r2, [r3]
        return (0u);
300061b8:	e3a03000 	mov	r3, #0
300061bc:	ea000012 	b	3000620c <OSMemNameGet+0xd0>
    }
    OS_ENTER_CRITICAL();
300061c0:	ebffe7d4 	bl	30000118 <OS_CPU_SaveSR>
300061c4:	e1a03000 	mov	r3, r0
300061c8:	e50b3008 	str	r3, [fp, #-8]
    *pname = pmem->OSMemName;
300061cc:	e51b3010 	ldr	r3, [fp, #-16]
300061d0:	e5932014 	ldr	r2, [r3, #20]
300061d4:	e51b3014 	ldr	r3, [fp, #-20]
300061d8:	e5832000 	str	r2, [r3]
    len    = OS_StrLen(*pname);
300061dc:	e51b3014 	ldr	r3, [fp, #-20]
300061e0:	e5933000 	ldr	r3, [r3]
300061e4:	e1a00003 	mov	r0, r3
300061e8:	ebfff566 	bl	30003788 <OS_StrLen>
300061ec:	e1a03000 	mov	r3, r0
300061f0:	e54b3009 	strb	r3, [fp, #-9]
    OS_EXIT_CRITICAL();
300061f4:	e51b0008 	ldr	r0, [fp, #-8]
300061f8:	ebffe7ce 	bl	30000138 <OS_CPU_RestoreSR>
    *perr  = OS_ERR_NONE;
300061fc:	e51b3018 	ldr	r3, [fp, #-24]
30006200:	e3a02000 	mov	r2, #0
30006204:	e5c32000 	strb	r2, [r3]
    return (len);
30006208:	e55b3009 	ldrb	r3, [fp, #-9]
}
3000620c:	e1a00003 	mov	r0, r3
30006210:	e24bd004 	sub	sp, fp, #4
30006214:	e8bd4800 	pop	{fp, lr}
30006218:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000621c:	30017bdc 	.word	0x30017bdc

30006220 <OSMemNameSet>:

#if OS_MEM_NAME_EN > 0u
void  OSMemNameSet (OS_MEM  *pmem,
                    INT8U   *pname,
                    INT8U   *perr)
{
30006220:	e92d4800 	push	{fp, lr}
30006224:	e28db004 	add	fp, sp, #4
30006228:	e24dd018 	sub	sp, sp, #24
3000622c:	e50b0010 	str	r0, [fp, #-16]
30006230:	e50b1014 	str	r1, [fp, #-20]
30006234:	e50b2018 	str	r2, [fp, #-24]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30006238:	e3a03000 	mov	r3, #0
3000623c:	e50b3008 	str	r3, [fp, #-8]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
30006240:	e51b3010 	ldr	r3, [fp, #-16]
30006244:	e3530000 	cmp	r3, #0
30006248:	1a000003 	bne	3000625c <OSMemNameSet+0x3c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
3000624c:	e51b3018 	ldr	r3, [fp, #-24]
30006250:	e3a02060 	mov	r2, #96	; 0x60
30006254:	e5c32000 	strb	r2, [r3]
        return;
30006258:	ea000019 	b	300062c4 <OSMemNameSet+0xa4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
3000625c:	e51b3014 	ldr	r3, [fp, #-20]
30006260:	e3530000 	cmp	r3, #0
30006264:	1a000003 	bne	30006278 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
30006268:	e51b3018 	ldr	r3, [fp, #-24]
3000626c:	e3a0200c 	mov	r2, #12
30006270:	e5c32000 	strb	r2, [r3]
        return;
30006274:	ea000012 	b	300062c4 <OSMemNameSet+0xa4>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
30006278:	e59f3050 	ldr	r3, [pc, #80]	; 300062d0 <OSMemNameSet+0xb0>
3000627c:	e5d33000 	ldrb	r3, [r3]
30006280:	e3530000 	cmp	r3, #0
30006284:	0a000003 	beq	30006298 <OSMemNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
30006288:	e51b3018 	ldr	r3, [fp, #-24]
3000628c:	e3a02012 	mov	r2, #18
30006290:	e5c32000 	strb	r2, [r3]
        return;
30006294:	ea00000a 	b	300062c4 <OSMemNameSet+0xa4>
    }
    OS_ENTER_CRITICAL();
30006298:	ebffe79e 	bl	30000118 <OS_CPU_SaveSR>
3000629c:	e1a03000 	mov	r3, r0
300062a0:	e50b3008 	str	r3, [fp, #-8]
    pmem->OSMemName = pname;
300062a4:	e51b3010 	ldr	r3, [fp, #-16]
300062a8:	e51b2014 	ldr	r2, [fp, #-20]
300062ac:	e5832014 	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
300062b0:	e51b0008 	ldr	r0, [fp, #-8]
300062b4:	ebffe79f 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_EVENT_NAME_SET(pmem, pname);
    *perr           = OS_ERR_NONE;
300062b8:	e51b3018 	ldr	r3, [fp, #-24]
300062bc:	e3a02000 	mov	r2, #0
300062c0:	e5c32000 	strb	r2, [r3]
}
300062c4:	e24bd004 	sub	sp, fp, #4
300062c8:	e8bd4800 	pop	{fp, lr}
300062cc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300062d0:	30017bdc 	.word	0x30017bdc

300062d4 <OSMemPut>:
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM  *pmem,
                 void    *pblk)
{
300062d4:	e92d4800 	push	{fp, lr}
300062d8:	e28db004 	add	fp, sp, #4
300062dc:	e24dd010 	sub	sp, sp, #16
300062e0:	e50b0010 	str	r0, [fp, #-16]
300062e4:	e50b1014 	str	r1, [fp, #-20]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
300062e8:	e3a03000 	mov	r3, #0
300062ec:	e50b3008 	str	r3, [fp, #-8]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
300062f0:	e51b3010 	ldr	r3, [fp, #-16]
300062f4:	e3530000 	cmp	r3, #0
300062f8:	1a000001 	bne	30006304 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
300062fc:	e3a03060 	mov	r3, #96	; 0x60
30006300:	ea000020 	b	30006388 <OSMemPut+0xb4>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
30006304:	e51b3014 	ldr	r3, [fp, #-20]
30006308:	e3530000 	cmp	r3, #0
3000630c:	1a000001 	bne	30006318 <OSMemPut+0x44>
        return (OS_ERR_MEM_INVALID_PBLK);
30006310:	e3a0305f 	mov	r3, #95	; 0x5f
30006314:	ea00001b 	b	30006388 <OSMemPut+0xb4>
    }
#endif

    OS_TRACE_MEM_PUT_ENTER(pmem, pblk);

    OS_ENTER_CRITICAL();
30006318:	ebffe77e 	bl	30000118 <OS_CPU_SaveSR>
3000631c:	e1a03000 	mov	r3, r0
30006320:	e50b3008 	str	r3, [fp, #-8]
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
30006324:	e51b3010 	ldr	r3, [fp, #-16]
30006328:	e5932010 	ldr	r2, [r3, #16]
3000632c:	e51b3010 	ldr	r3, [fp, #-16]
30006330:	e593300c 	ldr	r3, [r3, #12]
30006334:	e1520003 	cmp	r2, r3
30006338:	3a000003 	bcc	3000634c <OSMemPut+0x78>
        OS_EXIT_CRITICAL();
3000633c:	e51b0008 	ldr	r0, [fp, #-8]
30006340:	ebffe77c 	bl	30000138 <OS_CPU_RestoreSR>
        OS_TRACE_MEM_PUT_EXIT(OS_ERR_MEM_FULL);
        return (OS_ERR_MEM_FULL);
30006344:	e3a0305e 	mov	r3, #94	; 0x5e
30006348:	ea00000e 	b	30006388 <OSMemPut+0xb4>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
3000634c:	e51b3014 	ldr	r3, [fp, #-20]
30006350:	e51b2010 	ldr	r2, [fp, #-16]
30006354:	e5922004 	ldr	r2, [r2, #4]
30006358:	e5832000 	str	r2, [r3]
    pmem->OSMemFreeList = pblk;
3000635c:	e51b3010 	ldr	r3, [fp, #-16]
30006360:	e51b2014 	ldr	r2, [fp, #-20]
30006364:	e5832004 	str	r2, [r3, #4]
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
30006368:	e51b3010 	ldr	r3, [fp, #-16]
3000636c:	e5933010 	ldr	r3, [r3, #16]
30006370:	e2832001 	add	r2, r3, #1
30006374:	e51b3010 	ldr	r3, [fp, #-16]
30006378:	e5832010 	str	r2, [r3, #16]
    OS_EXIT_CRITICAL();
3000637c:	e51b0008 	ldr	r0, [fp, #-8]
30006380:	ebffe76c 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_MEM_PUT_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
30006384:	e3a03000 	mov	r3, #0
}
30006388:	e1a00003 	mov	r0, r3
3000638c:	e24bd004 	sub	sp, fp, #4
30006390:	e8bd4800 	pop	{fp, lr}
30006394:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30006398 <OSMemQuery>:
*/

#if OS_MEM_QUERY_EN > 0u
INT8U  OSMemQuery (OS_MEM       *pmem,
                   OS_MEM_DATA  *p_mem_data)
{
30006398:	e92d4800 	push	{fp, lr}
3000639c:	e28db004 	add	fp, sp, #4
300063a0:	e24dd010 	sub	sp, sp, #16
300063a4:	e50b0010 	str	r0, [fp, #-16]
300063a8:	e50b1014 	str	r1, [fp, #-20]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
300063ac:	e3a03000 	mov	r3, #0
300063b0:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
300063b4:	e51b3010 	ldr	r3, [fp, #-16]
300063b8:	e3530000 	cmp	r3, #0
300063bc:	1a000001 	bne	300063c8 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
300063c0:	e3a03060 	mov	r3, #96	; 0x60
300063c4:	ea000025 	b	30006460 <OSMemQuery+0xc8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
300063c8:	e51b3014 	ldr	r3, [fp, #-20]
300063cc:	e3530000 	cmp	r3, #0
300063d0:	1a000001 	bne	300063dc <OSMemQuery+0x44>
        return (OS_ERR_MEM_INVALID_PDATA);
300063d4:	e3a03061 	mov	r3, #97	; 0x61
300063d8:	ea000020 	b	30006460 <OSMemQuery+0xc8>
    }
#endif
    OS_ENTER_CRITICAL();
300063dc:	ebffe74d 	bl	30000118 <OS_CPU_SaveSR>
300063e0:	e1a03000 	mov	r3, r0
300063e4:	e50b3008 	str	r3, [fp, #-8]
    p_mem_data->OSAddr     = pmem->OSMemAddr;
300063e8:	e51b3010 	ldr	r3, [fp, #-16]
300063ec:	e5932000 	ldr	r2, [r3]
300063f0:	e51b3014 	ldr	r3, [fp, #-20]
300063f4:	e5832000 	str	r2, [r3]
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
300063f8:	e51b3010 	ldr	r3, [fp, #-16]
300063fc:	e5932004 	ldr	r2, [r3, #4]
30006400:	e51b3014 	ldr	r3, [fp, #-20]
30006404:	e5832004 	str	r2, [r3, #4]
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
30006408:	e51b3010 	ldr	r3, [fp, #-16]
3000640c:	e5932008 	ldr	r2, [r3, #8]
30006410:	e51b3014 	ldr	r3, [fp, #-20]
30006414:	e5832008 	str	r2, [r3, #8]
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
30006418:	e51b3010 	ldr	r3, [fp, #-16]
3000641c:	e593200c 	ldr	r2, [r3, #12]
30006420:	e51b3014 	ldr	r3, [fp, #-20]
30006424:	e583200c 	str	r2, [r3, #12]
    p_mem_data->OSNFree    = pmem->OSMemNFree;
30006428:	e51b3010 	ldr	r3, [fp, #-16]
3000642c:	e5932010 	ldr	r2, [r3, #16]
30006430:	e51b3014 	ldr	r3, [fp, #-20]
30006434:	e5832010 	str	r2, [r3, #16]
    OS_EXIT_CRITICAL();
30006438:	e51b0008 	ldr	r0, [fp, #-8]
3000643c:	ebffe73d 	bl	30000138 <OS_CPU_RestoreSR>
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
30006440:	e51b3014 	ldr	r3, [fp, #-20]
30006444:	e593200c 	ldr	r2, [r3, #12]
30006448:	e51b3014 	ldr	r3, [fp, #-20]
3000644c:	e5933010 	ldr	r3, [r3, #16]
30006450:	e0632002 	rsb	r2, r3, r2
30006454:	e51b3014 	ldr	r3, [fp, #-20]
30006458:	e5832014 	str	r2, [r3, #20]
    return (OS_ERR_NONE);
3000645c:	e3a03000 	mov	r3, #0
}
30006460:	e1a00003 	mov	r0, r3
30006464:	e24bd004 	sub	sp, fp, #4
30006468:	e8bd4800 	pop	{fp, lr}
3000646c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30006470 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
30006470:	e92d4800 	push	{fp, lr}
30006474:	e28db004 	add	fp, sp, #4
30006478:	e24dd008 	sub	sp, sp, #8
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
3000647c:	e59f30dc 	ldr	r3, [pc, #220]	; 30006560 <OS_MemInit+0xf0>
30006480:	e1a00003 	mov	r0, r3
30006484:	e3a01078 	mov	r1, #120	; 0x78
30006488:	ebfff43d 	bl	30003584 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
3000648c:	e3a03000 	mov	r3, #0
30006490:	e14b30b6 	strh	r3, [fp, #-6]
30006494:	ea000019 	b	30006500 <OS_MemInit+0x90>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
30006498:	e15b20b6 	ldrh	r2, [fp, #-6]
3000649c:	e1a03002 	mov	r3, r2
300064a0:	e1a03083 	lsl	r3, r3, #1
300064a4:	e0833002 	add	r3, r3, r2
300064a8:	e1a03183 	lsl	r3, r3, #3
300064ac:	e1a02003 	mov	r2, r3
300064b0:	e59f30a8 	ldr	r3, [pc, #168]	; 30006560 <OS_MemInit+0xf0>
300064b4:	e0823003 	add	r3, r2, r3
300064b8:	e50b300c 	str	r3, [fp, #-12]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
300064bc:	e15b30b6 	ldrh	r3, [fp, #-6]
300064c0:	e2832001 	add	r2, r3, #1
300064c4:	e1a03002 	mov	r3, r2
300064c8:	e1a03083 	lsl	r3, r3, #1
300064cc:	e0833002 	add	r3, r3, r2
300064d0:	e1a03183 	lsl	r3, r3, #3
300064d4:	e1a02003 	mov	r2, r3
300064d8:	e59f3080 	ldr	r3, [pc, #128]	; 30006560 <OS_MemInit+0xf0>
300064dc:	e0822003 	add	r2, r2, r3
300064e0:	e51b300c 	ldr	r3, [fp, #-12]
300064e4:	e5832004 	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
300064e8:	e51b300c 	ldr	r3, [fp, #-12]
300064ec:	e59f2070 	ldr	r2, [pc, #112]	; 30006564 <OS_MemInit+0xf4>
300064f0:	e5832014 	str	r2, [r3, #20]
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
300064f4:	e15b30b6 	ldrh	r3, [fp, #-6]
300064f8:	e2833001 	add	r3, r3, #1
300064fc:	e14b30b6 	strh	r3, [fp, #-6]
30006500:	e15b30b6 	ldrh	r3, [fp, #-6]
30006504:	e3530003 	cmp	r3, #3
30006508:	9affffe2 	bls	30006498 <OS_MemInit+0x28>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
#endif
    }
    pmem                = &OSMemTbl[i];
3000650c:	e15b20b6 	ldrh	r2, [fp, #-6]
30006510:	e1a03002 	mov	r3, r2
30006514:	e1a03083 	lsl	r3, r3, #1
30006518:	e0833002 	add	r3, r3, r2
3000651c:	e1a03183 	lsl	r3, r3, #3
30006520:	e1a02003 	mov	r2, r3
30006524:	e59f3034 	ldr	r3, [pc, #52]	; 30006560 <OS_MemInit+0xf0>
30006528:	e0823003 	add	r3, r2, r3
3000652c:	e50b300c 	str	r3, [fp, #-12]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
30006530:	e51b300c 	ldr	r3, [fp, #-12]
30006534:	e3a02000 	mov	r2, #0
30006538:	e5832004 	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
3000653c:	e51b300c 	ldr	r3, [fp, #-12]
30006540:	e59f201c 	ldr	r2, [pc, #28]	; 30006564 <OS_MemInit+0xf4>
30006544:	e5832014 	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
30006548:	e59f3018 	ldr	r3, [pc, #24]	; 30006568 <OS_MemInit+0xf8>
3000654c:	e59f200c 	ldr	r2, [pc, #12]	; 30006560 <OS_MemInit+0xf0>
30006550:	e5832000 	str	r2, [r3]
#endif
}
30006554:	e24bd004 	sub	sp, fp, #4
30006558:	e8bd4800 	pop	{fp, lr}
3000655c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30006560:	300176d4 	.word	0x300176d4
30006564:	3000c278 	.word	0x3000c278
30006568:	30017960 	.word	0x30017960

3000656c <OSMutexAccept>:
*/

#if OS_MUTEX_ACCEPT_EN > 0u
BOOLEAN  OSMutexAccept (OS_EVENT  *pevent,
                        INT8U     *perr)
{
3000656c:	e92d4800 	push	{fp, lr}
30006570:	e28db004 	add	fp, sp, #4
30006574:	e24dd010 	sub	sp, sp, #16
30006578:	e50b0010 	str	r0, [fp, #-16]
3000657c:	e50b1014 	str	r1, [fp, #-20]
    INT8U      pcp;                                    /* Priority Ceiling Priority (PCP)              */
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
30006580:	e3a03000 	mov	r3, #0
30006584:	e50b3008 	str	r3, [fp, #-8]
        return (OS_FALSE);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
30006588:	e51b3010 	ldr	r3, [fp, #-16]
3000658c:	e3530000 	cmp	r3, #0
30006590:	1a000004 	bne	300065a8 <OSMutexAccept+0x3c>
        *perr = OS_ERR_PEVENT_NULL;
30006594:	e51b3014 	ldr	r3, [fp, #-20]
30006598:	e3a02004 	mov	r2, #4
3000659c:	e5c32000 	strb	r2, [r3]
        return (OS_FALSE);
300065a0:	e3a03000 	mov	r3, #0
300065a4:	ea00004e 	b	300066e4 <OSMutexAccept+0x178>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
300065a8:	e51b3010 	ldr	r3, [fp, #-16]
300065ac:	e5d33000 	ldrb	r3, [r3]
300065b0:	e3530004 	cmp	r3, #4
300065b4:	0a000004 	beq	300065cc <OSMutexAccept+0x60>
        *perr = OS_ERR_EVENT_TYPE;
300065b8:	e51b3014 	ldr	r3, [fp, #-20]
300065bc:	e3a02001 	mov	r2, #1
300065c0:	e5c32000 	strb	r2, [r3]
        return (OS_FALSE);
300065c4:	e3a03000 	mov	r3, #0
300065c8:	ea000045 	b	300066e4 <OSMutexAccept+0x178>
    }
    if (OSIntNesting > 0u) {                           /* Make sure it's not called from an ISR        */
300065cc:	e59f3120 	ldr	r3, [pc, #288]	; 300066f4 <OSMutexAccept+0x188>
300065d0:	e5d33000 	ldrb	r3, [r3]
300065d4:	e3530000 	cmp	r3, #0
300065d8:	0a000004 	beq	300065f0 <OSMutexAccept+0x84>
        *perr = OS_ERR_PEND_ISR;
300065dc:	e51b3014 	ldr	r3, [fp, #-20]
300065e0:	e3a02002 	mov	r2, #2
300065e4:	e5c32000 	strb	r2, [r3]
        return (OS_FALSE);
300065e8:	e3a03000 	mov	r3, #0
300065ec:	ea00003c 	b	300066e4 <OSMutexAccept+0x178>
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
300065f0:	ebffe6c8 	bl	30000118 <OS_CPU_SaveSR>
300065f4:	e1a03000 	mov	r3, r0
300065f8:	e50b3008 	str	r3, [fp, #-8]
    pcp = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PCP from mutex                           */
300065fc:	e51b3010 	ldr	r3, [fp, #-16]
30006600:	e1d330b8 	ldrh	r3, [r3, #8]
30006604:	e1a03423 	lsr	r3, r3, #8
30006608:	e1a03803 	lsl	r3, r3, #16
3000660c:	e1a03823 	lsr	r3, r3, #16
30006610:	e54b3009 	strb	r3, [fp, #-9]
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
30006614:	e51b3010 	ldr	r3, [fp, #-16]
30006618:	e1d330b8 	ldrh	r3, [r3, #8]
3000661c:	e20330ff 	and	r3, r3, #255	; 0xff
30006620:	e35300ff 	cmp	r3, #255	; 0xff
30006624:	1a000028 	bne	300066cc <OSMutexAccept+0x160>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
30006628:	e51b3010 	ldr	r3, [fp, #-16]
3000662c:	e1d330b8 	ldrh	r3, [r3, #8]
30006630:	e2033cff 	and	r3, r3, #65280	; 0xff00
30006634:	e51b2010 	ldr	r2, [fp, #-16]
30006638:	e1c230b8 	strh	r3, [r2, #8]
        pevent->OSEventCnt |= (INT16U)OSTCBCur->OSTCBPrio;  /* Save current task priority in LSByte    */
3000663c:	e51b3010 	ldr	r3, [fp, #-16]
30006640:	e1d320b8 	ldrh	r2, [r3, #8]
30006644:	e59f30ac 	ldr	r3, [pc, #172]	; 300066f8 <OSMutexAccept+0x18c>
30006648:	e5933000 	ldr	r3, [r3]
3000664c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30006650:	e1823003 	orr	r3, r2, r3
30006654:	e1a03803 	lsl	r3, r3, #16
30006658:	e1a02823 	lsr	r2, r3, #16
3000665c:	e51b3010 	ldr	r3, [fp, #-16]
30006660:	e1c320b8 	strh	r2, [r3, #8]
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
30006664:	e59f308c 	ldr	r3, [pc, #140]	; 300066f8 <OSMutexAccept+0x18c>
30006668:	e5932000 	ldr	r2, [r3]
3000666c:	e51b3010 	ldr	r3, [fp, #-16]
30006670:	e5832004 	str	r2, [r3, #4]
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
30006674:	e55b3009 	ldrb	r3, [fp, #-9]
30006678:	e35300ff 	cmp	r3, #255	; 0xff
3000667c:	0a00000b 	beq	300066b0 <OSMutexAccept+0x144>
            (OSTCBCur->OSTCBPrio <= pcp)) {            /*      PCP 'must' have a SMALLER prio ...      */
30006680:	e59f3070 	ldr	r3, [pc, #112]	; 300066f8 <OSMutexAccept+0x18c>
30006684:	e5933000 	ldr	r3, [r3]
30006688:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
    pcp = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PCP from mutex                           */
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
        pevent->OSEventCnt |= (INT16U)OSTCBCur->OSTCBPrio;  /* Save current task priority in LSByte    */
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
3000668c:	e55b2009 	ldrb	r2, [fp, #-9]
30006690:	e1520003 	cmp	r2, r3
30006694:	3a000005 	bcc	300066b0 <OSMutexAccept+0x144>
            (OSTCBCur->OSTCBPrio <= pcp)) {            /*      PCP 'must' have a SMALLER prio ...      */
             OS_EXIT_CRITICAL();                       /*      ... than current task!                  */
30006698:	e51b0008 	ldr	r0, [fp, #-8]
3000669c:	ebffe6a5 	bl	30000138 <OS_CPU_RestoreSR>
            *perr = OS_ERR_PCP_LOWER;
300066a0:	e51b3014 	ldr	r3, [fp, #-20]
300066a4:	e3a02078 	mov	r2, #120	; 0x78
300066a8:	e5c32000 	strb	r2, [r3]
    pcp = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PCP from mutex                           */
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
        pevent->OSEventCnt |= (INT16U)OSTCBCur->OSTCBPrio;  /* Save current task priority in LSByte    */
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
300066ac:	ea000004 	b	300066c4 <OSMutexAccept+0x158>
            (OSTCBCur->OSTCBPrio <= pcp)) {            /*      PCP 'must' have a SMALLER prio ...      */
             OS_EXIT_CRITICAL();                       /*      ... than current task!                  */
            *perr = OS_ERR_PCP_LOWER;
        } else {
             OS_EXIT_CRITICAL();
300066b0:	e51b0008 	ldr	r0, [fp, #-8]
300066b4:	ebffe69f 	bl	30000138 <OS_CPU_RestoreSR>
            *perr = OS_ERR_NONE;
300066b8:	e51b3014 	ldr	r3, [fp, #-20]
300066bc:	e3a02000 	mov	r2, #0
300066c0:	e5c32000 	strb	r2, [r3]
        }
        return (OS_TRUE);
300066c4:	e3a03001 	mov	r3, #1
300066c8:	ea000005 	b	300066e4 <OSMutexAccept+0x178>
    }
    OS_EXIT_CRITICAL();
300066cc:	e51b0008 	ldr	r0, [fp, #-8]
300066d0:	ebffe698 	bl	30000138 <OS_CPU_RestoreSR>
    *perr = OS_ERR_NONE;
300066d4:	e51b3014 	ldr	r3, [fp, #-20]
300066d8:	e3a02000 	mov	r2, #0
300066dc:	e5c32000 	strb	r2, [r3]
    return (OS_FALSE);
300066e0:	e3a03000 	mov	r3, #0
}
300066e4:	e1a00003 	mov	r0, r3
300066e8:	e24bd004 	sub	sp, fp, #4
300066ec:	e8bd4800 	pop	{fp, lr}
300066f0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300066f4:	30017bdc 	.word	0x30017bdc
300066f8:	30017be0 	.word	0x30017be0

300066fc <OSMutexCreate>:
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U   prio,
                          INT8U  *perr)
{
300066fc:	e92d4800 	push	{fp, lr}
30006700:	e28db004 	add	fp, sp, #4
30006704:	e24dd010 	sub	sp, sp, #16
30006708:	e1a03000 	mov	r3, r0
3000670c:	e50b1014 	str	r1, [fp, #-20]
30006710:	e54b300d 	strb	r3, [fp, #-13]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
30006714:	e3a03000 	mov	r3, #0
30006718:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_EVENT *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
3000671c:	e55b300d 	ldrb	r3, [fp, #-13]
30006720:	e35300ff 	cmp	r3, #255	; 0xff
30006724:	0a000007 	beq	30006748 <OSMutexCreate+0x4c>
        if (prio >= OS_LOWEST_PRIO) {                      /* Validate PCP                             */
30006728:	e55b300d 	ldrb	r3, [fp, #-13]
3000672c:	e353003e 	cmp	r3, #62	; 0x3e
30006730:	9a000004 	bls	30006748 <OSMutexCreate+0x4c>
           *perr = OS_ERR_PRIO_INVALID;
30006734:	e51b3014 	ldr	r3, [fp, #-20]
30006738:	e3a0202a 	mov	r2, #42	; 0x2a
3000673c:	e5c32000 	strb	r2, [r3]
            return ((OS_EVENT *)0);
30006740:	e3a03000 	mov	r3, #0
30006744:	ea000052 	b	30006894 <OSMutexCreate+0x198>
        }
    }
#endif
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
30006748:	e59f3154 	ldr	r3, [pc, #340]	; 300068a4 <OSMutexCreate+0x1a8>
3000674c:	e5d33000 	ldrb	r3, [r3]
30006750:	e3530000 	cmp	r3, #0
30006754:	0a000004 	beq	3000676c <OSMutexCreate+0x70>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
30006758:	e51b3014 	ldr	r3, [fp, #-20]
3000675c:	e3a02010 	mov	r2, #16
30006760:	e5c32000 	strb	r2, [r3]
        return ((OS_EVENT *)0);
30006764:	e3a03000 	mov	r3, #0
30006768:	ea000049 	b	30006894 <OSMutexCreate+0x198>
    }
    OS_ENTER_CRITICAL();
3000676c:	ebffe669 	bl	30000118 <OS_CPU_SaveSR>
30006770:	e1a03000 	mov	r3, r0
30006774:	e50b3008 	str	r3, [fp, #-8]
    if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
30006778:	e55b300d 	ldrb	r3, [fp, #-13]
3000677c:	e35300ff 	cmp	r3, #255	; 0xff
30006780:	0a00000f 	beq	300067c4 <OSMutexCreate+0xc8>
        if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {           /* Mutex priority must not already exist    */
30006784:	e55b200d 	ldrb	r2, [fp, #-13]
30006788:	e59f3118 	ldr	r3, [pc, #280]	; 300068a8 <OSMutexCreate+0x1ac>
3000678c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
30006790:	e3530000 	cmp	r3, #0
30006794:	0a000006 	beq	300067b4 <OSMutexCreate+0xb8>
            OS_EXIT_CRITICAL();                            /* Task already exist at priority ...       */
30006798:	e51b0008 	ldr	r0, [fp, #-8]
3000679c:	ebffe665 	bl	30000138 <OS_CPU_RestoreSR>
           *perr = OS_ERR_PRIO_EXIST;                      /* ... ceiling priority                     */
300067a0:	e51b3014 	ldr	r3, [fp, #-20]
300067a4:	e3a02028 	mov	r2, #40	; 0x28
300067a8:	e5c32000 	strb	r2, [r3]
            return ((OS_EVENT *)0);
300067ac:	e3a03000 	mov	r3, #0
300067b0:	ea000037 	b	30006894 <OSMutexCreate+0x198>
        }
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;              /* Reserve the table entry                  */
300067b4:	e55b200d 	ldrb	r2, [fp, #-13]
300067b8:	e59f30e8 	ldr	r3, [pc, #232]	; 300068a8 <OSMutexCreate+0x1ac>
300067bc:	e3a01001 	mov	r1, #1
300067c0:	e7831102 	str	r1, [r3, r2, lsl #2]
    }

    pevent = OSEventFreeList;                              /* Get next free event control block        */
300067c4:	e59f30e0 	ldr	r3, [pc, #224]	; 300068ac <OSMutexCreate+0x1b0>
300067c8:	e5933000 	ldr	r3, [r3]
300067cc:	e50b300c 	str	r3, [fp, #-12]
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
300067d0:	e51b300c 	ldr	r3, [fp, #-12]
300067d4:	e3530000 	cmp	r3, #0
300067d8:	1a00000d 	bne	30006814 <OSMutexCreate+0x118>
        if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
300067dc:	e55b300d 	ldrb	r3, [fp, #-13]
300067e0:	e35300ff 	cmp	r3, #255	; 0xff
300067e4:	0a000003 	beq	300067f8 <OSMutexCreate+0xfc>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;              /* No, Release the table entry              */
300067e8:	e55b200d 	ldrb	r2, [fp, #-13]
300067ec:	e59f30b4 	ldr	r3, [pc, #180]	; 300068a8 <OSMutexCreate+0x1ac>
300067f0:	e3a01000 	mov	r1, #0
300067f4:	e7831102 	str	r1, [r3, r2, lsl #2]
        }
        OS_EXIT_CRITICAL();
300067f8:	e51b0008 	ldr	r0, [fp, #-8]
300067fc:	ebffe64d 	bl	30000138 <OS_CPU_RestoreSR>
       *perr = OS_ERR_PEVENT_NULL;                         /* No more event control blocks             */
30006800:	e51b3014 	ldr	r3, [fp, #-20]
30006804:	e3a02004 	mov	r2, #4
30006808:	e5c32000 	strb	r2, [r3]
        return (pevent);
3000680c:	e51b300c 	ldr	r3, [fp, #-12]
30006810:	ea00001f 	b	30006894 <OSMutexCreate+0x198>
    }
    OSEventFreeList     = (OS_EVENT *)OSEventFreeList->OSEventPtr; /* Adjust the free list             */
30006814:	e59f3090 	ldr	r3, [pc, #144]	; 300068ac <OSMutexCreate+0x1b0>
30006818:	e5933000 	ldr	r3, [r3]
3000681c:	e5933004 	ldr	r3, [r3, #4]
30006820:	e1a02003 	mov	r2, r3
30006824:	e59f3080 	ldr	r3, [pc, #128]	; 300068ac <OSMutexCreate+0x1b0>
30006828:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
3000682c:	e51b0008 	ldr	r0, [fp, #-8]
30006830:	ebffe640 	bl	30000138 <OS_CPU_RestoreSR>
    pevent->OSEventType = OS_EVENT_TYPE_MUTEX;
30006834:	e51b300c 	ldr	r3, [fp, #-12]
30006838:	e3a02004 	mov	r2, #4
3000683c:	e5c32000 	strb	r2, [r3]
    pevent->OSEventCnt  = (INT16U)((INT16U)prio << 8u) | OS_MUTEX_AVAILABLE; /* Resource is avail.     */
30006840:	e55b300d 	ldrb	r3, [fp, #-13]
30006844:	e1a03403 	lsl	r3, r3, #8
30006848:	e1a03803 	lsl	r3, r3, #16
3000684c:	e1a03823 	lsr	r3, r3, #16
30006850:	e38330ff 	orr	r3, r3, #255	; 0xff
30006854:	e1a03803 	lsl	r3, r3, #16
30006858:	e1a02823 	lsr	r2, r3, #16
3000685c:	e51b300c 	ldr	r3, [fp, #-12]
30006860:	e1c320b8 	strh	r2, [r3, #8]
    pevent->OSEventPtr  = (void *)0;                       /* No task owning the mutex                 */
30006864:	e51b300c 	ldr	r3, [fp, #-12]
30006868:	e3a02000 	mov	r2, #0
3000686c:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent->OSEventName = (INT8U *)(void *)"?";
30006870:	e51b300c 	ldr	r3, [fp, #-12]
30006874:	e59f2034 	ldr	r2, [pc, #52]	; 300068b0 <OSMutexCreate+0x1b4>
30006878:	e5832014 	str	r2, [r3, #20]
#endif
    OS_EventWaitListInit(pevent);
3000687c:	e51b000c 	ldr	r0, [fp, #-12]
30006880:	ebfff1f2 	bl	30003050 <OS_EventWaitListInit>
    OS_TRACE_MUTEX_CREATE(pevent, pevent->OSEventName);
   *perr = OS_ERR_NONE;
30006884:	e51b3014 	ldr	r3, [fp, #-20]
30006888:	e3a02000 	mov	r2, #0
3000688c:	e5c32000 	strb	r2, [r3]
    return (pevent);
30006890:	e51b300c 	ldr	r3, [fp, #-12]
}
30006894:	e1a00003 	mov	r0, r3
30006898:	e24bd004 	sub	sp, fp, #4
3000689c:	e8bd4800 	pop	{fp, lr}
300068a0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300068a4:	30017bdc 	.word	0x30017bdc
300068a8:	300186d0 	.word	0x300186d0
300068ac:	30017bd8 	.word	0x30017bd8
300068b0:	3000c278 	.word	0x3000c278

300068b4 <OSMutexDel>:

#if OS_MUTEX_DEL_EN > 0u
OS_EVENT  *OSMutexDel (OS_EVENT  *pevent,
                       INT8U      opt,
                       INT8U     *perr)
{
300068b4:	e92d4800 	push	{fp, lr}
300068b8:	e28db004 	add	fp, sp, #4
300068bc:	e24dd028 	sub	sp, sp, #40	; 0x28
300068c0:	e50b0020 	str	r0, [fp, #-32]
300068c4:	e1a03001 	mov	r3, r1
300068c8:	e50b2028 	str	r2, [fp, #-40]	; 0x28
300068cc:	e54b3021 	strb	r3, [fp, #-33]	; 0x21
    OS_EVENT  *pevent_return;
    INT8U      pcp;                                        /* Priority ceiling priority                */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
300068d0:	e3a03000 	mov	r3, #0
300068d4:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_EVENT *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
300068d8:	e51b3020 	ldr	r3, [fp, #-32]
300068dc:	e3530000 	cmp	r3, #0
300068e0:	1a000004 	bne	300068f8 <OSMutexDel+0x44>
        *perr = OS_ERR_PEVENT_NULL;
300068e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
300068e8:	e3a02004 	mov	r2, #4
300068ec:	e5c32000 	strb	r2, [r3]
        return (pevent);
300068f0:	e51b3020 	ldr	r3, [fp, #-32]
300068f4:	ea0000af 	b	30006bb8 <OSMutexDel+0x304>
    }
#endif

    OS_TRACE_MUTEX_DEL_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
300068f8:	e51b3020 	ldr	r3, [fp, #-32]
300068fc:	e5d33000 	ldrb	r3, [r3]
30006900:	e3530004 	cmp	r3, #4
30006904:	0a000004 	beq	3000691c <OSMutexDel+0x68>
        *perr = OS_ERR_EVENT_TYPE;
30006908:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
3000690c:	e3a02001 	mov	r2, #1
30006910:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MUTEX_DEL_EXIT(*perr);
        return (pevent);
30006914:	e51b3020 	ldr	r3, [fp, #-32]
30006918:	ea0000a6 	b	30006bb8 <OSMutexDel+0x304>
    }
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
3000691c:	e59f32a4 	ldr	r3, [pc, #676]	; 30006bc8 <OSMutexDel+0x314>
30006920:	e5d33000 	ldrb	r3, [r3]
30006924:	e3530000 	cmp	r3, #0
30006928:	0a000004 	beq	30006940 <OSMutexDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
3000692c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006930:	e3a0200f 	mov	r2, #15
30006934:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MUTEX_DEL_EXIT(*perr);
        return (pevent);
30006938:	e51b3020 	ldr	r3, [fp, #-32]
3000693c:	ea00009d 	b	30006bb8 <OSMutexDel+0x304>
    }
    OS_ENTER_CRITICAL();
30006940:	ebffe5f4 	bl	30000118 <OS_CPU_SaveSR>
30006944:	e1a03000 	mov	r3, r0
30006948:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mutex        */
3000694c:	e51b3020 	ldr	r3, [fp, #-32]
30006950:	e5d3300a 	ldrb	r3, [r3, #10]
30006954:	e3530000 	cmp	r3, #0
30006958:	0a000002 	beq	30006968 <OSMutexDel+0xb4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
3000695c:	e3a03001 	mov	r3, #1
30006960:	e54b3015 	strb	r3, [fp, #-21]
30006964:	ea000001 	b	30006970 <OSMutexDel+0xbc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
30006968:	e3a03000 	mov	r3, #0
3000696c:	e54b3015 	strb	r3, [fp, #-21]
    }
    switch (opt) {
30006970:	e55b3021 	ldrb	r3, [fp, #-33]	; 0x21
30006974:	e3530000 	cmp	r3, #0
30006978:	0a000002 	beq	30006988 <OSMutexDel+0xd4>
3000697c:	e3530001 	cmp	r3, #1
30006980:	0a000030 	beq	30006a48 <OSMutexDel+0x194>
30006984:	ea000083 	b	30006b98 <OSMutexDel+0x2e4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
30006988:	e55b3015 	ldrb	r3, [fp, #-21]
3000698c:	e3530000 	cmp	r3, #0
30006990:	1a000024 	bne	30006a28 <OSMutexDel+0x174>
#if OS_EVENT_NAME_EN > 0u
                 pevent->OSEventName   = (INT8U *)(void *)"?";
30006994:	e51b3020 	ldr	r3, [fp, #-32]
30006998:	e59f222c 	ldr	r2, [pc, #556]	; 30006bcc <OSMutexDel+0x318>
3000699c:	e5832014 	str	r2, [r3, #20]
#endif
                 pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
300069a0:	e51b3020 	ldr	r3, [fp, #-32]
300069a4:	e1d330b8 	ldrh	r3, [r3, #8]
300069a8:	e1a03423 	lsr	r3, r3, #8
300069ac:	e1a03803 	lsl	r3, r3, #16
300069b0:	e1a03823 	lsr	r3, r3, #16
300069b4:	e54b300e 	strb	r3, [fp, #-14]
                 if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
300069b8:	e55b300e 	ldrb	r3, [fp, #-14]
300069bc:	e35300ff 	cmp	r3, #255	; 0xff
300069c0:	0a000003 	beq	300069d4 <OSMutexDel+0x120>
                     OSTCBPrioTbl[pcp] = (OS_TCB *)0;      /* Free up the PCP                          */
300069c4:	e55b200e 	ldrb	r2, [fp, #-14]
300069c8:	e59f3200 	ldr	r3, [pc, #512]	; 30006bd0 <OSMutexDel+0x31c>
300069cc:	e3a01000 	mov	r1, #0
300069d0:	e7831102 	str	r1, [r3, r2, lsl #2]
                 }
                 pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
300069d4:	e51b3020 	ldr	r3, [fp, #-32]
300069d8:	e3a02000 	mov	r2, #0
300069dc:	e5c32000 	strb	r2, [r3]
                 pevent->OSEventPtr    = OSEventFreeList;  /* Return Event Control Block to free list  */
300069e0:	e59f31ec 	ldr	r3, [pc, #492]	; 30006bd4 <OSMutexDel+0x320>
300069e4:	e5932000 	ldr	r2, [r3]
300069e8:	e51b3020 	ldr	r3, [fp, #-32]
300069ec:	e5832004 	str	r2, [r3, #4]
                 pevent->OSEventCnt    = 0u;
300069f0:	e51b3020 	ldr	r3, [fp, #-32]
300069f4:	e3a02000 	mov	r2, #0
300069f8:	e1c320b8 	strh	r2, [r3, #8]
                 OSEventFreeList       = pevent;
300069fc:	e59f31d0 	ldr	r3, [pc, #464]	; 30006bd4 <OSMutexDel+0x320>
30006a00:	e51b2020 	ldr	r2, [fp, #-32]
30006a04:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
30006a08:	e51b0008 	ldr	r0, [fp, #-8]
30006a0c:	ebffe5c9 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                 = OS_ERR_NONE;
30006a10:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006a14:	e3a02000 	mov	r2, #0
30006a18:	e5c32000 	strb	r2, [r3]
                 pevent_return         = (OS_EVENT *)0;    /* Mutex has been deleted                   */
30006a1c:	e3a03000 	mov	r3, #0
30006a20:	e50b3014 	str	r3, [fp, #-20]
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                 = OS_ERR_TASK_WAITING;
                 pevent_return         = pevent;
             }
             break;
30006a24:	ea000062 	b	30006bb4 <OSMutexDel+0x300>
                 OSEventFreeList       = pevent;
                 OS_EXIT_CRITICAL();
                 *perr                 = OS_ERR_NONE;
                 pevent_return         = (OS_EVENT *)0;    /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
30006a28:	e51b0008 	ldr	r0, [fp, #-8]
30006a2c:	ebffe5c1 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                 = OS_ERR_TASK_WAITING;
30006a30:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006a34:	e3a02049 	mov	r2, #73	; 0x49
30006a38:	e5c32000 	strb	r2, [r3]
                 pevent_return         = pevent;
30006a3c:	e51b3020 	ldr	r3, [fp, #-32]
30006a40:	e50b3014 	str	r3, [fp, #-20]
             }
             break;
30006a44:	ea00005a 	b	30006bb4 <OSMutexDel+0x300>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pcp  = (INT8U)(pevent->OSEventCnt >> 8u);                       /* Get PCP of mutex       */
30006a48:	e51b3020 	ldr	r3, [fp, #-32]
30006a4c:	e1d330b8 	ldrh	r3, [r3, #8]
30006a50:	e1a03423 	lsr	r3, r3, #8
30006a54:	e1a03803 	lsl	r3, r3, #16
30006a58:	e1a03823 	lsr	r3, r3, #16
30006a5c:	e54b300e 	strb	r3, [fp, #-14]
             if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
30006a60:	e55b300e 	ldrb	r3, [fp, #-14]
30006a64:	e35300ff 	cmp	r3, #255	; 0xff
30006a68:	0a000018 	beq	30006ad0 <OSMutexDel+0x21c>
                 prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /* Get owner's orig prio  */
30006a6c:	e51b3020 	ldr	r3, [fp, #-32]
30006a70:	e1d330b8 	ldrh	r3, [r3, #8]
30006a74:	e54b300d 	strb	r3, [fp, #-13]
                 ptcb = (OS_TCB *)pevent->OSEventPtr;
30006a78:	e51b3020 	ldr	r3, [fp, #-32]
30006a7c:	e5933004 	ldr	r3, [r3, #4]
30006a80:	e50b300c 	str	r3, [fp, #-12]
                 if (ptcb != (OS_TCB *)0) {                /* See if any task owns the mutex           */
30006a84:	e51b300c 	ldr	r3, [fp, #-12]
30006a88:	e3530000 	cmp	r3, #0
30006a8c:	0a000011 	beq	30006ad8 <OSMutexDel+0x224>
                     if (ptcb->OSTCBPrio == pcp) {         /* See if original prio was changed         */
30006a90:	e51b300c 	ldr	r3, [fp, #-12]
30006a94:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30006a98:	e55b200e 	ldrb	r2, [fp, #-14]
30006a9c:	e1520003 	cmp	r2, r3
30006aa0:	1a00000e 	bne	30006ae0 <OSMutexDel+0x22c>
                         OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCur, prio);
                         OSMutex_RdyAtPrio(ptcb, prio);    /* Yes, Restore the task's original prio    */
30006aa4:	e55b300d 	ldrb	r3, [fp, #-13]
30006aa8:	e51b000c 	ldr	r0, [fp, #-12]
30006aac:	e1a01003 	mov	r1, r3
30006ab0:	eb00029b 	bl	30007524 <OSMutex_RdyAtPrio>
                     }
                 }
             }
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
30006ab4:	ea00000a 	b	30006ae4 <OSMutexDel+0x230>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_ABORT);
30006ab8:	e51b0020 	ldr	r0, [fp, #-32]
30006abc:	e3a01000 	mov	r1, #0
30006ac0:	e3a02010 	mov	r2, #16
30006ac4:	e3a03002 	mov	r3, #2
30006ac8:	ebffefd8 	bl	30002a30 <OS_EventTaskRdy>
30006acc:	ea000004 	b	30006ae4 <OSMutexDel+0x230>
                         OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCur, prio);
                         OSMutex_RdyAtPrio(ptcb, prio);    /* Yes, Restore the task's original prio    */
                     }
                 }
             }
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
30006ad0:	e1a00000 	nop			; (mov r0, r0)
30006ad4:	ea000002 	b	30006ae4 <OSMutexDel+0x230>
30006ad8:	e1a00000 	nop			; (mov r0, r0)
30006adc:	ea000000 	b	30006ae4 <OSMutexDel+0x230>
30006ae0:	e1a00000 	nop			; (mov r0, r0)
30006ae4:	e51b3020 	ldr	r3, [fp, #-32]
30006ae8:	e5d3300a 	ldrb	r3, [r3, #10]
30006aec:	e3530000 	cmp	r3, #0
30006af0:	1afffff0 	bne	30006ab8 <OSMutexDel+0x204>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_ABORT);
             }
#if OS_EVENT_NAME_EN > 0u
             pevent->OSEventName   = (INT8U *)(void *)"?";
30006af4:	e51b3020 	ldr	r3, [fp, #-32]
30006af8:	e59f20cc 	ldr	r2, [pc, #204]	; 30006bcc <OSMutexDel+0x318>
30006afc:	e5832014 	str	r2, [r3, #20]
#endif
             pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
30006b00:	e51b3020 	ldr	r3, [fp, #-32]
30006b04:	e1d330b8 	ldrh	r3, [r3, #8]
30006b08:	e1a03423 	lsr	r3, r3, #8
30006b0c:	e1a03803 	lsl	r3, r3, #16
30006b10:	e1a03823 	lsr	r3, r3, #16
30006b14:	e54b300e 	strb	r3, [fp, #-14]
             if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
30006b18:	e55b300e 	ldrb	r3, [fp, #-14]
30006b1c:	e35300ff 	cmp	r3, #255	; 0xff
30006b20:	0a000003 	beq	30006b34 <OSMutexDel+0x280>
                 OSTCBPrioTbl[pcp] = (OS_TCB *)0;          /* Free up the PCP                          */
30006b24:	e55b200e 	ldrb	r2, [fp, #-14]
30006b28:	e59f30a0 	ldr	r3, [pc, #160]	; 30006bd0 <OSMutexDel+0x31c>
30006b2c:	e3a01000 	mov	r1, #0
30006b30:	e7831102 	str	r1, [r3, r2, lsl #2]
             }
             pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
30006b34:	e51b3020 	ldr	r3, [fp, #-32]
30006b38:	e3a02000 	mov	r2, #0
30006b3c:	e5c32000 	strb	r2, [r3]
             pevent->OSEventPtr    = OSEventFreeList;      /* Return Event Control Block to free list  */
30006b40:	e59f308c 	ldr	r3, [pc, #140]	; 30006bd4 <OSMutexDel+0x320>
30006b44:	e5932000 	ldr	r2, [r3]
30006b48:	e51b3020 	ldr	r3, [fp, #-32]
30006b4c:	e5832004 	str	r2, [r3, #4]
             pevent->OSEventCnt    = 0u;
30006b50:	e51b3020 	ldr	r3, [fp, #-32]
30006b54:	e3a02000 	mov	r2, #0
30006b58:	e1c320b8 	strh	r2, [r3, #8]
             OSEventFreeList       = pevent;               /* Get next free event control block        */
30006b5c:	e59f3070 	ldr	r3, [pc, #112]	; 30006bd4 <OSMutexDel+0x320>
30006b60:	e51b2020 	ldr	r2, [fp, #-32]
30006b64:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
30006b68:	e51b0008 	ldr	r0, [fp, #-8]
30006b6c:	ebffe571 	bl	30000138 <OS_CPU_RestoreSR>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
30006b70:	e55b3015 	ldrb	r3, [fp, #-21]
30006b74:	e3530001 	cmp	r3, #1
30006b78:	1a000000 	bne	30006b80 <OSMutexDel+0x2cc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
30006b7c:	ebfff2b1 	bl	30003648 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
30006b80:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006b84:	e3a02000 	mov	r2, #0
30006b88:	e5c32000 	strb	r2, [r3]
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
30006b8c:	e3a03000 	mov	r3, #0
30006b90:	e50b3014 	str	r3, [fp, #-20]
             break;
30006b94:	ea000006 	b	30006bb4 <OSMutexDel+0x300>

        default:
             OS_EXIT_CRITICAL();
30006b98:	e51b0008 	ldr	r0, [fp, #-8]
30006b9c:	ebffe565 	bl	30000138 <OS_CPU_RestoreSR>
             *perr         = OS_ERR_INVALID_OPT;
30006ba0:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006ba4:	e3a02007 	mov	r2, #7
30006ba8:	e5c32000 	strb	r2, [r3]
             pevent_return = pevent;
30006bac:	e51b3020 	ldr	r3, [fp, #-32]
30006bb0:	e50b3014 	str	r3, [fp, #-20]
             break;
    }

    OS_TRACE_MUTEX_DEL_EXIT(*perr);

    return (pevent_return);
30006bb4:	e51b3014 	ldr	r3, [fp, #-20]
}
30006bb8:	e1a00003 	mov	r0, r3
30006bbc:	e24bd004 	sub	sp, fp, #4
30006bc0:	e8bd4800 	pop	{fp, lr}
30006bc4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30006bc8:	30017bdc 	.word	0x30017bdc
30006bcc:	3000c278 	.word	0x3000c278
30006bd0:	300186d0 	.word	0x300186d0
30006bd4:	30017bd8 	.word	0x30017bd8

30006bd8 <OSMutexPend>:
*/

void  OSMutexPend (OS_EVENT  *pevent,
                   INT32U     timeout,
                   INT8U     *perr)
{
30006bd8:	e92d4800 	push	{fp, lr}
30006bdc:	e28db004 	add	fp, sp, #4
30006be0:	e24dd028 	sub	sp, sp, #40	; 0x28
30006be4:	e50b0020 	str	r0, [fp, #-32]
30006be8:	e50b1024 	str	r1, [fp, #-36]	; 0x24
30006bec:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
30006bf0:	e3a03000 	mov	r3, #0
30006bf4:	e50b3008 	str	r3, [fp, #-8]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
30006bf8:	e51b3020 	ldr	r3, [fp, #-32]
30006bfc:	e3530000 	cmp	r3, #0
30006c00:	1a000003 	bne	30006c14 <OSMutexPend+0x3c>
        *perr = OS_ERR_PEVENT_NULL;
30006c04:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006c08:	e3a02004 	mov	r2, #4
30006c0c:	e5c32000 	strb	r2, [r3]
        return;
30006c10:	ea00015b 	b	30007184 <OSMutexPend+0x5ac>
    }
#endif

    OS_TRACE_MUTEX_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
30006c14:	e51b3020 	ldr	r3, [fp, #-32]
30006c18:	e5d33000 	ldrb	r3, [r3]
30006c1c:	e3530004 	cmp	r3, #4
30006c20:	0a000003 	beq	30006c34 <OSMutexPend+0x5c>
        *perr = OS_ERR_EVENT_TYPE;
30006c24:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006c28:	e3a02001 	mov	r2, #1
30006c2c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MUTEX_PEND_EXIT(*perr);
        return;
30006c30:	ea000153 	b	30007184 <OSMutexPend+0x5ac>
    }
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
30006c34:	e59f3554 	ldr	r3, [pc, #1364]	; 30007190 <OSMutexPend+0x5b8>
30006c38:	e5d33000 	ldrb	r3, [r3]
30006c3c:	e3530000 	cmp	r3, #0
30006c40:	0a000003 	beq	30006c54 <OSMutexPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
30006c44:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006c48:	e3a02002 	mov	r2, #2
30006c4c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MUTEX_PEND_EXIT(*perr);
        return;
30006c50:	ea00014b 	b	30007184 <OSMutexPend+0x5ac>
    }
    if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
30006c54:	e59f3538 	ldr	r3, [pc, #1336]	; 30007194 <OSMutexPend+0x5bc>
30006c58:	e5d33000 	ldrb	r3, [r3]
30006c5c:	e3530000 	cmp	r3, #0
30006c60:	0a000003 	beq	30006c74 <OSMutexPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
30006c64:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006c68:	e3a0200d 	mov	r2, #13
30006c6c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_MUTEX_PEND_EXIT(*perr);
        return;
30006c70:	ea000143 	b	30007184 <OSMutexPend+0x5ac>
    }

    OS_ENTER_CRITICAL();
30006c74:	ebffe527 	bl	30000118 <OS_CPU_SaveSR>
30006c78:	e1a03000 	mov	r3, r0
30006c7c:	e50b3008 	str	r3, [fp, #-8]
    pcp = (INT8U)(pevent->OSEventCnt >> 8u);               /* Get PCP from mutex                       */
30006c80:	e51b3020 	ldr	r3, [fp, #-32]
30006c84:	e1d330b8 	ldrh	r3, [r3, #8]
30006c88:	e1a03423 	lsr	r3, r3, #8
30006c8c:	e1a03803 	lsl	r3, r3, #16
30006c90:	e1a03823 	lsr	r3, r3, #16
30006c94:	e54b3017 	strb	r3, [fp, #-23]
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
30006c98:	e51b3020 	ldr	r3, [fp, #-32]
30006c9c:	e1d330b8 	ldrh	r3, [r3, #8]
30006ca0:	e20330ff 	and	r3, r3, #255	; 0xff
30006ca4:	e35300ff 	cmp	r3, #255	; 0xff
30006ca8:	1a000028 	bne	30006d50 <OSMutexPend+0x178>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
30006cac:	e51b3020 	ldr	r3, [fp, #-32]
30006cb0:	e1d330b8 	ldrh	r3, [r3, #8]
30006cb4:	e2033cff 	and	r3, r3, #65280	; 0xff00
30006cb8:	e51b2020 	ldr	r2, [fp, #-32]
30006cbc:	e1c230b8 	strh	r3, [r2, #8]
        pevent->OSEventCnt |= (INT16U)OSTCBCur->OSTCBPrio; /*      Save priority of owning task        */
30006cc0:	e51b3020 	ldr	r3, [fp, #-32]
30006cc4:	e1d320b8 	ldrh	r2, [r3, #8]
30006cc8:	e59f34c8 	ldr	r3, [pc, #1224]	; 30007198 <OSMutexPend+0x5c0>
30006ccc:	e5933000 	ldr	r3, [r3]
30006cd0:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30006cd4:	e1823003 	orr	r3, r2, r3
30006cd8:	e1a03803 	lsl	r3, r3, #16
30006cdc:	e1a02823 	lsr	r2, r3, #16
30006ce0:	e51b3020 	ldr	r3, [fp, #-32]
30006ce4:	e1c320b8 	strh	r2, [r3, #8]
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
30006ce8:	e59f34a8 	ldr	r3, [pc, #1192]	; 30007198 <OSMutexPend+0x5c0>
30006cec:	e5932000 	ldr	r2, [r3]
30006cf0:	e51b3020 	ldr	r3, [fp, #-32]
30006cf4:	e5832004 	str	r2, [r3, #4]
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
30006cf8:	e55b3017 	ldrb	r3, [fp, #-23]
30006cfc:	e35300ff 	cmp	r3, #255	; 0xff
30006d00:	0a00000c 	beq	30006d38 <OSMutexPend+0x160>
            (OSTCBCur->OSTCBPrio <= pcp)) {                /*      PCP 'must' have a SMALLER prio ...  */
30006d04:	e59f348c 	ldr	r3, [pc, #1164]	; 30007198 <OSMutexPend+0x5c0>
30006d08:	e5933000 	ldr	r3, [r3]
30006d0c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
        pevent->OSEventCnt |= (INT16U)OSTCBCur->OSTCBPrio; /*      Save priority of owning task        */
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
30006d10:	e55b2017 	ldrb	r2, [fp, #-23]
30006d14:	e1520003 	cmp	r2, r3
30006d18:	3a000006 	bcc	30006d38 <OSMutexPend+0x160>
            (OSTCBCur->OSTCBPrio <= pcp)) {                /*      PCP 'must' have a SMALLER prio ...  */
             OS_EXIT_CRITICAL();                           /*      ... than current task!              */
30006d1c:	e51b0008 	ldr	r0, [fp, #-8]
30006d20:	ebffe504 	bl	30000138 <OS_CPU_RestoreSR>
            *perr = OS_ERR_PCP_LOWER;
30006d24:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006d28:	e3a02078 	mov	r2, #120	; 0x78
30006d2c:	e5c32000 	strb	r2, [r3]
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
        pevent->OSEventCnt |= (INT16U)OSTCBCur->OSTCBPrio; /*      Save priority of owning task        */
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
30006d30:	e1a00000 	nop			; (mov r0, r0)
        } else {
             OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        OS_TRACE_MUTEX_PEND_EXIT(*perr);
        return;
30006d34:	ea000112 	b	30007184 <OSMutexPend+0x5ac>
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
            (OSTCBCur->OSTCBPrio <= pcp)) {                /*      PCP 'must' have a SMALLER prio ...  */
             OS_EXIT_CRITICAL();                           /*      ... than current task!              */
            *perr = OS_ERR_PCP_LOWER;
        } else {
             OS_EXIT_CRITICAL();
30006d38:	e51b0008 	ldr	r0, [fp, #-8]
30006d3c:	ebffe4fd 	bl	30000138 <OS_CPU_RestoreSR>
            *perr = OS_ERR_NONE;
30006d40:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30006d44:	e3a02000 	mov	r2, #0
30006d48:	e5c32000 	strb	r2, [r3]
        }
        OS_TRACE_MUTEX_PEND_EXIT(*perr);
        return;
30006d4c:	ea00010c 	b	30007184 <OSMutexPend+0x5ac>
    }
    if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
30006d50:	e55b3017 	ldrb	r3, [fp, #-23]
30006d54:	e35300ff 	cmp	r3, #255	; 0xff
30006d58:	0a0000c3 	beq	3000706c <OSMutexPend+0x494>
        mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /*  Get priority of mutex owner   */
30006d5c:	e51b3020 	ldr	r3, [fp, #-32]
30006d60:	e1d330b8 	ldrh	r3, [r3, #8]
30006d64:	e54b3016 	strb	r3, [fp, #-22]
        ptcb  = (OS_TCB *)(pevent->OSEventPtr);                   /*     Point to TCB of mutex owner   */
30006d68:	e51b3020 	ldr	r3, [fp, #-32]
30006d6c:	e5933004 	ldr	r3, [r3, #4]
30006d70:	e50b3014 	str	r3, [fp, #-20]
        if (ptcb->OSTCBPrio > pcp) {                              /*     Need to promote prio of owner?*/
30006d74:	e51b3014 	ldr	r3, [fp, #-20]
30006d78:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30006d7c:	e55b2017 	ldrb	r2, [fp, #-23]
30006d80:	e1520003 	cmp	r2, r3
30006d84:	2a0000b8 	bcs	3000706c <OSMutexPend+0x494>
            if (mprio > OSTCBCur->OSTCBPrio) {
30006d88:	e59f3408 	ldr	r3, [pc, #1032]	; 30007198 <OSMutexPend+0x5c0>
30006d8c:	e5933000 	ldr	r3, [r3]
30006d90:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30006d94:	e55b2016 	ldrb	r2, [fp, #-22]
30006d98:	e1520003 	cmp	r2, r3
30006d9c:	9a0000b2 	bls	3000706c <OSMutexPend+0x494>
                y = ptcb->OSTCBY;
30006da0:	e51b3014 	ldr	r3, [fp, #-20]
30006da4:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30006da8:	e54b3009 	strb	r3, [fp, #-9]
                if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0u) {      /*     See if mutex owner is ready   */
30006dac:	e55b3009 	ldrb	r3, [fp, #-9]
30006db0:	e59f23e4 	ldr	r2, [pc, #996]	; 3000719c <OSMutexPend+0x5c4>
30006db4:	e7d22003 	ldrb	r2, [r2, r3]
30006db8:	e51b3014 	ldr	r3, [fp, #-20]
30006dbc:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
30006dc0:	e0023003 	and	r3, r2, r3
30006dc4:	e20330ff 	and	r3, r3, #255	; 0xff
30006dc8:	e3530000 	cmp	r3, #0
30006dcc:	0a00001d 	beq	30006e48 <OSMutexPend+0x270>
                    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;     /*     Yes, Remove owner from Rdy ...*/
30006dd0:	e55b3009 	ldrb	r3, [fp, #-9]
30006dd4:	e55b2009 	ldrb	r2, [fp, #-9]
30006dd8:	e59f13bc 	ldr	r1, [pc, #956]	; 3000719c <OSMutexPend+0x5c4>
30006ddc:	e7d11002 	ldrb	r1, [r1, r2]
30006de0:	e51b2014 	ldr	r2, [fp, #-20]
30006de4:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
30006de8:	e1e02002 	mvn	r2, r2
30006dec:	e20220ff 	and	r2, r2, #255	; 0xff
30006df0:	e0012002 	and	r2, r1, r2
30006df4:	e20210ff 	and	r1, r2, #255	; 0xff
30006df8:	e59f239c 	ldr	r2, [pc, #924]	; 3000719c <OSMutexPend+0x5c4>
30006dfc:	e7c21003 	strb	r1, [r2, r3]
                    if (OSRdyTbl[y] == 0u) {                      /*          ... list at current prio */
30006e00:	e55b3009 	ldrb	r3, [fp, #-9]
30006e04:	e59f2390 	ldr	r2, [pc, #912]	; 3000719c <OSMutexPend+0x5c4>
30006e08:	e7d23003 	ldrb	r3, [r2, r3]
30006e0c:	e3530000 	cmp	r3, #0
30006e10:	1a000009 	bne	30006e3c <OSMutexPend+0x264>
                        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
30006e14:	e51b3014 	ldr	r3, [fp, #-20]
30006e18:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30006e1c:	e1e03003 	mvn	r3, r3
30006e20:	e20320ff 	and	r2, r3, #255	; 0xff
30006e24:	e59f3374 	ldr	r3, [pc, #884]	; 300071a0 <OSMutexPend+0x5c8>
30006e28:	e5d33000 	ldrb	r3, [r3]
30006e2c:	e0023003 	and	r3, r2, r3
30006e30:	e20320ff 	and	r2, r3, #255	; 0xff
30006e34:	e59f3364 	ldr	r3, [pc, #868]	; 300071a0 <OSMutexPend+0x5c8>
30006e38:	e5c32000 	strb	r2, [r3]
                    }
                    rdy = OS_TRUE;
30006e3c:	e3a03001 	mov	r3, #1
30006e40:	e54b3015 	strb	r3, [fp, #-21]
30006e44:	ea00002e 	b	30006f04 <OSMutexPend+0x32c>
                } else {
                    pevent2 = ptcb->OSTCBEventPtr;
30006e48:	e51b3014 	ldr	r3, [fp, #-20]
30006e4c:	e593301c 	ldr	r3, [r3, #28]
30006e50:	e50b3010 	str	r3, [fp, #-16]
                    if (pevent2 != (OS_EVENT *)0) {               /* Remove from event wait list       */
30006e54:	e51b3010 	ldr	r3, [fp, #-16]
30006e58:	e3530000 	cmp	r3, #0
30006e5c:	0a000026 	beq	30006efc <OSMutexPend+0x324>
                        y = ptcb->OSTCBY;
30006e60:	e51b3014 	ldr	r3, [fp, #-20]
30006e64:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30006e68:	e54b3009 	strb	r3, [fp, #-9]
                        pevent2->OSEventTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
30006e6c:	e55b1009 	ldrb	r1, [fp, #-9]
30006e70:	e55b2009 	ldrb	r2, [fp, #-9]
30006e74:	e51b0010 	ldr	r0, [fp, #-16]
30006e78:	e3a03008 	mov	r3, #8
30006e7c:	e0802002 	add	r2, r0, r2
30006e80:	e0823003 	add	r3, r2, r3
30006e84:	e5d32003 	ldrb	r2, [r3, #3]
30006e88:	e51b3014 	ldr	r3, [fp, #-20]
30006e8c:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
30006e90:	e1e03003 	mvn	r3, r3
30006e94:	e20330ff 	and	r3, r3, #255	; 0xff
30006e98:	e0023003 	and	r3, r2, r3
30006e9c:	e20320ff 	and	r2, r3, #255	; 0xff
30006ea0:	e51b0010 	ldr	r0, [fp, #-16]
30006ea4:	e3a03008 	mov	r3, #8
30006ea8:	e0801001 	add	r1, r0, r1
30006eac:	e0813003 	add	r3, r1, r3
30006eb0:	e5c32003 	strb	r2, [r3, #3]
                        if (pevent2->OSEventTbl[y] == 0u) {
30006eb4:	e55b2009 	ldrb	r2, [fp, #-9]
30006eb8:	e51b1010 	ldr	r1, [fp, #-16]
30006ebc:	e3a03008 	mov	r3, #8
30006ec0:	e0812002 	add	r2, r1, r2
30006ec4:	e0823003 	add	r3, r2, r3
30006ec8:	e5d33003 	ldrb	r3, [r3, #3]
30006ecc:	e3530000 	cmp	r3, #0
30006ed0:	1a000009 	bne	30006efc <OSMutexPend+0x324>
                            pevent2->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
30006ed4:	e51b3010 	ldr	r3, [fp, #-16]
30006ed8:	e5d3200a 	ldrb	r2, [r3, #10]
30006edc:	e51b3014 	ldr	r3, [fp, #-20]
30006ee0:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30006ee4:	e1e03003 	mvn	r3, r3
30006ee8:	e20330ff 	and	r3, r3, #255	; 0xff
30006eec:	e0023003 	and	r3, r2, r3
30006ef0:	e20320ff 	and	r2, r3, #255	; 0xff
30006ef4:	e51b3010 	ldr	r3, [fp, #-16]
30006ef8:	e5c3200a 	strb	r2, [r3, #10]
                        }
                    }
                    rdy = OS_FALSE;                        /* No                                       */
30006efc:	e3a03000 	mov	r3, #0
30006f00:	e54b3015 	strb	r3, [fp, #-21]
                }
                ptcb->OSTCBPrio = pcp;                     /* Change owner task prio to PCP            */
30006f04:	e51b3014 	ldr	r3, [fp, #-20]
30006f08:	e55b2017 	ldrb	r2, [fp, #-23]
30006f0c:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a

                OS_TRACE_MUTEX_TASK_PRIO_INHERIT(ptcb, pcp);

#if OS_LOWEST_PRIO <= 63u
                ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3u);
30006f10:	e51b3014 	ldr	r3, [fp, #-20]
30006f14:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30006f18:	e1a031a3 	lsr	r3, r3, #3
30006f1c:	e20320ff 	and	r2, r3, #255	; 0xff
30006f20:	e51b3014 	ldr	r3, [fp, #-20]
30006f24:	e5c3203c 	strb	r2, [r3, #60]	; 0x3c
                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07u);
30006f28:	e51b3014 	ldr	r3, [fp, #-20]
30006f2c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30006f30:	e2033007 	and	r3, r3, #7
30006f34:	e51b2014 	ldr	r2, [fp, #-20]
30006f38:	e5c2303b 	strb	r3, [r2, #59]	; 0x3b
#else
                ptcb->OSTCBY    = (INT8U)((INT8U)(ptcb->OSTCBPrio >> 4u) & 0xFFu);
                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0Fu);
#endif
                ptcb->OSTCBBitY = (OS_PRIO)(1uL << ptcb->OSTCBY);
30006f3c:	e51b3014 	ldr	r3, [fp, #-20]
30006f40:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30006f44:	e3a02001 	mov	r2, #1
30006f48:	e1a03312 	lsl	r3, r2, r3
30006f4c:	e20320ff 	and	r2, r3, #255	; 0xff
30006f50:	e51b3014 	ldr	r3, [fp, #-20]
30006f54:	e5c3203e 	strb	r2, [r3, #62]	; 0x3e
                ptcb->OSTCBBitX = (OS_PRIO)(1uL << ptcb->OSTCBX);
30006f58:	e51b3014 	ldr	r3, [fp, #-20]
30006f5c:	e5d3303b 	ldrb	r3, [r3, #59]	; 0x3b
30006f60:	e3a02001 	mov	r2, #1
30006f64:	e1a03312 	lsl	r3, r2, r3
30006f68:	e20320ff 	and	r2, r3, #255	; 0xff
30006f6c:	e51b3014 	ldr	r3, [fp, #-20]
30006f70:	e5c3203d 	strb	r2, [r3, #61]	; 0x3d

                if (rdy == OS_TRUE) {                      /* If task was ready at owner's priority ...*/
30006f74:	e55b3015 	ldrb	r3, [fp, #-21]
30006f78:	e3530001 	cmp	r3, #1
30006f7c:	1a000014 	bne	30006fd4 <OSMutexPend+0x3fc>
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.   */
30006f80:	e51b3014 	ldr	r3, [fp, #-20]
30006f84:	e5d3203e 	ldrb	r2, [r3, #62]	; 0x3e
30006f88:	e59f3210 	ldr	r3, [pc, #528]	; 300071a0 <OSMutexPend+0x5c8>
30006f8c:	e5d33000 	ldrb	r3, [r3]
30006f90:	e1823003 	orr	r3, r2, r3
30006f94:	e20320ff 	and	r2, r3, #255	; 0xff
30006f98:	e59f3200 	ldr	r3, [pc, #512]	; 300071a0 <OSMutexPend+0x5c8>
30006f9c:	e5c32000 	strb	r2, [r3]
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
30006fa0:	e51b3014 	ldr	r3, [fp, #-20]
30006fa4:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30006fa8:	e51b2014 	ldr	r2, [fp, #-20]
30006fac:	e5d2203c 	ldrb	r2, [r2, #60]	; 0x3c
30006fb0:	e59f11e4 	ldr	r1, [pc, #484]	; 3000719c <OSMutexPend+0x5c4>
30006fb4:	e7d11002 	ldrb	r1, [r1, r2]
30006fb8:	e51b2014 	ldr	r2, [fp, #-20]
30006fbc:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
30006fc0:	e1812002 	orr	r2, r1, r2
30006fc4:	e20210ff 	and	r1, r2, #255	; 0xff
30006fc8:	e59f21cc 	ldr	r2, [pc, #460]	; 3000719c <OSMutexPend+0x5c4>
30006fcc:	e7c21003 	strb	r1, [r2, r3]
30006fd0:	ea000021 	b	3000705c <OSMutexPend+0x484>
                } else {
                    pevent2 = ptcb->OSTCBEventPtr;
30006fd4:	e51b3014 	ldr	r3, [fp, #-20]
30006fd8:	e593301c 	ldr	r3, [r3, #28]
30006fdc:	e50b3010 	str	r3, [fp, #-16]
                    if (pevent2 != (OS_EVENT *)0) {        /* Add to event wait list                   */
30006fe0:	e51b3010 	ldr	r3, [fp, #-16]
30006fe4:	e3530000 	cmp	r3, #0
30006fe8:	0a00001b 	beq	3000705c <OSMutexPend+0x484>
                        pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
30006fec:	e51b3010 	ldr	r3, [fp, #-16]
30006ff0:	e5d3200a 	ldrb	r2, [r3, #10]
30006ff4:	e51b3014 	ldr	r3, [fp, #-20]
30006ff8:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30006ffc:	e1823003 	orr	r3, r2, r3
30007000:	e20320ff 	and	r2, r3, #255	; 0xff
30007004:	e51b3010 	ldr	r3, [fp, #-16]
30007008:	e5c3200a 	strb	r2, [r3, #10]
                        pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
3000700c:	e51b3014 	ldr	r3, [fp, #-20]
30007010:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30007014:	e1a01003 	mov	r1, r3
30007018:	e51b3014 	ldr	r3, [fp, #-20]
3000701c:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30007020:	e1a02003 	mov	r2, r3
30007024:	e51b0010 	ldr	r0, [fp, #-16]
30007028:	e3a03008 	mov	r3, #8
3000702c:	e0802002 	add	r2, r0, r2
30007030:	e0823003 	add	r3, r2, r3
30007034:	e5d32003 	ldrb	r2, [r3, #3]
30007038:	e51b3014 	ldr	r3, [fp, #-20]
3000703c:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
30007040:	e1823003 	orr	r3, r2, r3
30007044:	e20320ff 	and	r2, r3, #255	; 0xff
30007048:	e51b0010 	ldr	r0, [fp, #-16]
3000704c:	e3a03008 	mov	r3, #8
30007050:	e0801001 	add	r1, r0, r1
30007054:	e0813003 	add	r3, r1, r3
30007058:	e5c32003 	strb	r2, [r3, #3]
                    }
                }
                OSTCBPrioTbl[pcp] = ptcb;
3000705c:	e55b2017 	ldrb	r2, [fp, #-23]
30007060:	e59f313c 	ldr	r3, [pc, #316]	; 300071a4 <OSMutexPend+0x5cc>
30007064:	e51b1014 	ldr	r1, [fp, #-20]
30007068:	e7831102 	str	r1, [r3, r2, lsl #2]
            }
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
3000706c:	e59f3124 	ldr	r3, [pc, #292]	; 30007198 <OSMutexPend+0x5c0>
30007070:	e5933000 	ldr	r3, [r3]
30007074:	e59f211c 	ldr	r2, [pc, #284]	; 30007198 <OSMutexPend+0x5c0>
30007078:	e5922000 	ldr	r2, [r2]
3000707c:	e5d22038 	ldrb	r2, [r2, #56]	; 0x38
30007080:	e3822010 	orr	r2, r2, #16
30007084:	e20220ff 	and	r2, r2, #255	; 0xff
30007088:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
3000708c:	e59f3104 	ldr	r3, [pc, #260]	; 30007198 <OSMutexPend+0x5c0>
30007090:	e5933000 	ldr	r3, [r3]
30007094:	e3a02000 	mov	r2, #0
30007098:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
3000709c:	e59f30f4 	ldr	r3, [pc, #244]	; 30007198 <OSMutexPend+0x5c0>
300070a0:	e5933000 	ldr	r3, [r3]
300070a4:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
300070a8:	e5832034 	str	r2, [r3, #52]	; 0x34
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
300070ac:	e51b0020 	ldr	r0, [fp, #-32]
300070b0:	ebffeec1 	bl	30002bbc <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
300070b4:	e51b0008 	ldr	r0, [fp, #-8]
300070b8:	ebffe41e 	bl	30000138 <OS_CPU_RestoreSR>
    OS_Sched();                                       /* Find next highest priority task ready         */
300070bc:	ebfff161 	bl	30003648 <OS_Sched>
    OS_ENTER_CRITICAL();
300070c0:	ebffe414 	bl	30000118 <OS_CPU_SaveSR>
300070c4:	e1a03000 	mov	r3, r0
300070c8:	e50b3008 	str	r3, [fp, #-8]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
300070cc:	e59f30c4 	ldr	r3, [pc, #196]	; 30007198 <OSMutexPend+0x5c0>
300070d0:	e5933000 	ldr	r3, [r3]
300070d4:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
300070d8:	e3530000 	cmp	r3, #0
300070dc:	0a000002 	beq	300070ec <OSMutexPend+0x514>
300070e0:	e3530002 	cmp	r3, #2
300070e4:	0a000004 	beq	300070fc <OSMutexPend+0x524>
300070e8:	ea000007 	b	3000710c <OSMutexPend+0x534>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
300070ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
300070f0:	e3a02000 	mov	r2, #0
300070f4:	e5c32000 	strb	r2, [r3]
             break;
300070f8:	ea00000b 	b	3000712c <OSMutexPend+0x554>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
300070fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30007100:	e3a0200e 	mov	r2, #14
30007104:	e5c32000 	strb	r2, [r3]
             break;
30007108:	ea000007 	b	3000712c <OSMutexPend+0x554>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
3000710c:	e59f3084 	ldr	r3, [pc, #132]	; 30007198 <OSMutexPend+0x5c0>
30007110:	e5933000 	ldr	r3, [r3]
30007114:	e1a00003 	mov	r0, r3
30007118:	e51b1020 	ldr	r1, [fp, #-32]
3000711c:	ebffef57 	bl	30002e80 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
30007120:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
30007124:	e3a0200a 	mov	r2, #10
30007128:	e5c32000 	strb	r2, [r3]
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
3000712c:	e59f3064 	ldr	r3, [pc, #100]	; 30007198 <OSMutexPend+0x5c0>
30007130:	e5933000 	ldr	r3, [r3]
30007134:	e3a02000 	mov	r2, #0
30007138:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
3000713c:	e59f3054 	ldr	r3, [pc, #84]	; 30007198 <OSMutexPend+0x5c0>
30007140:	e5933000 	ldr	r3, [r3]
30007144:	e3a02000 	mov	r2, #0
30007148:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
3000714c:	e59f3044 	ldr	r3, [pc, #68]	; 30007198 <OSMutexPend+0x5c0>
30007150:	e5933000 	ldr	r3, [r3]
30007154:	e3a02000 	mov	r2, #0
30007158:	e583201c 	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
3000715c:	e59f3034 	ldr	r3, [pc, #52]	; 30007198 <OSMutexPend+0x5c0>
30007160:	e5933000 	ldr	r3, [r3]
30007164:	e3a02000 	mov	r2, #0
30007168:	e5832020 	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
3000716c:	e59f3024 	ldr	r3, [pc, #36]	; 30007198 <OSMutexPend+0x5c0>
30007170:	e5933000 	ldr	r3, [r3]
30007174:	e3a02000 	mov	r2, #0
30007178:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif
    OS_EXIT_CRITICAL();
3000717c:	e51b0008 	ldr	r0, [fp, #-8]
30007180:	ebffe3ec 	bl	30000138 <OS_CPU_RestoreSR>

    OS_TRACE_MUTEX_PEND_EXIT(*perr);
}
30007184:	e24bd004 	sub	sp, fp, #4
30007188:	e8bd4800 	pop	{fp, lr}
3000718c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30007190:	30017bdc 	.word	0x30017bdc
30007194:	300173e8 	.word	0x300173e8
30007198:	30017be0 	.word	0x30017be0
3000719c:	300179d0 	.word	0x300179d0
300071a0:	300179cc 	.word	0x300179cc
300071a4:	300186d0 	.word	0x300186d0

300071a8 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
300071a8:	e92d4800 	push	{fp, lr}
300071ac:	e28db004 	add	fp, sp, #4
300071b0:	e24dd010 	sub	sp, sp, #16
300071b4:	e50b0010 	str	r0, [fp, #-16]
    INT8U      pcp;                                   /* Priority ceiling priority                     */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
300071b8:	e3a03000 	mov	r3, #0
300071bc:	e50b3008 	str	r3, [fp, #-8]
#endif


    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
300071c0:	e59f31e0 	ldr	r3, [pc, #480]	; 300073a8 <OSMutexPost+0x200>
300071c4:	e5d33000 	ldrb	r3, [r3]
300071c8:	e3530000 	cmp	r3, #0
300071cc:	0a000001 	beq	300071d8 <OSMutexPost+0x30>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
300071d0:	e3a03005 	mov	r3, #5
300071d4:	ea00006f 	b	30007398 <OSMutexPost+0x1f0>
    }
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
300071d8:	e51b3010 	ldr	r3, [fp, #-16]
300071dc:	e3530000 	cmp	r3, #0
300071e0:	1a000001 	bne	300071ec <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
300071e4:	e3a03004 	mov	r3, #4
300071e8:	ea00006a 	b	30007398 <OSMutexPost+0x1f0>
    }
#endif

    OS_TRACE_MUTEX_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
300071ec:	e51b3010 	ldr	r3, [fp, #-16]
300071f0:	e5d33000 	ldrb	r3, [r3]
300071f4:	e3530004 	cmp	r3, #4
300071f8:	0a000001 	beq	30007204 <OSMutexPost+0x5c>
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
300071fc:	e3a03001 	mov	r3, #1
30007200:	ea000064 	b	30007398 <OSMutexPost+0x1f0>
    }
    OS_ENTER_CRITICAL();
30007204:	ebffe3c3 	bl	30000118 <OS_CPU_SaveSR>
30007208:	e1a03000 	mov	r3, r0
3000720c:	e50b3008 	str	r3, [fp, #-8]
    pcp  = (INT8U)(pevent->OSEventCnt >> 8u);         /* Get priority ceiling priority of mutex        */
30007210:	e51b3010 	ldr	r3, [fp, #-16]
30007214:	e1d330b8 	ldrh	r3, [r3, #8]
30007218:	e1a03423 	lsr	r3, r3, #8
3000721c:	e1a03803 	lsl	r3, r3, #16
30007220:	e1a03823 	lsr	r3, r3, #16
30007224:	e54b300a 	strb	r3, [fp, #-10]
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
30007228:	e51b3010 	ldr	r3, [fp, #-16]
3000722c:	e1d330b8 	ldrh	r3, [r3, #8]
30007230:	e54b3009 	strb	r3, [fp, #-9]
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
30007234:	e51b3010 	ldr	r3, [fp, #-16]
30007238:	e5933004 	ldr	r3, [r3, #4]
3000723c:	e1a02003 	mov	r2, r3
30007240:	e59f3164 	ldr	r3, [pc, #356]	; 300073ac <OSMutexPost+0x204>
30007244:	e5933000 	ldr	r3, [r3]
30007248:	e1520003 	cmp	r2, r3
3000724c:	0a000003 	beq	30007260 <OSMutexPost+0xb8>
        OS_EXIT_CRITICAL();
30007250:	e51b0008 	ldr	r0, [fp, #-8]
30007254:	ebffe3b7 	bl	30000138 <OS_CPU_RestoreSR>
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_NOT_MUTEX_OWNER);
        return (OS_ERR_NOT_MUTEX_OWNER);
30007258:	e3a03064 	mov	r3, #100	; 0x64
3000725c:	ea00004d 	b	30007398 <OSMutexPost+0x1f0>
    }
    if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
30007260:	e55b300a 	ldrb	r3, [fp, #-10]
30007264:	e35300ff 	cmp	r3, #255	; 0xff
30007268:	0a00000f 	beq	300072ac <OSMutexPost+0x104>
        if (OSTCBCur->OSTCBPrio == pcp) {             /* Did we have to raise current task's priority? */
3000726c:	e59f3138 	ldr	r3, [pc, #312]	; 300073ac <OSMutexPost+0x204>
30007270:	e5933000 	ldr	r3, [r3]
30007274:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30007278:	e55b200a 	ldrb	r2, [fp, #-10]
3000727c:	e1520003 	cmp	r2, r3
30007280:	1a000005 	bne	3000729c <OSMutexPost+0xf4>
            OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCur, prio);
            OSMutex_RdyAtPrio(OSTCBCur, prio);        /* Restore the task's original priority          */
30007284:	e59f3120 	ldr	r3, [pc, #288]	; 300073ac <OSMutexPost+0x204>
30007288:	e5932000 	ldr	r2, [r3]
3000728c:	e55b3009 	ldrb	r3, [fp, #-9]
30007290:	e1a00002 	mov	r0, r2
30007294:	e1a01003 	mov	r1, r3
30007298:	eb0000a1 	bl	30007524 <OSMutex_RdyAtPrio>
        }
        OSTCBPrioTbl[pcp] = OS_TCB_RESERVED;          /* Reserve table entry                           */
3000729c:	e55b200a 	ldrb	r2, [fp, #-10]
300072a0:	e59f3108 	ldr	r3, [pc, #264]	; 300073b0 <OSMutexPost+0x208>
300072a4:	e3a01001 	mov	r1, #1
300072a8:	e7831102 	str	r1, [r3, r2, lsl #2]
    }
    if (pevent->OSEventGrp != 0u) {                   /* Any task waiting for the mutex?               */
300072ac:	e51b3010 	ldr	r3, [fp, #-16]
300072b0:	e5d3300a 	ldrb	r3, [r3, #10]
300072b4:	e3530000 	cmp	r3, #0
300072b8:	0a000029 	beq	30007364 <OSMutexPost+0x1bc>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
300072bc:	e51b0010 	ldr	r0, [fp, #-16]
300072c0:	e3a01000 	mov	r1, #0
300072c4:	e3a02010 	mov	r2, #16
300072c8:	e3a03000 	mov	r3, #0
300072cc:	ebffedd7 	bl	30002a30 <OS_EventTaskRdy>
300072d0:	e1a03000 	mov	r3, r0
300072d4:	e54b3009 	strb	r3, [fp, #-9]
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
300072d8:	e51b3010 	ldr	r3, [fp, #-16]
300072dc:	e1d330b8 	ldrh	r3, [r3, #8]
300072e0:	e2033cff 	and	r3, r3, #65280	; 0xff00
300072e4:	e51b2010 	ldr	r2, [fp, #-16]
300072e8:	e1c230b8 	strh	r3, [r2, #8]
        pevent->OSEventCnt |= (INT16U)prio;
300072ec:	e51b3010 	ldr	r3, [fp, #-16]
300072f0:	e1d320b8 	ldrh	r2, [r3, #8]
300072f4:	e55b3009 	ldrb	r3, [fp, #-9]
300072f8:	e1823003 	orr	r3, r2, r3
300072fc:	e1a03803 	lsl	r3, r3, #16
30007300:	e1a02823 	lsr	r2, r3, #16
30007304:	e51b3010 	ldr	r3, [fp, #-16]
30007308:	e1c320b8 	strh	r2, [r3, #8]
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
3000730c:	e55b2009 	ldrb	r2, [fp, #-9]
30007310:	e59f3098 	ldr	r3, [pc, #152]	; 300073b0 <OSMutexPost+0x208>
30007314:	e7932102 	ldr	r2, [r3, r2, lsl #2]
30007318:	e51b3010 	ldr	r3, [fp, #-16]
3000731c:	e5832004 	str	r2, [r3, #4]
        if ((pcp  != OS_PRIO_MUTEX_CEIL_DIS) &&
30007320:	e55b300a 	ldrb	r3, [fp, #-10]
30007324:	e35300ff 	cmp	r3, #255	; 0xff
30007328:	0a000008 	beq	30007350 <OSMutexPost+0x1a8>
3000732c:	e55b2009 	ldrb	r2, [fp, #-9]
30007330:	e55b300a 	ldrb	r3, [fp, #-10]
30007334:	e1520003 	cmp	r2, r3
30007338:	8a000004 	bhi	30007350 <OSMutexPost+0x1a8>
            (prio <= pcp)) {                          /*      PCP 'must' have a SMALLER prio ...       */
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
3000733c:	e51b0008 	ldr	r0, [fp, #-8]
30007340:	ebffe37c 	bl	30000138 <OS_CPU_RestoreSR>
            OS_Sched();                               /*      Find highest priority task ready to run  */
30007344:	ebfff0bf 	bl	30003648 <OS_Sched>
            OS_TRACE_MUTEX_POST_EXIT(OS_ERR_PCP_LOWER);
            return (OS_ERR_PCP_LOWER);
30007348:	e3a03078 	mov	r3, #120	; 0x78
3000734c:	ea000011 	b	30007398 <OSMutexPost+0x1f0>
        } else {
            OS_EXIT_CRITICAL();
30007350:	e51b0008 	ldr	r0, [fp, #-8]
30007354:	ebffe377 	bl	30000138 <OS_CPU_RestoreSR>
            OS_Sched();                               /*      Find highest priority task ready to run  */
30007358:	ebfff0ba 	bl	30003648 <OS_Sched>
            OS_TRACE_MUTEX_POST_EXIT(OS_ERR_NONE);
            return (OS_ERR_NONE);
3000735c:	e3a03000 	mov	r3, #0
30007360:	ea00000c 	b	30007398 <OSMutexPost+0x1f0>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
30007364:	e51b3010 	ldr	r3, [fp, #-16]
30007368:	e1d330b8 	ldrh	r3, [r3, #8]
3000736c:	e38330ff 	orr	r3, r3, #255	; 0xff
30007370:	e1a03803 	lsl	r3, r3, #16
30007374:	e1a02823 	lsr	r2, r3, #16
30007378:	e51b3010 	ldr	r3, [fp, #-16]
3000737c:	e1c320b8 	strh	r2, [r3, #8]
    pevent->OSEventPtr  = (void *)0;
30007380:	e51b3010 	ldr	r3, [fp, #-16]
30007384:	e3a02000 	mov	r2, #0
30007388:	e5832004 	str	r2, [r3, #4]
    OS_EXIT_CRITICAL();
3000738c:	e51b0008 	ldr	r0, [fp, #-8]
30007390:	ebffe368 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_MUTEX_POST_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);
30007394:	e3a03000 	mov	r3, #0
}
30007398:	e1a00003 	mov	r0, r3
3000739c:	e24bd004 	sub	sp, fp, #4
300073a0:	e8bd4800 	pop	{fp, lr}
300073a4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300073a8:	30017bdc 	.word	0x30017bdc
300073ac:	30017be0 	.word	0x30017be0
300073b0:	300186d0 	.word	0x300186d0

300073b4 <OSMutexQuery>:
*/

#if OS_MUTEX_QUERY_EN > 0u
INT8U  OSMutexQuery (OS_EVENT       *pevent,
                     OS_MUTEX_DATA  *p_mutex_data)
{
300073b4:	e92d4800 	push	{fp, lr}
300073b8:	e28db004 	add	fp, sp, #4
300073bc:	e24dd018 	sub	sp, sp, #24
300073c0:	e50b0018 	str	r0, [fp, #-24]
300073c4:	e50b101c 	str	r1, [fp, #-28]
    INT8U       i;
    OS_PRIO    *psrc;
    OS_PRIO    *pdest;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR   cpu_sr = 0u;
300073c8:	e3a03000 	mov	r3, #0
300073cc:	e50b3008 	str	r3, [fp, #-8]
#endif



    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
300073d0:	e59f3148 	ldr	r3, [pc, #328]	; 30007520 <OSMutexQuery+0x16c>
300073d4:	e5d33000 	ldrb	r3, [r3]
300073d8:	e3530000 	cmp	r3, #0
300073dc:	0a000001 	beq	300073e8 <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
300073e0:	e3a03006 	mov	r3, #6
300073e4:	ea000049 	b	30007510 <OSMutexQuery+0x15c>
    }
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
300073e8:	e51b3018 	ldr	r3, [fp, #-24]
300073ec:	e3530000 	cmp	r3, #0
300073f0:	1a000001 	bne	300073fc <OSMutexQuery+0x48>
        return (OS_ERR_PEVENT_NULL);
300073f4:	e3a03004 	mov	r3, #4
300073f8:	ea000044 	b	30007510 <OSMutexQuery+0x15c>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
300073fc:	e51b301c 	ldr	r3, [fp, #-28]
30007400:	e3530000 	cmp	r3, #0
30007404:	1a000001 	bne	30007410 <OSMutexQuery+0x5c>
        return (OS_ERR_PDATA_NULL);
30007408:	e3a03009 	mov	r3, #9
3000740c:	ea00003f 	b	30007510 <OSMutexQuery+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
30007410:	e51b3018 	ldr	r3, [fp, #-24]
30007414:	e5d33000 	ldrb	r3, [r3]
30007418:	e3530004 	cmp	r3, #4
3000741c:	0a000001 	beq	30007428 <OSMutexQuery+0x74>
        return (OS_ERR_EVENT_TYPE);
30007420:	e3a03001 	mov	r3, #1
30007424:	ea000039 	b	30007510 <OSMutexQuery+0x15c>
    }
    OS_ENTER_CRITICAL();
30007428:	ebffe33a 	bl	30000118 <OS_CPU_SaveSR>
3000742c:	e1a03000 	mov	r3, r0
30007430:	e50b3008 	str	r3, [fp, #-8]
    p_mutex_data->OSMutexPCP  = (INT8U)(pevent->OSEventCnt >> 8u);
30007434:	e51b3018 	ldr	r3, [fp, #-24]
30007438:	e1d330b8 	ldrh	r3, [r3, #8]
3000743c:	e1a03423 	lsr	r3, r3, #8
30007440:	e1a03803 	lsl	r3, r3, #16
30007444:	e1a03823 	lsr	r3, r3, #16
30007448:	e20320ff 	and	r2, r3, #255	; 0xff
3000744c:	e51b301c 	ldr	r3, [fp, #-28]
30007450:	e5c3200b 	strb	r2, [r3, #11]
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
30007454:	e51b3018 	ldr	r3, [fp, #-24]
30007458:	e1d330b8 	ldrh	r3, [r3, #8]
3000745c:	e20320ff 	and	r2, r3, #255	; 0xff
30007460:	e51b301c 	ldr	r3, [fp, #-28]
30007464:	e5c3200a 	strb	r2, [r3, #10]
    if (p_mutex_data->OSOwnerPrio == 0xFFu) {
30007468:	e51b301c 	ldr	r3, [fp, #-28]
3000746c:	e5d3300a 	ldrb	r3, [r3, #10]
30007470:	e35300ff 	cmp	r3, #255	; 0xff
30007474:	1a000003 	bne	30007488 <OSMutexQuery+0xd4>
        p_mutex_data->OSValue = OS_TRUE;
30007478:	e51b301c 	ldr	r3, [fp, #-28]
3000747c:	e3a02001 	mov	r2, #1
30007480:	e5c32009 	strb	r2, [r3, #9]
30007484:	ea000002 	b	30007494 <OSMutexQuery+0xe0>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
30007488:	e51b301c 	ldr	r3, [fp, #-28]
3000748c:	e3a02000 	mov	r2, #0
30007490:	e5c32009 	strb	r2, [r3, #9]
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
30007494:	e51b3018 	ldr	r3, [fp, #-24]
30007498:	e5d3200a 	ldrb	r2, [r3, #10]
3000749c:	e51b301c 	ldr	r3, [fp, #-28]
300074a0:	e5c32008 	strb	r2, [r3, #8]
    psrc                      = &pevent->OSEventTbl[0];
300074a4:	e51b3018 	ldr	r3, [fp, #-24]
300074a8:	e283300b 	add	r3, r3, #11
300074ac:	e50b3010 	str	r3, [fp, #-16]
    pdest                     = &p_mutex_data->OSEventTbl[0];
300074b0:	e51b301c 	ldr	r3, [fp, #-28]
300074b4:	e50b300c 	str	r3, [fp, #-12]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
300074b8:	e3a03000 	mov	r3, #0
300074bc:	e54b3011 	strb	r3, [fp, #-17]
300074c0:	ea00000c 	b	300074f8 <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
300074c4:	e51b3010 	ldr	r3, [fp, #-16]
300074c8:	e5d32000 	ldrb	r2, [r3]
300074cc:	e51b300c 	ldr	r3, [fp, #-12]
300074d0:	e5c32000 	strb	r2, [r3]
300074d4:	e51b300c 	ldr	r3, [fp, #-12]
300074d8:	e2833001 	add	r3, r3, #1
300074dc:	e50b300c 	str	r3, [fp, #-12]
300074e0:	e51b3010 	ldr	r3, [fp, #-16]
300074e4:	e2833001 	add	r3, r3, #1
300074e8:	e50b3010 	str	r3, [fp, #-16]
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
300074ec:	e55b3011 	ldrb	r3, [fp, #-17]
300074f0:	e2833001 	add	r3, r3, #1
300074f4:	e54b3011 	strb	r3, [fp, #-17]
300074f8:	e55b3011 	ldrb	r3, [fp, #-17]
300074fc:	e3530007 	cmp	r3, #7
30007500:	9affffef 	bls	300074c4 <OSMutexQuery+0x110>
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
30007504:	e51b0008 	ldr	r0, [fp, #-8]
30007508:	ebffe30a 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_NONE);
3000750c:	e3a03000 	mov	r3, #0
}
30007510:	e1a00003 	mov	r0, r3
30007514:	e24bd004 	sub	sp, fp, #4
30007518:	e8bd4800 	pop	{fp, lr}
3000751c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30007520:	30017bdc 	.word	0x30017bdc

30007524 <OSMutex_RdyAtPrio>:
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB  *ptcb,
                                 INT8U    prio)
{
30007524:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
30007528:	e28db000 	add	fp, sp, #0
3000752c:	e24dd014 	sub	sp, sp, #20
30007530:	e50b0010 	str	r0, [fp, #-16]
30007534:	e1a03001 	mov	r3, r1
30007538:	e54b3011 	strb	r3, [fp, #-17]
    INT8U  y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pcp'    */
3000753c:	e51b3010 	ldr	r3, [fp, #-16]
30007540:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30007544:	e54b3005 	strb	r3, [fp, #-5]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
30007548:	e55b3005 	ldrb	r3, [fp, #-5]
3000754c:	e55b2005 	ldrb	r2, [fp, #-5]
30007550:	e59f1140 	ldr	r1, [pc, #320]	; 30007698 <OSMutex_RdyAtPrio+0x174>
30007554:	e7d11002 	ldrb	r1, [r1, r2]
30007558:	e51b2010 	ldr	r2, [fp, #-16]
3000755c:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
30007560:	e1e02002 	mvn	r2, r2
30007564:	e20220ff 	and	r2, r2, #255	; 0xff
30007568:	e0012002 	and	r2, r1, r2
3000756c:	e20210ff 	and	r1, r2, #255	; 0xff
30007570:	e59f2120 	ldr	r2, [pc, #288]	; 30007698 <OSMutex_RdyAtPrio+0x174>
30007574:	e7c21003 	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[y] == 0u) {
30007578:	e55b3005 	ldrb	r3, [fp, #-5]
3000757c:	e59f2114 	ldr	r2, [pc, #276]	; 30007698 <OSMutex_RdyAtPrio+0x174>
30007580:	e7d23003 	ldrb	r3, [r2, r3]
30007584:	e3530000 	cmp	r3, #0
30007588:	1a000009 	bne	300075b4 <OSMutex_RdyAtPrio+0x90>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
3000758c:	e51b3010 	ldr	r3, [fp, #-16]
30007590:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30007594:	e1e03003 	mvn	r3, r3
30007598:	e20320ff 	and	r2, r3, #255	; 0xff
3000759c:	e59f30f8 	ldr	r3, [pc, #248]	; 3000769c <OSMutex_RdyAtPrio+0x178>
300075a0:	e5d33000 	ldrb	r3, [r3]
300075a4:	e0023003 	and	r3, r2, r3
300075a8:	e20320ff 	and	r2, r3, #255	; 0xff
300075ac:	e59f30e8 	ldr	r3, [pc, #232]	; 3000769c <OSMutex_RdyAtPrio+0x178>
300075b0:	e5c32000 	strb	r2, [r3]
    }
    ptcb->OSTCBPrio         = prio;
300075b4:	e51b3010 	ldr	r3, [fp, #-16]
300075b8:	e55b2011 	ldrb	r2, [fp, #-17]
300075bc:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    OSPrioCur               = prio;                        /* The current task is now at this priority */
300075c0:	e59f30d8 	ldr	r3, [pc, #216]	; 300076a0 <OSMutex_RdyAtPrio+0x17c>
300075c4:	e55b2011 	ldrb	r2, [fp, #-17]
300075c8:	e5c32000 	strb	r2, [r3]
#if OS_LOWEST_PRIO <= 63u
    ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 3u) & 0x07u);
300075cc:	e55b3011 	ldrb	r3, [fp, #-17]
300075d0:	e1a031a3 	lsr	r3, r3, #3
300075d4:	e20330ff 	and	r3, r3, #255	; 0xff
300075d8:	e2033007 	and	r3, r3, #7
300075dc:	e51b2010 	ldr	r2, [fp, #-16]
300075e0:	e5c2303c 	strb	r3, [r2, #60]	; 0x3c
    ptcb->OSTCBX            = (INT8U)(prio & 0x07u);
300075e4:	e55b3011 	ldrb	r3, [fp, #-17]
300075e8:	e2033007 	and	r3, r3, #7
300075ec:	e51b2010 	ldr	r2, [fp, #-16]
300075f0:	e5c2303b 	strb	r3, [r2, #59]	; 0x3b
#else
    ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 4u) & 0x0Fu);
    ptcb->OSTCBX            = (INT8U) (prio & 0x0Fu);
#endif
    ptcb->OSTCBBitY         = (OS_PRIO)(1uL << ptcb->OSTCBY);
300075f4:	e51b3010 	ldr	r3, [fp, #-16]
300075f8:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
300075fc:	e3a02001 	mov	r2, #1
30007600:	e1a03312 	lsl	r3, r2, r3
30007604:	e20320ff 	and	r2, r3, #255	; 0xff
30007608:	e51b3010 	ldr	r3, [fp, #-16]
3000760c:	e5c3203e 	strb	r2, [r3, #62]	; 0x3e
    ptcb->OSTCBBitX         = (OS_PRIO)(1uL << ptcb->OSTCBX);
30007610:	e51b3010 	ldr	r3, [fp, #-16]
30007614:	e5d3303b 	ldrb	r3, [r3, #59]	; 0x3b
30007618:	e3a02001 	mov	r2, #1
3000761c:	e1a03312 	lsl	r3, r2, r3
30007620:	e20320ff 	and	r2, r3, #255	; 0xff
30007624:	e51b3010 	ldr	r3, [fp, #-16]
30007628:	e5c3203d 	strb	r2, [r3, #61]	; 0x3d
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
3000762c:	e51b3010 	ldr	r3, [fp, #-16]
30007630:	e5d3203e 	ldrb	r2, [r3, #62]	; 0x3e
30007634:	e59f3060 	ldr	r3, [pc, #96]	; 3000769c <OSMutex_RdyAtPrio+0x178>
30007638:	e5d33000 	ldrb	r3, [r3]
3000763c:	e1823003 	orr	r3, r2, r3
30007640:	e20320ff 	and	r2, r3, #255	; 0xff
30007644:	e59f3050 	ldr	r3, [pc, #80]	; 3000769c <OSMutex_RdyAtPrio+0x178>
30007648:	e5c32000 	strb	r2, [r3]
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
3000764c:	e51b3010 	ldr	r3, [fp, #-16]
30007650:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30007654:	e51b2010 	ldr	r2, [fp, #-16]
30007658:	e5d2203c 	ldrb	r2, [r2, #60]	; 0x3c
3000765c:	e59f1034 	ldr	r1, [pc, #52]	; 30007698 <OSMutex_RdyAtPrio+0x174>
30007660:	e7d11002 	ldrb	r1, [r1, r2]
30007664:	e51b2010 	ldr	r2, [fp, #-16]
30007668:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
3000766c:	e1812002 	orr	r2, r1, r2
30007670:	e20210ff 	and	r1, r2, #255	; 0xff
30007674:	e59f201c 	ldr	r2, [pc, #28]	; 30007698 <OSMutex_RdyAtPrio+0x174>
30007678:	e7c21003 	strb	r1, [r2, r3]
    OSTCBPrioTbl[prio]      = ptcb;
3000767c:	e55b2011 	ldrb	r2, [fp, #-17]
30007680:	e59f301c 	ldr	r3, [pc, #28]	; 300076a4 <OSMutex_RdyAtPrio+0x180>
30007684:	e51b1010 	ldr	r1, [fp, #-16]
30007688:	e7831102 	str	r1, [r3, r2, lsl #2]
    OS_TRACE_TASK_READY(ptcb);
}
3000768c:	e28bd000 	add	sp, fp, #0
30007690:	e8bd0800 	pop	{fp}
30007694:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30007698:	300179d0 	.word	0x300179d0
3000769c:	300179cc 	.word	0x300179cc
300076a0:	300176cc 	.word	0x300176cc
300076a4:	300186d0 	.word	0x300186d0

300076a8 <OSQAccept>:
*/

#if OS_Q_ACCEPT_EN > 0u
void  *OSQAccept (OS_EVENT  *pevent,
                  INT8U     *perr)
{
300076a8:	e92d4800 	push	{fp, lr}
300076ac:	e28db004 	add	fp, sp, #4
300076b0:	e24dd018 	sub	sp, sp, #24
300076b4:	e50b0018 	str	r0, [fp, #-24]
300076b8:	e50b101c 	str	r1, [fp, #-28]
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
300076bc:	e3a03000 	mov	r3, #0
300076c0:	e50b3008 	str	r3, [fp, #-8]
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
300076c4:	e51b3018 	ldr	r3, [fp, #-24]
300076c8:	e3530000 	cmp	r3, #0
300076cc:	1a000004 	bne	300076e4 <OSQAccept+0x3c>
        *perr = OS_ERR_PEVENT_NULL;
300076d0:	e51b301c 	ldr	r3, [fp, #-28]
300076d4:	e3a02004 	mov	r2, #4
300076d8:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
300076dc:	e3a03000 	mov	r3, #0
300076e0:	ea000036 	b	300077c0 <OSQAccept+0x118>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
300076e4:	e51b3018 	ldr	r3, [fp, #-24]
300076e8:	e5d33000 	ldrb	r3, [r3]
300076ec:	e3530002 	cmp	r3, #2
300076f0:	0a000004 	beq	30007708 <OSQAccept+0x60>
        *perr = OS_ERR_EVENT_TYPE;
300076f4:	e51b301c 	ldr	r3, [fp, #-28]
300076f8:	e3a02001 	mov	r2, #1
300076fc:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
30007700:	e3a03000 	mov	r3, #0
30007704:	ea00002d 	b	300077c0 <OSQAccept+0x118>
    }
    OS_ENTER_CRITICAL();
30007708:	ebffe282 	bl	30000118 <OS_CPU_SaveSR>
3000770c:	e1a03000 	mov	r3, r0
30007710:	e50b3008 	str	r3, [fp, #-8]
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
30007714:	e51b3018 	ldr	r3, [fp, #-24]
30007718:	e5933004 	ldr	r3, [r3, #4]
3000771c:	e50b300c 	str	r3, [fp, #-12]
    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
30007720:	e51b300c 	ldr	r3, [fp, #-12]
30007724:	e1d331b6 	ldrh	r3, [r3, #22]
30007728:	e3530000 	cmp	r3, #0
3000772c:	0a00001b 	beq	300077a0 <OSQAccept+0xf8>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
30007730:	e51b300c 	ldr	r3, [fp, #-12]
30007734:	e5933010 	ldr	r3, [r3, #16]
30007738:	e5932000 	ldr	r2, [r3]
3000773c:	e50b2010 	str	r2, [fp, #-16]
30007740:	e2832004 	add	r2, r3, #4
30007744:	e51b300c 	ldr	r3, [fp, #-12]
30007748:	e5832010 	str	r2, [r3, #16]
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
3000774c:	e51b300c 	ldr	r3, [fp, #-12]
30007750:	e1d331b6 	ldrh	r3, [r3, #22]
30007754:	e2433001 	sub	r3, r3, #1
30007758:	e1a03803 	lsl	r3, r3, #16
3000775c:	e1a02823 	lsr	r2, r3, #16
30007760:	e51b300c 	ldr	r3, [fp, #-12]
30007764:	e1c321b6 	strh	r2, [r3, #22]
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
30007768:	e51b300c 	ldr	r3, [fp, #-12]
3000776c:	e5932010 	ldr	r2, [r3, #16]
30007770:	e51b300c 	ldr	r3, [fp, #-12]
30007774:	e5933008 	ldr	r3, [r3, #8]
30007778:	e1520003 	cmp	r2, r3
3000777c:	1a000003 	bne	30007790 <OSQAccept+0xe8>
            pq->OSQOut = pq->OSQStart;
30007780:	e51b300c 	ldr	r3, [fp, #-12]
30007784:	e5932004 	ldr	r2, [r3, #4]
30007788:	e51b300c 	ldr	r3, [fp, #-12]
3000778c:	e5832010 	str	r2, [r3, #16]
        }
        *perr = OS_ERR_NONE;
30007790:	e51b301c 	ldr	r3, [fp, #-28]
30007794:	e3a02000 	mov	r2, #0
30007798:	e5c32000 	strb	r2, [r3]
3000779c:	ea000004 	b	300077b4 <OSQAccept+0x10c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
300077a0:	e51b301c 	ldr	r3, [fp, #-28]
300077a4:	e3a0201f 	mov	r2, #31
300077a8:	e5c32000 	strb	r2, [r3]
        pmsg  = (void *)0;                       /* Queue is empty                                     */
300077ac:	e3a03000 	mov	r3, #0
300077b0:	e50b3010 	str	r3, [fp, #-16]
    }
    OS_EXIT_CRITICAL();
300077b4:	e51b0008 	ldr	r0, [fp, #-8]
300077b8:	ebffe25e 	bl	30000138 <OS_CPU_RestoreSR>
    return (pmsg);                               /* Return message received (or NULL)                  */
300077bc:	e51b3010 	ldr	r3, [fp, #-16]
}
300077c0:	e1a00003 	mov	r0, r3
300077c4:	e24bd004 	sub	sp, fp, #4
300077c8:	e8bd4800 	pop	{fp, lr}
300077cc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300077d0 <OSQCreate>:
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void    **start,
                      INT16U    size)
{
300077d0:	e92d4800 	push	{fp, lr}
300077d4:	e28db004 	add	fp, sp, #4
300077d8:	e24dd018 	sub	sp, sp, #24
300077dc:	e50b0018 	str	r0, [fp, #-24]
300077e0:	e1a03001 	mov	r3, r1
300077e4:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
300077e8:	e3a03000 	mov	r3, #0
300077ec:	e50b3008 	str	r3, [fp, #-8]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
300077f0:	e59f3174 	ldr	r3, [pc, #372]	; 3000796c <OSQCreate+0x19c>
300077f4:	e5d33000 	ldrb	r3, [r3]
300077f8:	e3530000 	cmp	r3, #0
300077fc:	0a000001 	beq	30007808 <OSQCreate+0x38>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
30007800:	e3a03000 	mov	r3, #0
30007804:	ea000054 	b	3000795c <OSQCreate+0x18c>
    }
    OS_ENTER_CRITICAL();
30007808:	ebffe242 	bl	30000118 <OS_CPU_SaveSR>
3000780c:	e1a03000 	mov	r3, r0
30007810:	e50b3008 	str	r3, [fp, #-8]
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
30007814:	e59f3154 	ldr	r3, [pc, #340]	; 30007970 <OSQCreate+0x1a0>
30007818:	e5933000 	ldr	r3, [r3]
3000781c:	e50b3010 	str	r3, [fp, #-16]
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
30007820:	e59f3148 	ldr	r3, [pc, #328]	; 30007970 <OSQCreate+0x1a0>
30007824:	e5933000 	ldr	r3, [r3]
30007828:	e3530000 	cmp	r3, #0
3000782c:	0a000005 	beq	30007848 <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
30007830:	e59f3138 	ldr	r3, [pc, #312]	; 30007970 <OSQCreate+0x1a0>
30007834:	e5933000 	ldr	r3, [r3]
30007838:	e5933004 	ldr	r3, [r3, #4]
3000783c:	e1a02003 	mov	r2, r3
30007840:	e59f3128 	ldr	r3, [pc, #296]	; 30007970 <OSQCreate+0x1a0>
30007844:	e5832000 	str	r2, [r3]
    }
    OS_EXIT_CRITICAL();
30007848:	e51b0008 	ldr	r0, [fp, #-8]
3000784c:	ebffe239 	bl	30000138 <OS_CPU_RestoreSR>
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
30007850:	e51b3010 	ldr	r3, [fp, #-16]
30007854:	e3530000 	cmp	r3, #0
30007858:	0a00003e 	beq	30007958 <OSQCreate+0x188>
        OS_ENTER_CRITICAL();
3000785c:	ebffe22d 	bl	30000118 <OS_CPU_SaveSR>
30007860:	e1a03000 	mov	r3, r0
30007864:	e50b3008 	str	r3, [fp, #-8]
        pq = OSQFreeList;                        /* Get a free queue control block                     */
30007868:	e59f3104 	ldr	r3, [pc, #260]	; 30007974 <OSQCreate+0x1a4>
3000786c:	e5933000 	ldr	r3, [r3]
30007870:	e50b300c 	str	r3, [fp, #-12]
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
30007874:	e51b300c 	ldr	r3, [fp, #-12]
30007878:	e3530000 	cmp	r3, #0
3000787c:	0a00002a 	beq	3000792c <OSQCreate+0x15c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
30007880:	e59f30ec 	ldr	r3, [pc, #236]	; 30007974 <OSQCreate+0x1a4>
30007884:	e5933000 	ldr	r3, [r3]
30007888:	e5932000 	ldr	r2, [r3]
3000788c:	e59f30e0 	ldr	r3, [pc, #224]	; 30007974 <OSQCreate+0x1a4>
30007890:	e5832000 	str	r2, [r3]
            OS_EXIT_CRITICAL();
30007894:	e51b0008 	ldr	r0, [fp, #-8]
30007898:	ebffe226 	bl	30000138 <OS_CPU_RestoreSR>
            pq->OSQStart           = start;               /*      Initialize the queue                 */
3000789c:	e51b300c 	ldr	r3, [fp, #-12]
300078a0:	e51b2018 	ldr	r2, [fp, #-24]
300078a4:	e5832004 	str	r2, [r3, #4]
            pq->OSQEnd             = &start[size];
300078a8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
300078ac:	e1a03103 	lsl	r3, r3, #2
300078b0:	e51b2018 	ldr	r2, [fp, #-24]
300078b4:	e0822003 	add	r2, r2, r3
300078b8:	e51b300c 	ldr	r3, [fp, #-12]
300078bc:	e5832008 	str	r2, [r3, #8]
            pq->OSQIn              = start;
300078c0:	e51b300c 	ldr	r3, [fp, #-12]
300078c4:	e51b2018 	ldr	r2, [fp, #-24]
300078c8:	e583200c 	str	r2, [r3, #12]
            pq->OSQOut             = start;
300078cc:	e51b300c 	ldr	r3, [fp, #-12]
300078d0:	e51b2018 	ldr	r2, [fp, #-24]
300078d4:	e5832010 	str	r2, [r3, #16]
            pq->OSQSize            = size;
300078d8:	e51b300c 	ldr	r3, [fp, #-12]
300078dc:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
300078e0:	e1c321b4 	strh	r2, [r3, #20]
            pq->OSQEntries         = 0u;
300078e4:	e51b300c 	ldr	r3, [fp, #-12]
300078e8:	e3a02000 	mov	r2, #0
300078ec:	e1c321b6 	strh	r2, [r3, #22]
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
300078f0:	e51b3010 	ldr	r3, [fp, #-16]
300078f4:	e3a02002 	mov	r2, #2
300078f8:	e5c32000 	strb	r2, [r3]
            pevent->OSEventCnt     = 0u;
300078fc:	e51b3010 	ldr	r3, [fp, #-16]
30007900:	e3a02000 	mov	r2, #0
30007904:	e1c320b8 	strh	r2, [r3, #8]
            pevent->OSEventPtr     = pq;
30007908:	e51b3010 	ldr	r3, [fp, #-16]
3000790c:	e51b200c 	ldr	r2, [fp, #-12]
30007910:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
            pevent->OSEventName    = (INT8U *)(void *)"?";
30007914:	e51b3010 	ldr	r3, [fp, #-16]
30007918:	e59f2058 	ldr	r2, [pc, #88]	; 30007978 <OSQCreate+0x1a8>
3000791c:	e5832014 	str	r2, [r3, #20]
#endif
            OS_EventWaitListInit(pevent);                 /*      Initialize the wait list             */
30007920:	e51b0010 	ldr	r0, [fp, #-16]
30007924:	ebffedc9 	bl	30003050 <OS_EventWaitListInit>
30007928:	ea00000a 	b	30007958 <OSQCreate+0x188>

            OS_TRACE_Q_CREATE(pevent, pevent->OSEventName);
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
3000792c:	e59f303c 	ldr	r3, [pc, #60]	; 30007970 <OSQCreate+0x1a0>
30007930:	e5932000 	ldr	r2, [r3]
30007934:	e51b3010 	ldr	r3, [fp, #-16]
30007938:	e5832004 	str	r2, [r3, #4]
            OSEventFreeList    = pevent;
3000793c:	e59f302c 	ldr	r3, [pc, #44]	; 30007970 <OSQCreate+0x1a0>
30007940:	e51b2010 	ldr	r2, [fp, #-16]
30007944:	e5832000 	str	r2, [r3]
            OS_EXIT_CRITICAL();
30007948:	e51b0008 	ldr	r0, [fp, #-8]
3000794c:	ebffe1f9 	bl	30000138 <OS_CPU_RestoreSR>
            pevent = (OS_EVENT *)0;
30007950:	e3a03000 	mov	r3, #0
30007954:	e50b3010 	str	r3, [fp, #-16]
        }
    }
    return (pevent);
30007958:	e51b3010 	ldr	r3, [fp, #-16]
}
3000795c:	e1a00003 	mov	r0, r3
30007960:	e24bd004 	sub	sp, fp, #4
30007964:	e8bd4800 	pop	{fp, lr}
30007968:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000796c:	30017bdc 	.word	0x30017bdc
30007970:	30017bd8 	.word	0x30017bd8
30007974:	300179c8 	.word	0x300179c8
30007978:	3000c278 	.word	0x3000c278

3000797c <OSQDel>:

#if OS_Q_DEL_EN > 0u
OS_EVENT  *OSQDel (OS_EVENT  *pevent,
                   INT8U      opt,
                   INT8U     *perr)
{
3000797c:	e92d4800 	push	{fp, lr}
30007980:	e28db004 	add	fp, sp, #4
30007984:	e24dd020 	sub	sp, sp, #32
30007988:	e50b0018 	str	r0, [fp, #-24]
3000798c:	e1a03001 	mov	r3, r1
30007990:	e50b2020 	str	r2, [fp, #-32]
30007994:	e54b3019 	strb	r3, [fp, #-25]
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
30007998:	e3a03000 	mov	r3, #0
3000799c:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_EVENT *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
300079a0:	e51b3018 	ldr	r3, [fp, #-24]
300079a4:	e3530000 	cmp	r3, #0
300079a8:	1a000004 	bne	300079c0 <OSQDel+0x44>
        *perr = OS_ERR_PEVENT_NULL;
300079ac:	e51b3020 	ldr	r3, [fp, #-32]
300079b0:	e3a02004 	mov	r2, #4
300079b4:	e5c32000 	strb	r2, [r3]
        return (pevent);
300079b8:	e51b3018 	ldr	r3, [fp, #-24]
300079bc:	ea000089 	b	30007be8 <OSQDel+0x26c>
    }
#endif

    OS_TRACE_Q_DEL_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
300079c0:	e51b3018 	ldr	r3, [fp, #-24]
300079c4:	e5d33000 	ldrb	r3, [r3]
300079c8:	e3530002 	cmp	r3, #2
300079cc:	0a000004 	beq	300079e4 <OSQDel+0x68>
        *perr = OS_ERR_EVENT_TYPE;
300079d0:	e51b3020 	ldr	r3, [fp, #-32]
300079d4:	e3a02001 	mov	r2, #1
300079d8:	e5c32000 	strb	r2, [r3]
        OS_TRACE_Q_DEL_EXIT(*perr);
        return (pevent);
300079dc:	e51b3018 	ldr	r3, [fp, #-24]
300079e0:	ea000080 	b	30007be8 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
300079e4:	e59f320c 	ldr	r3, [pc, #524]	; 30007bf8 <OSQDel+0x27c>
300079e8:	e5d33000 	ldrb	r3, [r3]
300079ec:	e3530000 	cmp	r3, #0
300079f0:	0a000004 	beq	30007a08 <OSQDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
300079f4:	e51b3020 	ldr	r3, [fp, #-32]
300079f8:	e3a0200f 	mov	r2, #15
300079fc:	e5c32000 	strb	r2, [r3]
        OS_TRACE_Q_DEL_EXIT(*perr);
        return (pevent);
30007a00:	e51b3018 	ldr	r3, [fp, #-24]
30007a04:	ea000077 	b	30007be8 <OSQDel+0x26c>
    }
    OS_ENTER_CRITICAL();
30007a08:	ebffe1c2 	bl	30000118 <OS_CPU_SaveSR>
30007a0c:	e1a03000 	mov	r3, r0
30007a10:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on queue        */
30007a14:	e51b3018 	ldr	r3, [fp, #-24]
30007a18:	e5d3300a 	ldrb	r3, [r3, #10]
30007a1c:	e3530000 	cmp	r3, #0
30007a20:	0a000002 	beq	30007a30 <OSQDel+0xb4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
30007a24:	e3a03001 	mov	r3, #1
30007a28:	e54b3011 	strb	r3, [fp, #-17]
30007a2c:	ea000001 	b	30007a38 <OSQDel+0xbc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
30007a30:	e3a03000 	mov	r3, #0
30007a34:	e54b3011 	strb	r3, [fp, #-17]
    }
    switch (opt) {
30007a38:	e55b3019 	ldrb	r3, [fp, #-25]
30007a3c:	e3530000 	cmp	r3, #0
30007a40:	0a000002 	beq	30007a50 <OSQDel+0xd4>
30007a44:	e3530001 	cmp	r3, #1
30007a48:	0a000033 	beq	30007b1c <OSQDel+0x1a0>
30007a4c:	ea00005d 	b	30007bc8 <OSQDel+0x24c>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
30007a50:	e55b3011 	ldrb	r3, [fp, #-17]
30007a54:	e3530000 	cmp	r3, #0
30007a58:	1a000021 	bne	30007ae4 <OSQDel+0x168>
#if OS_EVENT_NAME_EN > 0u
                 pevent->OSEventName    = (INT8U *)(void *)"?";
30007a5c:	e51b3018 	ldr	r3, [fp, #-24]
30007a60:	e59f2194 	ldr	r2, [pc, #404]	; 30007bfc <OSQDel+0x280>
30007a64:	e5832014 	str	r2, [r3, #20]
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
30007a68:	e51b3018 	ldr	r3, [fp, #-24]
30007a6c:	e5933004 	ldr	r3, [r3, #4]
30007a70:	e50b300c 	str	r3, [fp, #-12]
                 pq->OSQPtr             = OSQFreeList;
30007a74:	e59f3184 	ldr	r3, [pc, #388]	; 30007c00 <OSQDel+0x284>
30007a78:	e5932000 	ldr	r2, [r3]
30007a7c:	e51b300c 	ldr	r3, [fp, #-12]
30007a80:	e5832000 	str	r2, [r3]
                 OSQFreeList            = pq;
30007a84:	e59f3174 	ldr	r3, [pc, #372]	; 30007c00 <OSQDel+0x284>
30007a88:	e51b200c 	ldr	r2, [fp, #-12]
30007a8c:	e5832000 	str	r2, [r3]
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
30007a90:	e51b3018 	ldr	r3, [fp, #-24]
30007a94:	e3a02000 	mov	r2, #0
30007a98:	e5c32000 	strb	r2, [r3]
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
30007a9c:	e59f3160 	ldr	r3, [pc, #352]	; 30007c04 <OSQDel+0x288>
30007aa0:	e5932000 	ldr	r2, [r3]
30007aa4:	e51b3018 	ldr	r3, [fp, #-24]
30007aa8:	e5832004 	str	r2, [r3, #4]
                 pevent->OSEventCnt     = 0u;
30007aac:	e51b3018 	ldr	r3, [fp, #-24]
30007ab0:	e3a02000 	mov	r2, #0
30007ab4:	e1c320b8 	strh	r2, [r3, #8]
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
30007ab8:	e59f3144 	ldr	r3, [pc, #324]	; 30007c04 <OSQDel+0x288>
30007abc:	e51b2018 	ldr	r2, [fp, #-24]
30007ac0:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
30007ac4:	e51b0008 	ldr	r0, [fp, #-8]
30007ac8:	ebffe19a 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                  = OS_ERR_NONE;
30007acc:	e51b3020 	ldr	r3, [fp, #-32]
30007ad0:	e3a02000 	mov	r2, #0
30007ad4:	e5c32000 	strb	r2, [r3]
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
30007ad8:	e3a03000 	mov	r3, #0
30007adc:	e50b3010 	str	r3, [fp, #-16]
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
30007ae0:	ea00003f 	b	30007be4 <OSQDel+0x268>
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
30007ae4:	e51b0008 	ldr	r0, [fp, #-8]
30007ae8:	ebffe192 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                  = OS_ERR_TASK_WAITING;
30007aec:	e51b3020 	ldr	r3, [fp, #-32]
30007af0:	e3a02049 	mov	r2, #73	; 0x49
30007af4:	e5c32000 	strb	r2, [r3]
                 pevent_return          = pevent;
30007af8:	e51b3018 	ldr	r3, [fp, #-24]
30007afc:	e50b3010 	str	r3, [fp, #-16]
             }
             break;
30007b00:	ea000037 	b	30007be4 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
30007b04:	e51b0018 	ldr	r0, [fp, #-24]
30007b08:	e3a01000 	mov	r1, #0
30007b0c:	e3a02004 	mov	r2, #4
30007b10:	e3a03002 	mov	r3, #2
30007b14:	ebffebc5 	bl	30002a30 <OS_EventTaskRdy>
30007b18:	ea000000 	b	30007b20 <OSQDel+0x1a4>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
30007b1c:	e1a00000 	nop			; (mov r0, r0)
30007b20:	e51b3018 	ldr	r3, [fp, #-24]
30007b24:	e5d3300a 	ldrb	r3, [r3, #10]
30007b28:	e3530000 	cmp	r3, #0
30007b2c:	1afffff4 	bne	30007b04 <OSQDel+0x188>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
             }
#if OS_EVENT_NAME_EN > 0u
             pevent->OSEventName    = (INT8U *)(void *)"?";
30007b30:	e51b3018 	ldr	r3, [fp, #-24]
30007b34:	e59f20c0 	ldr	r2, [pc, #192]	; 30007bfc <OSQDel+0x280>
30007b38:	e5832014 	str	r2, [r3, #20]
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
30007b3c:	e51b3018 	ldr	r3, [fp, #-24]
30007b40:	e5933004 	ldr	r3, [r3, #4]
30007b44:	e50b300c 	str	r3, [fp, #-12]
             pq->OSQPtr             = OSQFreeList;
30007b48:	e59f30b0 	ldr	r3, [pc, #176]	; 30007c00 <OSQDel+0x284>
30007b4c:	e5932000 	ldr	r2, [r3]
30007b50:	e51b300c 	ldr	r3, [fp, #-12]
30007b54:	e5832000 	str	r2, [r3]
             OSQFreeList            = pq;
30007b58:	e59f30a0 	ldr	r3, [pc, #160]	; 30007c00 <OSQDel+0x284>
30007b5c:	e51b200c 	ldr	r2, [fp, #-12]
30007b60:	e5832000 	str	r2, [r3]
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
30007b64:	e51b3018 	ldr	r3, [fp, #-24]
30007b68:	e3a02000 	mov	r2, #0
30007b6c:	e5c32000 	strb	r2, [r3]
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
30007b70:	e59f308c 	ldr	r3, [pc, #140]	; 30007c04 <OSQDel+0x288>
30007b74:	e5932000 	ldr	r2, [r3]
30007b78:	e51b3018 	ldr	r3, [fp, #-24]
30007b7c:	e5832004 	str	r2, [r3, #4]
             pevent->OSEventCnt     = 0u;
30007b80:	e51b3018 	ldr	r3, [fp, #-24]
30007b84:	e3a02000 	mov	r2, #0
30007b88:	e1c320b8 	strh	r2, [r3, #8]
             OSEventFreeList        = pevent;              /* Get next free event control block        */
30007b8c:	e59f3070 	ldr	r3, [pc, #112]	; 30007c04 <OSQDel+0x288>
30007b90:	e51b2018 	ldr	r2, [fp, #-24]
30007b94:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
30007b98:	e51b0008 	ldr	r0, [fp, #-8]
30007b9c:	ebffe165 	bl	30000138 <OS_CPU_RestoreSR>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
30007ba0:	e55b3011 	ldrb	r3, [fp, #-17]
30007ba4:	e3530001 	cmp	r3, #1
30007ba8:	1a000000 	bne	30007bb0 <OSQDel+0x234>
                 OS_Sched();                               /* Find highest priority task ready to run  */
30007bac:	ebffeea5 	bl	30003648 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
30007bb0:	e51b3020 	ldr	r3, [fp, #-32]
30007bb4:	e3a02000 	mov	r2, #0
30007bb8:	e5c32000 	strb	r2, [r3]
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
30007bbc:	e3a03000 	mov	r3, #0
30007bc0:	e50b3010 	str	r3, [fp, #-16]
             break;
30007bc4:	ea000006 	b	30007be4 <OSQDel+0x268>

        default:
             OS_EXIT_CRITICAL();
30007bc8:	e51b0008 	ldr	r0, [fp, #-8]
30007bcc:	ebffe159 	bl	30000138 <OS_CPU_RestoreSR>
             *perr                  = OS_ERR_INVALID_OPT;
30007bd0:	e51b3020 	ldr	r3, [fp, #-32]
30007bd4:	e3a02007 	mov	r2, #7
30007bd8:	e5c32000 	strb	r2, [r3]
             pevent_return          = pevent;
30007bdc:	e51b3018 	ldr	r3, [fp, #-24]
30007be0:	e50b3010 	str	r3, [fp, #-16]
             break;
    }

    OS_TRACE_Q_DEL_EXIT(*perr);

    return (pevent_return);
30007be4:	e51b3010 	ldr	r3, [fp, #-16]
}
30007be8:	e1a00003 	mov	r0, r3
30007bec:	e24bd004 	sub	sp, fp, #4
30007bf0:	e8bd4800 	pop	{fp, lr}
30007bf4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30007bf8:	30017bdc 	.word	0x30017bdc
30007bfc:	3000c278 	.word	0x3000c278
30007c00:	300179c8 	.word	0x300179c8
30007c04:	30017bd8 	.word	0x30017bd8

30007c08 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0u
INT8U  OSQFlush (OS_EVENT *pevent)
{
30007c08:	e92d4800 	push	{fp, lr}
30007c0c:	e28db004 	add	fp, sp, #4
30007c10:	e24dd010 	sub	sp, sp, #16
30007c14:	e50b0010 	str	r0, [fp, #-16]
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30007c18:	e3a03000 	mov	r3, #0
30007c1c:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
30007c20:	e51b3010 	ldr	r3, [fp, #-16]
30007c24:	e3530000 	cmp	r3, #0
30007c28:	1a000001 	bne	30007c34 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
30007c2c:	e3a03004 	mov	r3, #4
30007c30:	ea000019 	b	30007c9c <OSQFlush+0x94>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
30007c34:	e51b3010 	ldr	r3, [fp, #-16]
30007c38:	e5d33000 	ldrb	r3, [r3]
30007c3c:	e3530002 	cmp	r3, #2
30007c40:	0a000001 	beq	30007c4c <OSQFlush+0x44>
        return (OS_ERR_EVENT_TYPE);
30007c44:	e3a03001 	mov	r3, #1
30007c48:	ea000013 	b	30007c9c <OSQFlush+0x94>
    }
#endif
    OS_ENTER_CRITICAL();
30007c4c:	ebffe131 	bl	30000118 <OS_CPU_SaveSR>
30007c50:	e1a03000 	mov	r3, r0
30007c54:	e50b3008 	str	r3, [fp, #-8]
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
30007c58:	e51b3010 	ldr	r3, [fp, #-16]
30007c5c:	e5933004 	ldr	r3, [r3, #4]
30007c60:	e50b300c 	str	r3, [fp, #-12]
    pq->OSQIn      = pq->OSQStart;
30007c64:	e51b300c 	ldr	r3, [fp, #-12]
30007c68:	e5932004 	ldr	r2, [r3, #4]
30007c6c:	e51b300c 	ldr	r3, [fp, #-12]
30007c70:	e583200c 	str	r2, [r3, #12]
    pq->OSQOut     = pq->OSQStart;
30007c74:	e51b300c 	ldr	r3, [fp, #-12]
30007c78:	e5932004 	ldr	r2, [r3, #4]
30007c7c:	e51b300c 	ldr	r3, [fp, #-12]
30007c80:	e5832010 	str	r2, [r3, #16]
    pq->OSQEntries = 0u;
30007c84:	e51b300c 	ldr	r3, [fp, #-12]
30007c88:	e3a02000 	mov	r2, #0
30007c8c:	e1c321b6 	strh	r2, [r3, #22]
    OS_EXIT_CRITICAL();
30007c90:	e51b0008 	ldr	r0, [fp, #-8]
30007c94:	ebffe127 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_NONE);
30007c98:	e3a03000 	mov	r3, #0
}
30007c9c:	e1a00003 	mov	r0, r3
30007ca0:	e24bd004 	sub	sp, fp, #4
30007ca4:	e8bd4800 	pop	{fp, lr}
30007ca8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30007cac <OSQPend>:
*/

void  *OSQPend (OS_EVENT  *pevent,
                INT32U     timeout,
                INT8U     *perr)
{
30007cac:	e92d4800 	push	{fp, lr}
30007cb0:	e28db004 	add	fp, sp, #4
30007cb4:	e24dd020 	sub	sp, sp, #32
30007cb8:	e50b0018 	str	r0, [fp, #-24]
30007cbc:	e50b101c 	str	r1, [fp, #-28]
30007cc0:	e50b2020 	str	r2, [fp, #-32]
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30007cc4:	e3a03000 	mov	r3, #0
30007cc8:	e50b3008 	str	r3, [fp, #-8]
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
30007ccc:	e51b3018 	ldr	r3, [fp, #-24]
30007cd0:	e3530000 	cmp	r3, #0
30007cd4:	1a000004 	bne	30007cec <OSQPend+0x40>
        *perr = OS_ERR_PEVENT_NULL;
30007cd8:	e51b3020 	ldr	r3, [fp, #-32]
30007cdc:	e3a02004 	mov	r2, #4
30007ce0:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
30007ce4:	e3a03000 	mov	r3, #0
30007ce8:	ea000096 	b	30007f48 <OSQPend+0x29c>
    }
#endif

    OS_TRACE_Q_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
30007cec:	e51b3018 	ldr	r3, [fp, #-24]
30007cf0:	e5d33000 	ldrb	r3, [r3]
30007cf4:	e3530002 	cmp	r3, #2
30007cf8:	0a000004 	beq	30007d10 <OSQPend+0x64>
        *perr = OS_ERR_EVENT_TYPE;
30007cfc:	e51b3020 	ldr	r3, [fp, #-32]
30007d00:	e3a02001 	mov	r2, #1
30007d04:	e5c32000 	strb	r2, [r3]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
30007d08:	e3a03000 	mov	r3, #0
30007d0c:	ea00008d 	b	30007f48 <OSQPend+0x29c>
    }
    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
30007d10:	e59f3240 	ldr	r3, [pc, #576]	; 30007f58 <OSQPend+0x2ac>
30007d14:	e5d33000 	ldrb	r3, [r3]
30007d18:	e3530000 	cmp	r3, #0
30007d1c:	0a000004 	beq	30007d34 <OSQPend+0x88>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
30007d20:	e51b3020 	ldr	r3, [fp, #-32]
30007d24:	e3a02002 	mov	r2, #2
30007d28:	e5c32000 	strb	r2, [r3]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
30007d2c:	e3a03000 	mov	r3, #0
30007d30:	ea000084 	b	30007f48 <OSQPend+0x29c>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
30007d34:	e59f3220 	ldr	r3, [pc, #544]	; 30007f5c <OSQPend+0x2b0>
30007d38:	e5d33000 	ldrb	r3, [r3]
30007d3c:	e3530000 	cmp	r3, #0
30007d40:	0a000004 	beq	30007d58 <OSQPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
30007d44:	e51b3020 	ldr	r3, [fp, #-32]
30007d48:	e3a0200d 	mov	r2, #13
30007d4c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
30007d50:	e3a03000 	mov	r3, #0
30007d54:	ea00007b 	b	30007f48 <OSQPend+0x29c>
    }
    OS_ENTER_CRITICAL();
30007d58:	ebffe0ee 	bl	30000118 <OS_CPU_SaveSR>
30007d5c:	e1a03000 	mov	r3, r0
30007d60:	e50b3008 	str	r3, [fp, #-8]
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
30007d64:	e51b3018 	ldr	r3, [fp, #-24]
30007d68:	e5933004 	ldr	r3, [r3, #4]
30007d6c:	e50b300c 	str	r3, [fp, #-12]
    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
30007d70:	e51b300c 	ldr	r3, [fp, #-12]
30007d74:	e1d331b6 	ldrh	r3, [r3, #22]
30007d78:	e3530000 	cmp	r3, #0
30007d7c:	0a00001e 	beq	30007dfc <OSQPend+0x150>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
30007d80:	e51b300c 	ldr	r3, [fp, #-12]
30007d84:	e5933010 	ldr	r3, [r3, #16]
30007d88:	e5932000 	ldr	r2, [r3]
30007d8c:	e50b2010 	str	r2, [fp, #-16]
30007d90:	e2832004 	add	r2, r3, #4
30007d94:	e51b300c 	ldr	r3, [fp, #-12]
30007d98:	e5832010 	str	r2, [r3, #16]
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
30007d9c:	e51b300c 	ldr	r3, [fp, #-12]
30007da0:	e1d331b6 	ldrh	r3, [r3, #22]
30007da4:	e2433001 	sub	r3, r3, #1
30007da8:	e1a03803 	lsl	r3, r3, #16
30007dac:	e1a02823 	lsr	r2, r3, #16
30007db0:	e51b300c 	ldr	r3, [fp, #-12]
30007db4:	e1c321b6 	strh	r2, [r3, #22]
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
30007db8:	e51b300c 	ldr	r3, [fp, #-12]
30007dbc:	e5932010 	ldr	r2, [r3, #16]
30007dc0:	e51b300c 	ldr	r3, [fp, #-12]
30007dc4:	e5933008 	ldr	r3, [r3, #8]
30007dc8:	e1520003 	cmp	r2, r3
30007dcc:	1a000003 	bne	30007de0 <OSQPend+0x134>
            pq->OSQOut = pq->OSQStart;
30007dd0:	e51b300c 	ldr	r3, [fp, #-12]
30007dd4:	e5932004 	ldr	r2, [r3, #4]
30007dd8:	e51b300c 	ldr	r3, [fp, #-12]
30007ddc:	e5832010 	str	r2, [r3, #16]
        }
        OS_EXIT_CRITICAL();
30007de0:	e51b0008 	ldr	r0, [fp, #-8]
30007de4:	ebffe0d3 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_NONE;
30007de8:	e51b3020 	ldr	r3, [fp, #-32]
30007dec:	e3a02000 	mov	r2, #0
30007df0:	e5c32000 	strb	r2, [r3]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return (pmsg);                           /* Return message received                            */
30007df4:	e51b3010 	ldr	r3, [fp, #-16]
30007df8:	ea000052 	b	30007f48 <OSQPend+0x29c>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
30007dfc:	e59f315c 	ldr	r3, [pc, #348]	; 30007f60 <OSQPend+0x2b4>
30007e00:	e5933000 	ldr	r3, [r3]
30007e04:	e59f2154 	ldr	r2, [pc, #340]	; 30007f60 <OSQPend+0x2b4>
30007e08:	e5922000 	ldr	r2, [r2]
30007e0c:	e5d22038 	ldrb	r2, [r2, #56]	; 0x38
30007e10:	e3822004 	orr	r2, r2, #4
30007e14:	e20220ff 	and	r2, r2, #255	; 0xff
30007e18:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
30007e1c:	e59f313c 	ldr	r3, [pc, #316]	; 30007f60 <OSQPend+0x2b4>
30007e20:	e5933000 	ldr	r3, [r3]
30007e24:	e3a02000 	mov	r2, #0
30007e28:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
30007e2c:	e59f312c 	ldr	r3, [pc, #300]	; 30007f60 <OSQPend+0x2b4>
30007e30:	e5933000 	ldr	r3, [r3]
30007e34:	e51b201c 	ldr	r2, [fp, #-28]
30007e38:	e5832034 	str	r2, [r3, #52]	; 0x34
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
30007e3c:	e51b0018 	ldr	r0, [fp, #-24]
30007e40:	ebffeb5d 	bl	30002bbc <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
30007e44:	e51b0008 	ldr	r0, [fp, #-8]
30007e48:	ebffe0ba 	bl	30000138 <OS_CPU_RestoreSR>
    OS_Sched();                                  /* Find next highest priority task ready to run       */
30007e4c:	ebffedfd 	bl	30003648 <OS_Sched>
    OS_ENTER_CRITICAL();
30007e50:	ebffe0b0 	bl	30000118 <OS_CPU_SaveSR>
30007e54:	e1a03000 	mov	r3, r0
30007e58:	e50b3008 	str	r3, [fp, #-8]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
30007e5c:	e59f30fc 	ldr	r3, [pc, #252]	; 30007f60 <OSQPend+0x2b4>
30007e60:	e5933000 	ldr	r3, [r3]
30007e64:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
30007e68:	e3530000 	cmp	r3, #0
30007e6c:	0a000002 	beq	30007e7c <OSQPend+0x1d0>
30007e70:	e3530002 	cmp	r3, #2
30007e74:	0a000008 	beq	30007e9c <OSQPend+0x1f0>
30007e78:	ea00000d 	b	30007eb4 <OSQPend+0x208>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
30007e7c:	e59f30dc 	ldr	r3, [pc, #220]	; 30007f60 <OSQPend+0x2b4>
30007e80:	e5933000 	ldr	r3, [r3]
30007e84:	e5933028 	ldr	r3, [r3, #40]	; 0x28
30007e88:	e50b3010 	str	r3, [fp, #-16]
            *perr =  OS_ERR_NONE;
30007e8c:	e51b3020 	ldr	r3, [fp, #-32]
30007e90:	e3a02000 	mov	r2, #0
30007e94:	e5c32000 	strb	r2, [r3]
             break;
30007e98:	ea00000f 	b	30007edc <OSQPend+0x230>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
30007e9c:	e3a03000 	mov	r3, #0
30007ea0:	e50b3010 	str	r3, [fp, #-16]
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
30007ea4:	e51b3020 	ldr	r3, [fp, #-32]
30007ea8:	e3a0200e 	mov	r2, #14
30007eac:	e5c32000 	strb	r2, [r3]
             break;
30007eb0:	ea000009 	b	30007edc <OSQPend+0x230>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
30007eb4:	e59f30a4 	ldr	r3, [pc, #164]	; 30007f60 <OSQPend+0x2b4>
30007eb8:	e5933000 	ldr	r3, [r3]
30007ebc:	e1a00003 	mov	r0, r3
30007ec0:	e51b1018 	ldr	r1, [fp, #-24]
30007ec4:	ebffebed 	bl	30002e80 <OS_EventTaskRemove>
             pmsg = (void *)0;
30007ec8:	e3a03000 	mov	r3, #0
30007ecc:	e50b3010 	str	r3, [fp, #-16]
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
30007ed0:	e51b3020 	ldr	r3, [fp, #-32]
30007ed4:	e3a0200a 	mov	r2, #10
30007ed8:	e5c32000 	strb	r2, [r3]
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
30007edc:	e59f307c 	ldr	r3, [pc, #124]	; 30007f60 <OSQPend+0x2b4>
30007ee0:	e5933000 	ldr	r3, [r3]
30007ee4:	e3a02000 	mov	r2, #0
30007ee8:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
30007eec:	e59f306c 	ldr	r3, [pc, #108]	; 30007f60 <OSQPend+0x2b4>
30007ef0:	e5933000 	ldr	r3, [r3]
30007ef4:	e3a02000 	mov	r2, #0
30007ef8:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
30007efc:	e59f305c 	ldr	r3, [pc, #92]	; 30007f60 <OSQPend+0x2b4>
30007f00:	e5933000 	ldr	r3, [r3]
30007f04:	e3a02000 	mov	r2, #0
30007f08:	e583201c 	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
30007f0c:	e59f304c 	ldr	r3, [pc, #76]	; 30007f60 <OSQPend+0x2b4>
30007f10:	e5933000 	ldr	r3, [r3]
30007f14:	e3a02000 	mov	r2, #0
30007f18:	e5832020 	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
30007f1c:	e59f303c 	ldr	r3, [pc, #60]	; 30007f60 <OSQPend+0x2b4>
30007f20:	e5933000 	ldr	r3, [r3]
30007f24:	e3a02000 	mov	r2, #0
30007f28:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
30007f2c:	e59f302c 	ldr	r3, [pc, #44]	; 30007f60 <OSQPend+0x2b4>
30007f30:	e5933000 	ldr	r3, [r3]
30007f34:	e3a02000 	mov	r2, #0
30007f38:	e5832028 	str	r2, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL();
30007f3c:	e51b0008 	ldr	r0, [fp, #-8]
30007f40:	ebffe07c 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_Q_PEND_EXIT(*perr);

    return (pmsg);                                    /* Return received message                       */
30007f44:	e51b3010 	ldr	r3, [fp, #-16]
}
30007f48:	e1a00003 	mov	r0, r3
30007f4c:	e24bd004 	sub	sp, fp, #4
30007f50:	e8bd4800 	pop	{fp, lr}
30007f54:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30007f58:	30017bdc 	.word	0x30017bdc
30007f5c:	300173e8 	.word	0x300173e8
30007f60:	30017be0 	.word	0x30017be0

30007f64 <OSQPendAbort>:

#if OS_Q_PEND_ABORT_EN > 0u
INT8U  OSQPendAbort (OS_EVENT  *pevent,
                     INT8U      opt,
                     INT8U     *perr)
{
30007f64:	e92d4800 	push	{fp, lr}
30007f68:	e28db004 	add	fp, sp, #4
30007f6c:	e24dd018 	sub	sp, sp, #24
30007f70:	e50b0010 	str	r0, [fp, #-16]
30007f74:	e1a03001 	mov	r3, r1
30007f78:	e50b2018 	str	r2, [fp, #-24]
30007f7c:	e54b3011 	strb	r3, [fp, #-17]
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
30007f80:	e3a03000 	mov	r3, #0
30007f84:	e50b3008 	str	r3, [fp, #-8]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
30007f88:	e51b3010 	ldr	r3, [fp, #-16]
30007f8c:	e3530000 	cmp	r3, #0
30007f90:	1a000004 	bne	30007fa8 <OSQPendAbort+0x44>
        *perr = OS_ERR_PEVENT_NULL;
30007f94:	e51b3018 	ldr	r3, [fp, #-24]
30007f98:	e3a02004 	mov	r2, #4
30007f9c:	e5c32000 	strb	r2, [r3]
        return (0u);
30007fa0:	e3a03000 	mov	r3, #0
30007fa4:	ea00003a 	b	30008094 <OSQPendAbort+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
30007fa8:	e51b3010 	ldr	r3, [fp, #-16]
30007fac:	e5d33000 	ldrb	r3, [r3]
30007fb0:	e3530002 	cmp	r3, #2
30007fb4:	0a000004 	beq	30007fcc <OSQPendAbort+0x68>
        *perr = OS_ERR_EVENT_TYPE;
30007fb8:	e51b3018 	ldr	r3, [fp, #-24]
30007fbc:	e3a02001 	mov	r2, #1
30007fc0:	e5c32000 	strb	r2, [r3]
        return (0u);
30007fc4:	e3a03000 	mov	r3, #0
30007fc8:	ea000031 	b	30008094 <OSQPendAbort+0x130>
    }
    OS_ENTER_CRITICAL();
30007fcc:	ebffe051 	bl	30000118 <OS_CPU_SaveSR>
30007fd0:	e1a03000 	mov	r3, r0
30007fd4:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
30007fd8:	e51b3010 	ldr	r3, [fp, #-16]
30007fdc:	e5d3300a 	ldrb	r3, [r3, #10]
30007fe0:	e3530000 	cmp	r3, #0
30007fe4:	0a000024 	beq	3000807c <OSQPendAbort+0x118>
        nbr_tasks = 0u;
30007fe8:	e3a03000 	mov	r3, #0
30007fec:	e54b3009 	strb	r3, [fp, #-9]
        switch (opt) {
30007ff0:	e55b3011 	ldrb	r3, [fp, #-17]
30007ff4:	e3530001 	cmp	r3, #1
30007ff8:	0a000009 	beq	30008024 <OSQPendAbort+0xc0>
30007ffc:	ea00000e 	b	3000803c <OSQPendAbort+0xd8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
30008000:	e51b0010 	ldr	r0, [fp, #-16]
30008004:	e3a01000 	mov	r1, #0
30008008:	e3a02004 	mov	r2, #4
3000800c:	e3a03002 	mov	r3, #2
30008010:	ebffea86 	bl	30002a30 <OS_EventTaskRdy>
                     nbr_tasks++;
30008014:	e55b3009 	ldrb	r3, [fp, #-9]
30008018:	e2833001 	add	r3, r3, #1
3000801c:	e54b3009 	strb	r3, [fp, #-9]
30008020:	ea000000 	b	30008028 <OSQPendAbort+0xc4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
        nbr_tasks = 0u;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
30008024:	e1a00000 	nop			; (mov r0, r0)
30008028:	e51b3010 	ldr	r3, [fp, #-16]
3000802c:	e5d3300a 	ldrb	r3, [r3, #10]
30008030:	e3530000 	cmp	r3, #0
30008034:	1afffff1 	bne	30008000 <OSQPendAbort+0x9c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
30008038:	ea000007 	b	3000805c <OSQPendAbort+0xf8>

            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
3000803c:	e51b0010 	ldr	r0, [fp, #-16]
30008040:	e3a01000 	mov	r1, #0
30008044:	e3a02004 	mov	r2, #4
30008048:	e3a03002 	mov	r3, #2
3000804c:	ebffea77 	bl	30002a30 <OS_EventTaskRdy>
                 nbr_tasks++;
30008050:	e55b3009 	ldrb	r3, [fp, #-9]
30008054:	e2833001 	add	r3, r3, #1
30008058:	e54b3009 	strb	r3, [fp, #-9]
                 break;
        }
        OS_EXIT_CRITICAL();
3000805c:	e51b0008 	ldr	r0, [fp, #-8]
30008060:	ebffe034 	bl	30000138 <OS_CPU_RestoreSR>
        OS_Sched();                                        /* Find HPT ready to run                    */
30008064:	ebffed77 	bl	30003648 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
30008068:	e51b3018 	ldr	r3, [fp, #-24]
3000806c:	e3a0200e 	mov	r2, #14
30008070:	e5c32000 	strb	r2, [r3]
        return (nbr_tasks);
30008074:	e55b3009 	ldrb	r3, [fp, #-9]
30008078:	ea000005 	b	30008094 <OSQPendAbort+0x130>
    }
    OS_EXIT_CRITICAL();
3000807c:	e51b0008 	ldr	r0, [fp, #-8]
30008080:	ebffe02c 	bl	30000138 <OS_CPU_RestoreSR>
    *perr = OS_ERR_NONE;
30008084:	e51b3018 	ldr	r3, [fp, #-24]
30008088:	e3a02000 	mov	r2, #0
3000808c:	e5c32000 	strb	r2, [r3]
    return (0u);                                           /* No tasks waiting on queue                */
30008090:	e3a03000 	mov	r3, #0
}
30008094:	e1a00003 	mov	r0, r3
30008098:	e24bd004 	sub	sp, fp, #4
3000809c:	e8bd4800 	pop	{fp, lr}
300080a0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300080a4 <OSQPost>:
*/

#if OS_Q_POST_EN > 0u
INT8U  OSQPost (OS_EVENT  *pevent,
                void      *pmsg)
{
300080a4:	e92d4800 	push	{fp, lr}
300080a8:	e28db004 	add	fp, sp, #4
300080ac:	e24dd010 	sub	sp, sp, #16
300080b0:	e50b0010 	str	r0, [fp, #-16]
300080b4:	e50b1014 	str	r1, [fp, #-20]
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
300080b8:	e3a03000 	mov	r3, #0
300080bc:	e50b3008 	str	r3, [fp, #-8]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
300080c0:	e51b3010 	ldr	r3, [fp, #-16]
300080c4:	e3530000 	cmp	r3, #0
300080c8:	1a000001 	bne	300080d4 <OSQPost+0x30>
        return (OS_ERR_PEVENT_NULL);
300080cc:	e3a03004 	mov	r3, #4
300080d0:	ea00003e 	b	300081d0 <OSQPost+0x12c>
    }
#endif

    OS_TRACE_Q_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
300080d4:	e51b3010 	ldr	r3, [fp, #-16]
300080d8:	e5d33000 	ldrb	r3, [r3]
300080dc:	e3530002 	cmp	r3, #2
300080e0:	0a000001 	beq	300080ec <OSQPost+0x48>
        OS_TRACE_Q_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
300080e4:	e3a03001 	mov	r3, #1
300080e8:	ea000038 	b	300081d0 <OSQPost+0x12c>
    }
    OS_ENTER_CRITICAL();
300080ec:	ebffe009 	bl	30000118 <OS_CPU_SaveSR>
300080f0:	e1a03000 	mov	r3, r0
300080f4:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
300080f8:	e51b3010 	ldr	r3, [fp, #-16]
300080fc:	e5d3300a 	ldrb	r3, [r3, #10]
30008100:	e3530000 	cmp	r3, #0
30008104:	0a000009 	beq	30008130 <OSQPost+0x8c>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
30008108:	e51b0010 	ldr	r0, [fp, #-16]
3000810c:	e51b1014 	ldr	r1, [fp, #-20]
30008110:	e3a02004 	mov	r2, #4
30008114:	e3a03000 	mov	r3, #0
30008118:	ebffea44 	bl	30002a30 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
3000811c:	e51b0008 	ldr	r0, [fp, #-8]
30008120:	ebffe004 	bl	30000138 <OS_CPU_RestoreSR>
        OS_Sched();                                    /* Find highest priority task ready to run      */
30008124:	ebffed47 	bl	30003648 <OS_Sched>
        OS_TRACE_Q_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
30008128:	e3a03000 	mov	r3, #0
3000812c:	ea000027 	b	300081d0 <OSQPost+0x12c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
30008130:	e51b3010 	ldr	r3, [fp, #-16]
30008134:	e5933004 	ldr	r3, [r3, #4]
30008138:	e50b300c 	str	r3, [fp, #-12]
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
3000813c:	e51b300c 	ldr	r3, [fp, #-12]
30008140:	e1d321b6 	ldrh	r2, [r3, #22]
30008144:	e51b300c 	ldr	r3, [fp, #-12]
30008148:	e1d331b4 	ldrh	r3, [r3, #20]
3000814c:	e1520003 	cmp	r2, r3
30008150:	3a000003 	bcc	30008164 <OSQPost+0xc0>
        OS_EXIT_CRITICAL();
30008154:	e51b0008 	ldr	r0, [fp, #-8]
30008158:	ebffdff6 	bl	30000138 <OS_CPU_RestoreSR>
        OS_TRACE_Q_POST_EXIT(OS_ERR_Q_FULL);
        return (OS_ERR_Q_FULL);
3000815c:	e3a0301e 	mov	r3, #30
30008160:	ea00001a 	b	300081d0 <OSQPost+0x12c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
30008164:	e51b300c 	ldr	r3, [fp, #-12]
30008168:	e593300c 	ldr	r3, [r3, #12]
3000816c:	e51b2014 	ldr	r2, [fp, #-20]
30008170:	e5832000 	str	r2, [r3]
30008174:	e2832004 	add	r2, r3, #4
30008178:	e51b300c 	ldr	r3, [fp, #-12]
3000817c:	e583200c 	str	r2, [r3, #12]
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
30008180:	e51b300c 	ldr	r3, [fp, #-12]
30008184:	e1d331b6 	ldrh	r3, [r3, #22]
30008188:	e2833001 	add	r3, r3, #1
3000818c:	e1a03803 	lsl	r3, r3, #16
30008190:	e1a02823 	lsr	r2, r3, #16
30008194:	e51b300c 	ldr	r3, [fp, #-12]
30008198:	e1c321b6 	strh	r2, [r3, #22]
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
3000819c:	e51b300c 	ldr	r3, [fp, #-12]
300081a0:	e593200c 	ldr	r2, [r3, #12]
300081a4:	e51b300c 	ldr	r3, [fp, #-12]
300081a8:	e5933008 	ldr	r3, [r3, #8]
300081ac:	e1520003 	cmp	r2, r3
300081b0:	1a000003 	bne	300081c4 <OSQPost+0x120>
        pq->OSQIn = pq->OSQStart;
300081b4:	e51b300c 	ldr	r3, [fp, #-12]
300081b8:	e5932004 	ldr	r2, [r3, #4]
300081bc:	e51b300c 	ldr	r3, [fp, #-12]
300081c0:	e583200c 	str	r2, [r3, #12]
    }
    OS_EXIT_CRITICAL();
300081c4:	e51b0008 	ldr	r0, [fp, #-8]
300081c8:	ebffdfda 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_Q_POST_EXIT(OS_ERR_NONE);

    return (OS_ERR_NONE);
300081cc:	e3a03000 	mov	r3, #0
}
300081d0:	e1a00003 	mov	r0, r3
300081d4:	e24bd004 	sub	sp, fp, #4
300081d8:	e8bd4800 	pop	{fp, lr}
300081dc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

300081e0 <OSQPostFront>:
*/

#if OS_Q_POST_FRONT_EN > 0u
INT8U  OSQPostFront (OS_EVENT  *pevent,
                     void      *pmsg)
{
300081e0:	e92d4800 	push	{fp, lr}
300081e4:	e28db004 	add	fp, sp, #4
300081e8:	e24dd010 	sub	sp, sp, #16
300081ec:	e50b0010 	str	r0, [fp, #-16]
300081f0:	e50b1014 	str	r1, [fp, #-20]
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
300081f4:	e3a03000 	mov	r3, #0
300081f8:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
300081fc:	e51b3010 	ldr	r3, [fp, #-16]
30008200:	e3530000 	cmp	r3, #0
30008204:	1a000001 	bne	30008210 <OSQPostFront+0x30>
        return (OS_ERR_PEVENT_NULL);
30008208:	e3a03004 	mov	r3, #4
3000820c:	ea000040 	b	30008314 <OSQPostFront+0x134>
    }
#endif

    OS_TRACE_Q_POST_FRONT_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
30008210:	e51b3010 	ldr	r3, [fp, #-16]
30008214:	e5d33000 	ldrb	r3, [r3]
30008218:	e3530002 	cmp	r3, #2
3000821c:	0a000001 	beq	30008228 <OSQPostFront+0x48>
        OS_TRACE_Q_POST_FRONT_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
30008220:	e3a03001 	mov	r3, #1
30008224:	ea00003a 	b	30008314 <OSQPostFront+0x134>
    }
    OS_ENTER_CRITICAL();
30008228:	ebffdfba 	bl	30000118 <OS_CPU_SaveSR>
3000822c:	e1a03000 	mov	r3, r0
30008230:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on queue              */
30008234:	e51b3010 	ldr	r3, [fp, #-16]
30008238:	e5d3300a 	ldrb	r3, [r3, #10]
3000823c:	e3530000 	cmp	r3, #0
30008240:	0a000009 	beq	3000826c <OSQPostFront+0x8c>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
30008244:	e51b0010 	ldr	r0, [fp, #-16]
30008248:	e51b1014 	ldr	r1, [fp, #-20]
3000824c:	e3a02004 	mov	r2, #4
30008250:	e3a03000 	mov	r3, #0
30008254:	ebffe9f5 	bl	30002a30 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
30008258:	e51b0008 	ldr	r0, [fp, #-8]
3000825c:	ebffdfb5 	bl	30000138 <OS_CPU_RestoreSR>
        OS_Sched();                                   /* Find highest priority task ready to run       */
30008260:	ebffecf8 	bl	30003648 <OS_Sched>
        OS_TRACE_Q_POST_FRONT_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
30008264:	e3a03000 	mov	r3, #0
30008268:	ea000029 	b	30008314 <OSQPostFront+0x134>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
3000826c:	e51b3010 	ldr	r3, [fp, #-16]
30008270:	e5933004 	ldr	r3, [r3, #4]
30008274:	e50b300c 	str	r3, [fp, #-12]
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
30008278:	e51b300c 	ldr	r3, [fp, #-12]
3000827c:	e1d321b6 	ldrh	r2, [r3, #22]
30008280:	e51b300c 	ldr	r3, [fp, #-12]
30008284:	e1d331b4 	ldrh	r3, [r3, #20]
30008288:	e1520003 	cmp	r2, r3
3000828c:	3a000003 	bcc	300082a0 <OSQPostFront+0xc0>
        OS_EXIT_CRITICAL();
30008290:	e51b0008 	ldr	r0, [fp, #-8]
30008294:	ebffdfa7 	bl	30000138 <OS_CPU_RestoreSR>
        OS_TRACE_Q_POST_FRONT_EXIT(OS_ERR_Q_FULL);
        return (OS_ERR_Q_FULL);
30008298:	e3a0301e 	mov	r3, #30
3000829c:	ea00001c 	b	30008314 <OSQPostFront+0x134>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
300082a0:	e51b300c 	ldr	r3, [fp, #-12]
300082a4:	e5932010 	ldr	r2, [r3, #16]
300082a8:	e51b300c 	ldr	r3, [fp, #-12]
300082ac:	e5933004 	ldr	r3, [r3, #4]
300082b0:	e1520003 	cmp	r2, r3
300082b4:	1a000003 	bne	300082c8 <OSQPostFront+0xe8>
        pq->OSQOut = pq->OSQEnd;
300082b8:	e51b300c 	ldr	r3, [fp, #-12]
300082bc:	e5932008 	ldr	r2, [r3, #8]
300082c0:	e51b300c 	ldr	r3, [fp, #-12]
300082c4:	e5832010 	str	r2, [r3, #16]
    }
    pq->OSQOut--;
300082c8:	e51b300c 	ldr	r3, [fp, #-12]
300082cc:	e5933010 	ldr	r3, [r3, #16]
300082d0:	e2432004 	sub	r2, r3, #4
300082d4:	e51b300c 	ldr	r3, [fp, #-12]
300082d8:	e5832010 	str	r2, [r3, #16]
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
300082dc:	e51b300c 	ldr	r3, [fp, #-12]
300082e0:	e5933010 	ldr	r3, [r3, #16]
300082e4:	e51b2014 	ldr	r2, [fp, #-20]
300082e8:	e5832000 	str	r2, [r3]
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
300082ec:	e51b300c 	ldr	r3, [fp, #-12]
300082f0:	e1d331b6 	ldrh	r3, [r3, #22]
300082f4:	e2833001 	add	r3, r3, #1
300082f8:	e1a03803 	lsl	r3, r3, #16
300082fc:	e1a02823 	lsr	r2, r3, #16
30008300:	e51b300c 	ldr	r3, [fp, #-12]
30008304:	e1c321b6 	strh	r2, [r3, #22]
    OS_EXIT_CRITICAL();
30008308:	e51b0008 	ldr	r0, [fp, #-8]
3000830c:	ebffdf89 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_Q_POST_FRONT_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);
30008310:	e3a03000 	mov	r3, #0
}
30008314:	e1a00003 	mov	r0, r3
30008318:	e24bd004 	sub	sp, fp, #4
3000831c:	e8bd4800 	pop	{fp, lr}
30008320:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30008324 <OSQPostOpt>:

#if OS_Q_POST_OPT_EN > 0u
INT8U  OSQPostOpt (OS_EVENT  *pevent,
                   void      *pmsg,
                   INT8U      opt)
{
30008324:	e92d4800 	push	{fp, lr}
30008328:	e28db004 	add	fp, sp, #4
3000832c:	e24dd018 	sub	sp, sp, #24
30008330:	e50b0010 	str	r0, [fp, #-16]
30008334:	e50b1014 	str	r1, [fp, #-20]
30008338:	e1a03002 	mov	r3, r2
3000833c:	e54b3015 	strb	r3, [fp, #-21]
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30008340:	e3a03000 	mov	r3, #0
30008344:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
30008348:	e51b3010 	ldr	r3, [fp, #-16]
3000834c:	e3530000 	cmp	r3, #0
30008350:	1a000001 	bne	3000835c <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
30008354:	e3a03004 	mov	r3, #4
30008358:	ea00006a 	b	30008508 <OSQPostOpt+0x1e4>
    }
#endif

    OS_TRACE_Q_POST_OPT_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
3000835c:	e51b3010 	ldr	r3, [fp, #-16]
30008360:	e5d33000 	ldrb	r3, [r3]
30008364:	e3530002 	cmp	r3, #2
30008368:	0a000001 	beq	30008374 <OSQPostOpt+0x50>
        OS_TRACE_Q_POST_OPT_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
3000836c:	e3a03001 	mov	r3, #1
30008370:	ea000064 	b	30008508 <OSQPostOpt+0x1e4>
    }
    OS_ENTER_CRITICAL();
30008374:	ebffdf67 	bl	30000118 <OS_CPU_SaveSR>
30008378:	e1a03000 	mov	r3, r0
3000837c:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
30008380:	e51b3010 	ldr	r3, [fp, #-16]
30008384:	e5d3300a 	ldrb	r3, [r3, #10]
30008388:	e3530000 	cmp	r3, #0
3000838c:	0a00001d 	beq	30008408 <OSQPostOpt+0xe4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
30008390:	e55b3015 	ldrb	r3, [fp, #-21]
30008394:	e2033001 	and	r3, r3, #1
30008398:	e20330ff 	and	r3, r3, #255	; 0xff
3000839c:	e3530000 	cmp	r3, #0
300083a0:	0a00000a 	beq	300083d0 <OSQPostOpt+0xac>
            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
300083a4:	ea000004 	b	300083bc <OSQPostOpt+0x98>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
300083a8:	e51b0010 	ldr	r0, [fp, #-16]
300083ac:	e51b1014 	ldr	r1, [fp, #-20]
300083b0:	e3a02004 	mov	r2, #4
300083b4:	e3a03000 	mov	r3, #0
300083b8:	ebffe99c 	bl	30002a30 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
300083bc:	e51b3010 	ldr	r3, [fp, #-16]
300083c0:	e5d3300a 	ldrb	r3, [r3, #10]
300083c4:	e3530000 	cmp	r3, #0
300083c8:	1afffff6 	bne	300083a8 <OSQPostOpt+0x84>
300083cc:	ea000004 	b	300083e4 <OSQPostOpt+0xc0>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
300083d0:	e51b0010 	ldr	r0, [fp, #-16]
300083d4:	e51b1014 	ldr	r1, [fp, #-20]
300083d8:	e3a02004 	mov	r2, #4
300083dc:	e3a03000 	mov	r3, #0
300083e0:	ebffe992 	bl	30002a30 <OS_EventTaskRdy>
        }
        OS_EXIT_CRITICAL();
300083e4:	e51b0008 	ldr	r0, [fp, #-8]
300083e8:	ebffdf52 	bl	30000138 <OS_CPU_RestoreSR>
        if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
300083ec:	e55b3015 	ldrb	r3, [fp, #-21]
300083f0:	e2033004 	and	r3, r3, #4
300083f4:	e3530000 	cmp	r3, #0
300083f8:	1a000000 	bne	30008400 <OSQPostOpt+0xdc>
            OS_Sched();                               /* Find highest priority task ready to run       */
300083fc:	ebffec91 	bl	30003648 <OS_Sched>
        }
        OS_TRACE_Q_POST_OPT_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
30008400:	e3a03000 	mov	r3, #0
30008404:	ea00003f 	b	30008508 <OSQPostOpt+0x1e4>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
30008408:	e51b3010 	ldr	r3, [fp, #-16]
3000840c:	e5933004 	ldr	r3, [r3, #4]
30008410:	e50b300c 	str	r3, [fp, #-12]
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
30008414:	e51b300c 	ldr	r3, [fp, #-12]
30008418:	e1d321b6 	ldrh	r2, [r3, #22]
3000841c:	e51b300c 	ldr	r3, [fp, #-12]
30008420:	e1d331b4 	ldrh	r3, [r3, #20]
30008424:	e1520003 	cmp	r2, r3
30008428:	3a000003 	bcc	3000843c <OSQPostOpt+0x118>
        OS_EXIT_CRITICAL();
3000842c:	e51b0008 	ldr	r0, [fp, #-8]
30008430:	ebffdf40 	bl	30000138 <OS_CPU_RestoreSR>
        OS_TRACE_Q_POST_OPT_EXIT(OS_ERR_Q_FULL);
        return (OS_ERR_Q_FULL);
30008434:	e3a0301e 	mov	r3, #30
30008438:	ea000032 	b	30008508 <OSQPostOpt+0x1e4>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00u) {         /* Do we post to the FRONT of the queue?         */
3000843c:	e55b3015 	ldrb	r3, [fp, #-21]
30008440:	e2033002 	and	r3, r3, #2
30008444:	e3530000 	cmp	r3, #0
30008448:	0a000013 	beq	3000849c <OSQPostOpt+0x178>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
3000844c:	e51b300c 	ldr	r3, [fp, #-12]
30008450:	e5932010 	ldr	r2, [r3, #16]
30008454:	e51b300c 	ldr	r3, [fp, #-12]
30008458:	e5933004 	ldr	r3, [r3, #4]
3000845c:	e1520003 	cmp	r2, r3
30008460:	1a000003 	bne	30008474 <OSQPostOpt+0x150>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
30008464:	e51b300c 	ldr	r3, [fp, #-12]
30008468:	e5932008 	ldr	r2, [r3, #8]
3000846c:	e51b300c 	ldr	r3, [fp, #-12]
30008470:	e5832010 	str	r2, [r3, #16]
        }
        pq->OSQOut--;
30008474:	e51b300c 	ldr	r3, [fp, #-12]
30008478:	e5933010 	ldr	r3, [r3, #16]
3000847c:	e2432004 	sub	r2, r3, #4
30008480:	e51b300c 	ldr	r3, [fp, #-12]
30008484:	e5832010 	str	r2, [r3, #16]
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
30008488:	e51b300c 	ldr	r3, [fp, #-12]
3000848c:	e5933010 	ldr	r3, [r3, #16]
30008490:	e51b2014 	ldr	r2, [fp, #-20]
30008494:	e5832000 	str	r2, [r3]
30008498:	ea000010 	b	300084e0 <OSQPostOpt+0x1bc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
3000849c:	e51b300c 	ldr	r3, [fp, #-12]
300084a0:	e593300c 	ldr	r3, [r3, #12]
300084a4:	e51b2014 	ldr	r2, [fp, #-20]
300084a8:	e5832000 	str	r2, [r3]
300084ac:	e2832004 	add	r2, r3, #4
300084b0:	e51b300c 	ldr	r3, [fp, #-12]
300084b4:	e583200c 	str	r2, [r3, #12]
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
300084b8:	e51b300c 	ldr	r3, [fp, #-12]
300084bc:	e593200c 	ldr	r2, [r3, #12]
300084c0:	e51b300c 	ldr	r3, [fp, #-12]
300084c4:	e5933008 	ldr	r3, [r3, #8]
300084c8:	e1520003 	cmp	r2, r3
300084cc:	1a000003 	bne	300084e0 <OSQPostOpt+0x1bc>
            pq->OSQIn = pq->OSQStart;
300084d0:	e51b300c 	ldr	r3, [fp, #-12]
300084d4:	e5932004 	ldr	r2, [r3, #4]
300084d8:	e51b300c 	ldr	r3, [fp, #-12]
300084dc:	e583200c 	str	r2, [r3, #12]
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
300084e0:	e51b300c 	ldr	r3, [fp, #-12]
300084e4:	e1d331b6 	ldrh	r3, [r3, #22]
300084e8:	e2833001 	add	r3, r3, #1
300084ec:	e1a03803 	lsl	r3, r3, #16
300084f0:	e1a02823 	lsr	r2, r3, #16
300084f4:	e51b300c 	ldr	r3, [fp, #-12]
300084f8:	e1c321b6 	strh	r2, [r3, #22]
    OS_EXIT_CRITICAL();
300084fc:	e51b0008 	ldr	r0, [fp, #-8]
30008500:	ebffdf0c 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_Q_POST_OPT_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);
30008504:	e3a03000 	mov	r3, #0
}
30008508:	e1a00003 	mov	r0, r3
3000850c:	e24bd004 	sub	sp, fp, #4
30008510:	e8bd4800 	pop	{fp, lr}
30008514:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30008518 <OSQQuery>:
*/

#if OS_Q_QUERY_EN > 0u
INT8U  OSQQuery (OS_EVENT  *pevent,
                 OS_Q_DATA *p_q_data)
{
30008518:	e92d4800 	push	{fp, lr}
3000851c:	e28db004 	add	fp, sp, #4
30008520:	e24dd020 	sub	sp, sp, #32
30008524:	e50b0020 	str	r0, [fp, #-32]
30008528:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    OS_Q       *pq;
    INT8U       i;
    OS_PRIO    *psrc;
    OS_PRIO    *pdest;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR   cpu_sr = 0u;
3000852c:	e3a03000 	mov	r3, #0
30008530:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
30008534:	e51b3020 	ldr	r3, [fp, #-32]
30008538:	e3530000 	cmp	r3, #0
3000853c:	1a000001 	bne	30008548 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
30008540:	e3a03004 	mov	r3, #4
30008544:	ea000045 	b	30008660 <OSQQuery+0x148>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
30008548:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000854c:	e3530000 	cmp	r3, #0
30008550:	1a000001 	bne	3000855c <OSQQuery+0x44>
        return (OS_ERR_PDATA_NULL);
30008554:	e3a03009 	mov	r3, #9
30008558:	ea000040 	b	30008660 <OSQQuery+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
3000855c:	e51b3020 	ldr	r3, [fp, #-32]
30008560:	e5d33000 	ldrb	r3, [r3]
30008564:	e3530002 	cmp	r3, #2
30008568:	0a000001 	beq	30008574 <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
3000856c:	e3a03001 	mov	r3, #1
30008570:	ea00003a 	b	30008660 <OSQQuery+0x148>
    }
    OS_ENTER_CRITICAL();
30008574:	ebffdee7 	bl	30000118 <OS_CPU_SaveSR>
30008578:	e1a03000 	mov	r3, r0
3000857c:	e50b3008 	str	r3, [fp, #-8]
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
30008580:	e51b3020 	ldr	r3, [fp, #-32]
30008584:	e5d3200a 	ldrb	r2, [r3, #10]
30008588:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000858c:	e5c32010 	strb	r2, [r3, #16]
    psrc                 = &pevent->OSEventTbl[0];
30008590:	e51b3020 	ldr	r3, [fp, #-32]
30008594:	e283300b 	add	r3, r3, #11
30008598:	e50b3010 	str	r3, [fp, #-16]
    pdest                = &p_q_data->OSEventTbl[0];
3000859c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
300085a0:	e2833008 	add	r3, r3, #8
300085a4:	e50b300c 	str	r3, [fp, #-12]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
300085a8:	e3a03000 	mov	r3, #0
300085ac:	e54b3011 	strb	r3, [fp, #-17]
300085b0:	ea00000c 	b	300085e8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
300085b4:	e51b3010 	ldr	r3, [fp, #-16]
300085b8:	e5d32000 	ldrb	r2, [r3]
300085bc:	e51b300c 	ldr	r3, [fp, #-12]
300085c0:	e5c32000 	strb	r2, [r3]
300085c4:	e51b300c 	ldr	r3, [fp, #-12]
300085c8:	e2833001 	add	r3, r3, #1
300085cc:	e50b300c 	str	r3, [fp, #-12]
300085d0:	e51b3010 	ldr	r3, [fp, #-16]
300085d4:	e2833001 	add	r3, r3, #1
300085d8:	e50b3010 	str	r3, [fp, #-16]
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
300085dc:	e55b3011 	ldrb	r3, [fp, #-17]
300085e0:	e2833001 	add	r3, r3, #1
300085e4:	e54b3011 	strb	r3, [fp, #-17]
300085e8:	e55b3011 	ldrb	r3, [fp, #-17]
300085ec:	e3530007 	cmp	r3, #7
300085f0:	9affffef 	bls	300085b4 <OSQQuery+0x9c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
300085f4:	e51b3020 	ldr	r3, [fp, #-32]
300085f8:	e5933004 	ldr	r3, [r3, #4]
300085fc:	e50b3018 	str	r3, [fp, #-24]
    if (pq->OSQEntries > 0u) {
30008600:	e51b3018 	ldr	r3, [fp, #-24]
30008604:	e1d331b6 	ldrh	r3, [r3, #22]
30008608:	e3530000 	cmp	r3, #0
3000860c:	0a000005 	beq	30008628 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
30008610:	e51b3018 	ldr	r3, [fp, #-24]
30008614:	e5933010 	ldr	r3, [r3, #16]
30008618:	e5932000 	ldr	r2, [r3]
3000861c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30008620:	e5832000 	str	r2, [r3]
30008624:	ea000002 	b	30008634 <OSQQuery+0x11c>
    } else {
        p_q_data->OSMsg = (void *)0;
30008628:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000862c:	e3a02000 	mov	r2, #0
30008630:	e5832000 	str	r2, [r3]
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
30008634:	e51b3018 	ldr	r3, [fp, #-24]
30008638:	e1d321b6 	ldrh	r2, [r3, #22]
3000863c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30008640:	e1c320b4 	strh	r2, [r3, #4]
    p_q_data->OSQSize = pq->OSQSize;
30008644:	e51b3018 	ldr	r3, [fp, #-24]
30008648:	e1d321b4 	ldrh	r2, [r3, #20]
3000864c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
30008650:	e1c320b6 	strh	r2, [r3, #6]
    OS_EXIT_CRITICAL();
30008654:	e51b0008 	ldr	r0, [fp, #-8]
30008658:	ebffdeb6 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_NONE);
3000865c:	e3a03000 	mov	r3, #0
}
30008660:	e1a00003 	mov	r0, r3
30008664:	e24bd004 	sub	sp, fp, #4
30008668:	e8bd4800 	pop	{fp, lr}
3000866c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30008670 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
30008670:	e92d4800 	push	{fp, lr}
30008674:	e28db004 	add	fp, sp, #4
30008678:	e24dd010 	sub	sp, sp, #16
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
3000867c:	e59f30d4 	ldr	r3, [pc, #212]	; 30008758 <OS_QInit+0xe8>
30008680:	e1a00003 	mov	r0, r3
30008684:	e3a01060 	mov	r1, #96	; 0x60
30008688:	ebffebbd 	bl	30003584 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
3000868c:	e3a03000 	mov	r3, #0
30008690:	e14b31b0 	strh	r3, [fp, #-16]
30008694:	ea00001a 	b	30008704 <OS_QInit+0x94>
        ix_next = ix + 1u;
30008698:	e15b31b0 	ldrh	r3, [fp, #-16]
3000869c:	e2833001 	add	r3, r3, #1
300086a0:	e14b30be 	strh	r3, [fp, #-14]
        pq1 = &OSQTbl[ix];
300086a4:	e15b21b0 	ldrh	r2, [fp, #-16]
300086a8:	e1a03002 	mov	r3, r2
300086ac:	e1a03083 	lsl	r3, r3, #1
300086b0:	e0833002 	add	r3, r3, r2
300086b4:	e1a03183 	lsl	r3, r3, #3
300086b8:	e1a02003 	mov	r2, r3
300086bc:	e59f3094 	ldr	r3, [pc, #148]	; 30008758 <OS_QInit+0xe8>
300086c0:	e0823003 	add	r3, r2, r3
300086c4:	e50b300c 	str	r3, [fp, #-12]
        pq2 = &OSQTbl[ix_next];
300086c8:	e15b20be 	ldrh	r2, [fp, #-14]
300086cc:	e1a03002 	mov	r3, r2
300086d0:	e1a03083 	lsl	r3, r3, #1
300086d4:	e0833002 	add	r3, r3, r2
300086d8:	e1a03183 	lsl	r3, r3, #3
300086dc:	e1a02003 	mov	r2, r3
300086e0:	e59f3070 	ldr	r3, [pc, #112]	; 30008758 <OS_QInit+0xe8>
300086e4:	e0823003 	add	r3, r2, r3
300086e8:	e50b3008 	str	r3, [fp, #-8]
        pq1->OSQPtr = pq2;
300086ec:	e51b300c 	ldr	r3, [fp, #-12]
300086f0:	e51b2008 	ldr	r2, [fp, #-8]
300086f4:	e5832000 	str	r2, [r3]
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
300086f8:	e15b31b0 	ldrh	r3, [fp, #-16]
300086fc:	e2833001 	add	r3, r3, #1
30008700:	e14b31b0 	strh	r3, [fp, #-16]
30008704:	e15b31b0 	ldrh	r3, [fp, #-16]
30008708:	e3530002 	cmp	r3, #2
3000870c:	9affffe1 	bls	30008698 <OS_QInit+0x28>
        ix_next = ix + 1u;
        pq1 = &OSQTbl[ix];
        pq2 = &OSQTbl[ix_next];
        pq1->OSQPtr = pq2;
    }
    pq1         = &OSQTbl[ix];
30008710:	e15b21b0 	ldrh	r2, [fp, #-16]
30008714:	e1a03002 	mov	r3, r2
30008718:	e1a03083 	lsl	r3, r3, #1
3000871c:	e0833002 	add	r3, r3, r2
30008720:	e1a03183 	lsl	r3, r3, #3
30008724:	e1a02003 	mov	r2, r3
30008728:	e59f3028 	ldr	r3, [pc, #40]	; 30008758 <OS_QInit+0xe8>
3000872c:	e0823003 	add	r3, r2, r3
30008730:	e50b300c 	str	r3, [fp, #-12]
    pq1->OSQPtr = (OS_Q *)0;
30008734:	e51b300c 	ldr	r3, [fp, #-12]
30008738:	e3a02000 	mov	r2, #0
3000873c:	e5832000 	str	r2, [r3]
    OSQFreeList = &OSQTbl[0];
30008740:	e59f3014 	ldr	r3, [pc, #20]	; 3000875c <OS_QInit+0xec>
30008744:	e59f200c 	ldr	r2, [pc, #12]	; 30008758 <OS_QInit+0xe8>
30008748:	e5832000 	str	r2, [r3]
#endif
}
3000874c:	e24bd004 	sub	sp, fp, #4
30008750:	e8bd4800 	pop	{fp, lr}
30008754:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30008758:	30017964 	.word	0x30017964
3000875c:	300179c8 	.word	0x300179c8

30008760 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0u
INT16U  OSSemAccept (OS_EVENT *pevent)
{
30008760:	e92d4800 	push	{fp, lr}
30008764:	e28db004 	add	fp, sp, #4
30008768:	e24dd010 	sub	sp, sp, #16
3000876c:	e50b0010 	str	r0, [fp, #-16]
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30008770:	e3a03000 	mov	r3, #0
30008774:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
30008778:	e51b3010 	ldr	r3, [fp, #-16]
3000877c:	e3530000 	cmp	r3, #0
30008780:	1a000001 	bne	3000878c <OSSemAccept+0x2c>
        return (0u);
30008784:	e3a03000 	mov	r3, #0
30008788:	ea000018 	b	300087f0 <OSSemAccept+0x90>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
3000878c:	e51b3010 	ldr	r3, [fp, #-16]
30008790:	e5d33000 	ldrb	r3, [r3]
30008794:	e3530003 	cmp	r3, #3
30008798:	0a000001 	beq	300087a4 <OSSemAccept+0x44>
        return (0u);
3000879c:	e3a03000 	mov	r3, #0
300087a0:	ea000012 	b	300087f0 <OSSemAccept+0x90>
    }
    OS_ENTER_CRITICAL();
300087a4:	ebffde5b 	bl	30000118 <OS_CPU_SaveSR>
300087a8:	e1a03000 	mov	r3, r0
300087ac:	e50b3008 	str	r3, [fp, #-8]
    cnt = pevent->OSEventCnt;
300087b0:	e51b3010 	ldr	r3, [fp, #-16]
300087b4:	e1d330b8 	ldrh	r3, [r3, #8]
300087b8:	e14b30ba 	strh	r3, [fp, #-10]
    if (cnt > 0u) {                                   /* See if resource is available                  */
300087bc:	e15b30ba 	ldrh	r3, [fp, #-10]
300087c0:	e3530000 	cmp	r3, #0
300087c4:	0a000006 	beq	300087e4 <OSSemAccept+0x84>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
300087c8:	e51b3010 	ldr	r3, [fp, #-16]
300087cc:	e1d330b8 	ldrh	r3, [r3, #8]
300087d0:	e2433001 	sub	r3, r3, #1
300087d4:	e1a03803 	lsl	r3, r3, #16
300087d8:	e1a02823 	lsr	r2, r3, #16
300087dc:	e51b3010 	ldr	r3, [fp, #-16]
300087e0:	e1c320b8 	strh	r2, [r3, #8]
    }
    OS_EXIT_CRITICAL();
300087e4:	e51b0008 	ldr	r0, [fp, #-8]
300087e8:	ebffde52 	bl	30000138 <OS_CPU_RestoreSR>
    return (cnt);                                     /* Return semaphore count                        */
300087ec:	e15b30ba 	ldrh	r3, [fp, #-10]
}
300087f0:	e1a00003 	mov	r0, r3
300087f4:	e24bd004 	sub	sp, fp, #4
300087f8:	e8bd4800 	pop	{fp, lr}
300087fc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30008800 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
30008800:	e92d4800 	push	{fp, lr}
30008804:	e28db004 	add	fp, sp, #4
30008808:	e24dd010 	sub	sp, sp, #16
3000880c:	e1a03000 	mov	r3, r0
30008810:	e14b30be 	strh	r3, [fp, #-14]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
30008814:	e3a03000 	mov	r3, #0
30008818:	e50b3008 	str	r3, [fp, #-8]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
3000881c:	e59f30b0 	ldr	r3, [pc, #176]	; 300088d4 <OSSemCreate+0xd4>
30008820:	e5d33000 	ldrb	r3, [r3]
30008824:	e3530000 	cmp	r3, #0
30008828:	0a000001 	beq	30008834 <OSSemCreate+0x34>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
3000882c:	e3a03000 	mov	r3, #0
30008830:	ea000023 	b	300088c4 <OSSemCreate+0xc4>
    }
    OS_ENTER_CRITICAL();
30008834:	ebffde37 	bl	30000118 <OS_CPU_SaveSR>
30008838:	e1a03000 	mov	r3, r0
3000883c:	e50b3008 	str	r3, [fp, #-8]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
30008840:	e59f3090 	ldr	r3, [pc, #144]	; 300088d8 <OSSemCreate+0xd8>
30008844:	e5933000 	ldr	r3, [r3]
30008848:	e50b300c 	str	r3, [fp, #-12]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
3000884c:	e59f3084 	ldr	r3, [pc, #132]	; 300088d8 <OSSemCreate+0xd8>
30008850:	e5933000 	ldr	r3, [r3]
30008854:	e3530000 	cmp	r3, #0
30008858:	0a000005 	beq	30008874 <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
3000885c:	e59f3074 	ldr	r3, [pc, #116]	; 300088d8 <OSSemCreate+0xd8>
30008860:	e5933000 	ldr	r3, [r3]
30008864:	e5933004 	ldr	r3, [r3, #4]
30008868:	e1a02003 	mov	r2, r3
3000886c:	e59f3064 	ldr	r3, [pc, #100]	; 300088d8 <OSSemCreate+0xd8>
30008870:	e5832000 	str	r2, [r3]
    }
    OS_EXIT_CRITICAL();
30008874:	e51b0008 	ldr	r0, [fp, #-8]
30008878:	ebffde2e 	bl	30000138 <OS_CPU_RestoreSR>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
3000887c:	e51b300c 	ldr	r3, [fp, #-12]
30008880:	e3530000 	cmp	r3, #0
30008884:	0a00000d 	beq	300088c0 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
30008888:	e51b300c 	ldr	r3, [fp, #-12]
3000888c:	e3a02003 	mov	r2, #3
30008890:	e5c32000 	strb	r2, [r3]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
30008894:	e51b300c 	ldr	r3, [fp, #-12]
30008898:	e15b20be 	ldrh	r2, [fp, #-14]
3000889c:	e1c320b8 	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
300088a0:	e51b300c 	ldr	r3, [fp, #-12]
300088a4:	e3a02000 	mov	r2, #0
300088a8:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
300088ac:	e51b300c 	ldr	r3, [fp, #-12]
300088b0:	e59f2024 	ldr	r2, [pc, #36]	; 300088dc <OSSemCreate+0xdc>
300088b4:	e5832014 	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
300088b8:	e51b000c 	ldr	r0, [fp, #-12]
300088bc:	ebffe9e3 	bl	30003050 <OS_EventWaitListInit>

        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
300088c0:	e51b300c 	ldr	r3, [fp, #-12]
}
300088c4:	e1a00003 	mov	r0, r3
300088c8:	e24bd004 	sub	sp, fp, #4
300088cc:	e8bd4800 	pop	{fp, lr}
300088d0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300088d4:	30017bdc 	.word	0x30017bdc
300088d8:	30017bd8 	.word	0x30017bd8
300088dc:	3000c278 	.word	0x3000c278

300088e0 <OSSemDel>:

#if OS_SEM_DEL_EN > 0u
OS_EVENT  *OSSemDel (OS_EVENT  *pevent,
                     INT8U      opt,
                     INT8U     *perr)
{
300088e0:	e92d4800 	push	{fp, lr}
300088e4:	e28db004 	add	fp, sp, #4
300088e8:	e24dd020 	sub	sp, sp, #32
300088ec:	e50b0018 	str	r0, [fp, #-24]
300088f0:	e1a03001 	mov	r3, r1
300088f4:	e50b2020 	str	r2, [fp, #-32]
300088f8:	e54b3019 	strb	r3, [fp, #-25]
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
300088fc:	e3a03000 	mov	r3, #0
30008900:	e50b3008 	str	r3, [fp, #-8]
        return ((OS_EVENT *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
30008904:	e51b3018 	ldr	r3, [fp, #-24]
30008908:	e3530000 	cmp	r3, #0
3000890c:	1a000004 	bne	30008924 <OSSemDel+0x44>
        *perr = OS_ERR_PEVENT_NULL;
30008910:	e51b3020 	ldr	r3, [fp, #-32]
30008914:	e3a02004 	mov	r2, #4
30008918:	e5c32000 	strb	r2, [r3]
        return (pevent);
3000891c:	e51b3018 	ldr	r3, [fp, #-24]
30008920:	ea000075 	b	30008afc <OSSemDel+0x21c>
    }
#endif

    OS_TRACE_SEM_DEL_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
30008924:	e51b3018 	ldr	r3, [fp, #-24]
30008928:	e5d33000 	ldrb	r3, [r3]
3000892c:	e3530003 	cmp	r3, #3
30008930:	0a000004 	beq	30008948 <OSSemDel+0x68>
        *perr = OS_ERR_EVENT_TYPE;
30008934:	e51b3020 	ldr	r3, [fp, #-32]
30008938:	e3a02001 	mov	r2, #1
3000893c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_SEM_DEL_EXIT(*perr);
        return (pevent);
30008940:	e51b3018 	ldr	r3, [fp, #-24]
30008944:	ea00006c 	b	30008afc <OSSemDel+0x21c>
    }
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
30008948:	e59f31bc 	ldr	r3, [pc, #444]	; 30008b0c <OSSemDel+0x22c>
3000894c:	e5d33000 	ldrb	r3, [r3]
30008950:	e3530000 	cmp	r3, #0
30008954:	0a000004 	beq	3000896c <OSSemDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
30008958:	e51b3020 	ldr	r3, [fp, #-32]
3000895c:	e3a0200f 	mov	r2, #15
30008960:	e5c32000 	strb	r2, [r3]
        OS_TRACE_SEM_DEL_EXIT(*perr);
        return (pevent);
30008964:	e51b3018 	ldr	r3, [fp, #-24]
30008968:	ea000063 	b	30008afc <OSSemDel+0x21c>
    }
    OS_ENTER_CRITICAL();
3000896c:	ebffdde9 	bl	30000118 <OS_CPU_SaveSR>
30008970:	e1a03000 	mov	r3, r0
30008974:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on semaphore    */
30008978:	e51b3018 	ldr	r3, [fp, #-24]
3000897c:	e5d3300a 	ldrb	r3, [r3, #10]
30008980:	e3530000 	cmp	r3, #0
30008984:	0a000002 	beq	30008994 <OSSemDel+0xb4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
30008988:	e3a03001 	mov	r3, #1
3000898c:	e54b300d 	strb	r3, [fp, #-13]
30008990:	ea000001 	b	3000899c <OSSemDel+0xbc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
30008994:	e3a03000 	mov	r3, #0
30008998:	e54b300d 	strb	r3, [fp, #-13]
    }
    switch (opt) {
3000899c:	e55b3019 	ldrb	r3, [fp, #-25]
300089a0:	e3530000 	cmp	r3, #0
300089a4:	0a000002 	beq	300089b4 <OSSemDel+0xd4>
300089a8:	e3530001 	cmp	r3, #1
300089ac:	0a000029 	beq	30008a58 <OSSemDel+0x178>
300089b0:	ea000049 	b	30008adc <OSSemDel+0x1fc>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
300089b4:	e55b300d 	ldrb	r3, [fp, #-13]
300089b8:	e3530000 	cmp	r3, #0
300089bc:	1a000017 	bne	30008a20 <OSSemDel+0x140>
#if OS_EVENT_NAME_EN > 0u
                 pevent->OSEventName    = (INT8U *)(void *)"?";
300089c0:	e51b3018 	ldr	r3, [fp, #-24]
300089c4:	e59f2144 	ldr	r2, [pc, #324]	; 30008b10 <OSSemDel+0x230>
300089c8:	e5832014 	str	r2, [r3, #20]
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
300089cc:	e51b3018 	ldr	r3, [fp, #-24]
300089d0:	e3a02000 	mov	r2, #0
300089d4:	e5c32000 	strb	r2, [r3]
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
300089d8:	e59f3134 	ldr	r3, [pc, #308]	; 30008b14 <OSSemDel+0x234>
300089dc:	e5932000 	ldr	r2, [r3]
300089e0:	e51b3018 	ldr	r3, [fp, #-24]
300089e4:	e5832004 	str	r2, [r3, #4]
                 pevent->OSEventCnt     = 0u;
300089e8:	e51b3018 	ldr	r3, [fp, #-24]
300089ec:	e3a02000 	mov	r2, #0
300089f0:	e1c320b8 	strh	r2, [r3, #8]
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
300089f4:	e59f3118 	ldr	r3, [pc, #280]	; 30008b14 <OSSemDel+0x234>
300089f8:	e51b2018 	ldr	r2, [fp, #-24]
300089fc:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
30008a00:	e51b0008 	ldr	r0, [fp, #-8]
30008a04:	ebffddcb 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                  = OS_ERR_NONE;
30008a08:	e51b3020 	ldr	r3, [fp, #-32]
30008a0c:	e3a02000 	mov	r2, #0
30008a10:	e5c32000 	strb	r2, [r3]
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
30008a14:	e3a03000 	mov	r3, #0
30008a18:	e50b300c 	str	r3, [fp, #-12]
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
30008a1c:	ea000035 	b	30008af8 <OSSemDel+0x218>
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
30008a20:	e51b0008 	ldr	r0, [fp, #-8]
30008a24:	ebffddc3 	bl	30000138 <OS_CPU_RestoreSR>
                 *perr                  = OS_ERR_TASK_WAITING;
30008a28:	e51b3020 	ldr	r3, [fp, #-32]
30008a2c:	e3a02049 	mov	r2, #73	; 0x49
30008a30:	e5c32000 	strb	r2, [r3]
                 pevent_return          = pevent;
30008a34:	e51b3018 	ldr	r3, [fp, #-24]
30008a38:	e50b300c 	str	r3, [fp, #-12]
             }
             break;
30008a3c:	ea00002d 	b	30008af8 <OSSemDel+0x218>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
30008a40:	e51b0018 	ldr	r0, [fp, #-24]
30008a44:	e3a01000 	mov	r1, #0
30008a48:	e3a02001 	mov	r2, #1
30008a4c:	e3a03002 	mov	r3, #2
30008a50:	ebffe7f6 	bl	30002a30 <OS_EventTaskRdy>
30008a54:	ea000000 	b	30008a5c <OSSemDel+0x17c>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
30008a58:	e1a00000 	nop			; (mov r0, r0)
30008a5c:	e51b3018 	ldr	r3, [fp, #-24]
30008a60:	e5d3300a 	ldrb	r3, [r3, #10]
30008a64:	e3530000 	cmp	r3, #0
30008a68:	1afffff4 	bne	30008a40 <OSSemDel+0x160>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
             }
#if OS_EVENT_NAME_EN > 0u
             pevent->OSEventName    = (INT8U *)(void *)"?";
30008a6c:	e51b3018 	ldr	r3, [fp, #-24]
30008a70:	e59f2098 	ldr	r2, [pc, #152]	; 30008b10 <OSSemDel+0x230>
30008a74:	e5832014 	str	r2, [r3, #20]
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
30008a78:	e51b3018 	ldr	r3, [fp, #-24]
30008a7c:	e3a02000 	mov	r2, #0
30008a80:	e5c32000 	strb	r2, [r3]
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
30008a84:	e59f3088 	ldr	r3, [pc, #136]	; 30008b14 <OSSemDel+0x234>
30008a88:	e5932000 	ldr	r2, [r3]
30008a8c:	e51b3018 	ldr	r3, [fp, #-24]
30008a90:	e5832004 	str	r2, [r3, #4]
             pevent->OSEventCnt     = 0u;
30008a94:	e51b3018 	ldr	r3, [fp, #-24]
30008a98:	e3a02000 	mov	r2, #0
30008a9c:	e1c320b8 	strh	r2, [r3, #8]
             OSEventFreeList        = pevent;              /* Get next free event control block        */
30008aa0:	e59f306c 	ldr	r3, [pc, #108]	; 30008b14 <OSSemDel+0x234>
30008aa4:	e51b2018 	ldr	r2, [fp, #-24]
30008aa8:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
30008aac:	e51b0008 	ldr	r0, [fp, #-8]
30008ab0:	ebffdda0 	bl	30000138 <OS_CPU_RestoreSR>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
30008ab4:	e55b300d 	ldrb	r3, [fp, #-13]
30008ab8:	e3530001 	cmp	r3, #1
30008abc:	1a000000 	bne	30008ac4 <OSSemDel+0x1e4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
30008ac0:	ebffeae0 	bl	30003648 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
30008ac4:	e51b3020 	ldr	r3, [fp, #-32]
30008ac8:	e3a02000 	mov	r2, #0
30008acc:	e5c32000 	strb	r2, [r3]
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
30008ad0:	e3a03000 	mov	r3, #0
30008ad4:	e50b300c 	str	r3, [fp, #-12]
             break;
30008ad8:	ea000006 	b	30008af8 <OSSemDel+0x218>

        default:
             OS_EXIT_CRITICAL();
30008adc:	e51b0008 	ldr	r0, [fp, #-8]
30008ae0:	ebffdd94 	bl	30000138 <OS_CPU_RestoreSR>
             *perr                  = OS_ERR_INVALID_OPT;
30008ae4:	e51b3020 	ldr	r3, [fp, #-32]
30008ae8:	e3a02007 	mov	r2, #7
30008aec:	e5c32000 	strb	r2, [r3]
             pevent_return          = pevent;
30008af0:	e51b3018 	ldr	r3, [fp, #-24]
30008af4:	e50b300c 	str	r3, [fp, #-12]
             break;
    }

    OS_TRACE_SEM_DEL_EXIT(*perr);

    return (pevent_return);
30008af8:	e51b300c 	ldr	r3, [fp, #-12]
}
30008afc:	e1a00003 	mov	r0, r3
30008b00:	e24bd004 	sub	sp, fp, #4
30008b04:	e8bd4800 	pop	{fp, lr}
30008b08:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30008b0c:	30017bdc 	.word	0x30017bdc
30008b10:	3000c278 	.word	0x3000c278
30008b14:	30017bd8 	.word	0x30017bd8

30008b18 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
30008b18:	e92d4800 	push	{fp, lr}
30008b1c:	e28db004 	add	fp, sp, #4
30008b20:	e24dd018 	sub	sp, sp, #24
30008b24:	e50b0010 	str	r0, [fp, #-16]
30008b28:	e50b1014 	str	r1, [fp, #-20]
30008b2c:	e50b2018 	str	r2, [fp, #-24]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30008b30:	e3a03000 	mov	r3, #0
30008b34:	e50b3008 	str	r3, [fp, #-8]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
30008b38:	e51b3010 	ldr	r3, [fp, #-16]
30008b3c:	e3530000 	cmp	r3, #0
30008b40:	1a000003 	bne	30008b54 <OSSemPend+0x3c>
        *perr = OS_ERR_PEVENT_NULL;
30008b44:	e51b3018 	ldr	r3, [fp, #-24]
30008b48:	e3a02004 	mov	r2, #4
30008b4c:	e5c32000 	strb	r2, [r3]
        return;
30008b50:	ea000071 	b	30008d1c <OSSemPend+0x204>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
30008b54:	e51b3010 	ldr	r3, [fp, #-16]
30008b58:	e5d33000 	ldrb	r3, [r3]
30008b5c:	e3530003 	cmp	r3, #3
30008b60:	0a000003 	beq	30008b74 <OSSemPend+0x5c>
        *perr = OS_ERR_EVENT_TYPE;
30008b64:	e51b3018 	ldr	r3, [fp, #-24]
30008b68:	e3a02001 	mov	r2, #1
30008b6c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
30008b70:	ea000069 	b	30008d1c <OSSemPend+0x204>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
30008b74:	e59f31ac 	ldr	r3, [pc, #428]	; 30008d28 <OSSemPend+0x210>
30008b78:	e5d33000 	ldrb	r3, [r3]
30008b7c:	e3530000 	cmp	r3, #0
30008b80:	0a000003 	beq	30008b94 <OSSemPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
30008b84:	e51b3018 	ldr	r3, [fp, #-24]
30008b88:	e3a02002 	mov	r2, #2
30008b8c:	e5c32000 	strb	r2, [r3]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
30008b90:	ea000061 	b	30008d1c <OSSemPend+0x204>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
30008b94:	e59f3190 	ldr	r3, [pc, #400]	; 30008d2c <OSSemPend+0x214>
30008b98:	e5d33000 	ldrb	r3, [r3]
30008b9c:	e3530000 	cmp	r3, #0
30008ba0:	0a000003 	beq	30008bb4 <OSSemPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
30008ba4:	e51b3018 	ldr	r3, [fp, #-24]
30008ba8:	e3a0200d 	mov	r2, #13
30008bac:	e5c32000 	strb	r2, [r3]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
30008bb0:	ea000059 	b	30008d1c <OSSemPend+0x204>
    }
    OS_ENTER_CRITICAL();
30008bb4:	ebffdd57 	bl	30000118 <OS_CPU_SaveSR>
30008bb8:	e1a03000 	mov	r3, r0
30008bbc:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
30008bc0:	e51b3010 	ldr	r3, [fp, #-16]
30008bc4:	e1d330b8 	ldrh	r3, [r3, #8]
30008bc8:	e3530000 	cmp	r3, #0
30008bcc:	0a00000c 	beq	30008c04 <OSSemPend+0xec>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
30008bd0:	e51b3010 	ldr	r3, [fp, #-16]
30008bd4:	e1d330b8 	ldrh	r3, [r3, #8]
30008bd8:	e2433001 	sub	r3, r3, #1
30008bdc:	e1a03803 	lsl	r3, r3, #16
30008be0:	e1a02823 	lsr	r2, r3, #16
30008be4:	e51b3010 	ldr	r3, [fp, #-16]
30008be8:	e1c320b8 	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
30008bec:	e51b0008 	ldr	r0, [fp, #-8]
30008bf0:	ebffdd50 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_NONE;
30008bf4:	e51b3018 	ldr	r3, [fp, #-24]
30008bf8:	e3a02000 	mov	r2, #0
30008bfc:	e5c32000 	strb	r2, [r3]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
30008c00:	ea000045 	b	30008d1c <OSSemPend+0x204>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
30008c04:	e59f3124 	ldr	r3, [pc, #292]	; 30008d30 <OSSemPend+0x218>
30008c08:	e5933000 	ldr	r3, [r3]
30008c0c:	e59f211c 	ldr	r2, [pc, #284]	; 30008d30 <OSSemPend+0x218>
30008c10:	e5922000 	ldr	r2, [r2]
30008c14:	e5d22038 	ldrb	r2, [r2, #56]	; 0x38
30008c18:	e3822001 	orr	r2, r2, #1
30008c1c:	e20220ff 	and	r2, r2, #255	; 0xff
30008c20:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
30008c24:	e59f3104 	ldr	r3, [pc, #260]	; 30008d30 <OSSemPend+0x218>
30008c28:	e5933000 	ldr	r3, [r3]
30008c2c:	e3a02000 	mov	r2, #0
30008c30:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
30008c34:	e59f30f4 	ldr	r3, [pc, #244]	; 30008d30 <OSSemPend+0x218>
30008c38:	e5933000 	ldr	r3, [r3]
30008c3c:	e51b2014 	ldr	r2, [fp, #-20]
30008c40:	e5832034 	str	r2, [r3, #52]	; 0x34
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
30008c44:	e51b0010 	ldr	r0, [fp, #-16]
30008c48:	ebffe7db 	bl	30002bbc <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
30008c4c:	e51b0008 	ldr	r0, [fp, #-8]
30008c50:	ebffdd38 	bl	30000138 <OS_CPU_RestoreSR>
    OS_Sched();                                       /* Find next highest priority task ready         */
30008c54:	ebffea7b 	bl	30003648 <OS_Sched>
    OS_ENTER_CRITICAL();
30008c58:	ebffdd2e 	bl	30000118 <OS_CPU_SaveSR>
30008c5c:	e1a03000 	mov	r3, r0
30008c60:	e50b3008 	str	r3, [fp, #-8]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
30008c64:	e59f30c4 	ldr	r3, [pc, #196]	; 30008d30 <OSSemPend+0x218>
30008c68:	e5933000 	ldr	r3, [r3]
30008c6c:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
30008c70:	e3530000 	cmp	r3, #0
30008c74:	0a000002 	beq	30008c84 <OSSemPend+0x16c>
30008c78:	e3530002 	cmp	r3, #2
30008c7c:	0a000004 	beq	30008c94 <OSSemPend+0x17c>
30008c80:	ea000007 	b	30008ca4 <OSSemPend+0x18c>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
30008c84:	e51b3018 	ldr	r3, [fp, #-24]
30008c88:	e3a02000 	mov	r2, #0
30008c8c:	e5c32000 	strb	r2, [r3]
             break;
30008c90:	ea00000b 	b	30008cc4 <OSSemPend+0x1ac>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
30008c94:	e51b3018 	ldr	r3, [fp, #-24]
30008c98:	e3a0200e 	mov	r2, #14
30008c9c:	e5c32000 	strb	r2, [r3]
             break;
30008ca0:	ea000007 	b	30008cc4 <OSSemPend+0x1ac>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
30008ca4:	e59f3084 	ldr	r3, [pc, #132]	; 30008d30 <OSSemPend+0x218>
30008ca8:	e5933000 	ldr	r3, [r3]
30008cac:	e1a00003 	mov	r0, r3
30008cb0:	e51b1010 	ldr	r1, [fp, #-16]
30008cb4:	ebffe871 	bl	30002e80 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
30008cb8:	e51b3018 	ldr	r3, [fp, #-24]
30008cbc:	e3a0200a 	mov	r2, #10
30008cc0:	e5c32000 	strb	r2, [r3]
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
30008cc4:	e59f3064 	ldr	r3, [pc, #100]	; 30008d30 <OSSemPend+0x218>
30008cc8:	e5933000 	ldr	r3, [r3]
30008ccc:	e3a02000 	mov	r2, #0
30008cd0:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
30008cd4:	e59f3054 	ldr	r3, [pc, #84]	; 30008d30 <OSSemPend+0x218>
30008cd8:	e5933000 	ldr	r3, [r3]
30008cdc:	e3a02000 	mov	r2, #0
30008ce0:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
30008ce4:	e59f3044 	ldr	r3, [pc, #68]	; 30008d30 <OSSemPend+0x218>
30008ce8:	e5933000 	ldr	r3, [r3]
30008cec:	e3a02000 	mov	r2, #0
30008cf0:	e583201c 	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
30008cf4:	e59f3034 	ldr	r3, [pc, #52]	; 30008d30 <OSSemPend+0x218>
30008cf8:	e5933000 	ldr	r3, [r3]
30008cfc:	e3a02000 	mov	r2, #0
30008d00:	e5832020 	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
30008d04:	e59f3024 	ldr	r3, [pc, #36]	; 30008d30 <OSSemPend+0x218>
30008d08:	e5933000 	ldr	r3, [r3]
30008d0c:	e3a02000 	mov	r2, #0
30008d10:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif
    OS_EXIT_CRITICAL();
30008d14:	e51b0008 	ldr	r0, [fp, #-8]
30008d18:	ebffdd06 	bl	30000138 <OS_CPU_RestoreSR>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
30008d1c:	e24bd004 	sub	sp, fp, #4
30008d20:	e8bd4800 	pop	{fp, lr}
30008d24:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30008d28:	30017bdc 	.word	0x30017bdc
30008d2c:	300173e8 	.word	0x300173e8
30008d30:	30017be0 	.word	0x30017be0

30008d34 <OSSemPendAbort>:

#if OS_SEM_PEND_ABORT_EN > 0u
INT8U  OSSemPendAbort (OS_EVENT  *pevent,
                       INT8U      opt,
                       INT8U     *perr)
{
30008d34:	e92d4800 	push	{fp, lr}
30008d38:	e28db004 	add	fp, sp, #4
30008d3c:	e24dd018 	sub	sp, sp, #24
30008d40:	e50b0010 	str	r0, [fp, #-16]
30008d44:	e1a03001 	mov	r3, r1
30008d48:	e50b2018 	str	r2, [fp, #-24]
30008d4c:	e54b3011 	strb	r3, [fp, #-17]
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30008d50:	e3a03000 	mov	r3, #0
30008d54:	e50b3008 	str	r3, [fp, #-8]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
30008d58:	e51b3010 	ldr	r3, [fp, #-16]
30008d5c:	e3530000 	cmp	r3, #0
30008d60:	1a000004 	bne	30008d78 <OSSemPendAbort+0x44>
        *perr = OS_ERR_PEVENT_NULL;
30008d64:	e51b3018 	ldr	r3, [fp, #-24]
30008d68:	e3a02004 	mov	r2, #4
30008d6c:	e5c32000 	strb	r2, [r3]
        return (0u);
30008d70:	e3a03000 	mov	r3, #0
30008d74:	ea00003a 	b	30008e64 <OSSemPendAbort+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
30008d78:	e51b3010 	ldr	r3, [fp, #-16]
30008d7c:	e5d33000 	ldrb	r3, [r3]
30008d80:	e3530003 	cmp	r3, #3
30008d84:	0a000004 	beq	30008d9c <OSSemPendAbort+0x68>
        *perr = OS_ERR_EVENT_TYPE;
30008d88:	e51b3018 	ldr	r3, [fp, #-24]
30008d8c:	e3a02001 	mov	r2, #1
30008d90:	e5c32000 	strb	r2, [r3]
        return (0u);
30008d94:	e3a03000 	mov	r3, #0
30008d98:	ea000031 	b	30008e64 <OSSemPendAbort+0x130>
    }
    OS_ENTER_CRITICAL();
30008d9c:	ebffdcdd 	bl	30000118 <OS_CPU_SaveSR>
30008da0:	e1a03000 	mov	r3, r0
30008da4:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting on semaphore?         */
30008da8:	e51b3010 	ldr	r3, [fp, #-16]
30008dac:	e5d3300a 	ldrb	r3, [r3, #10]
30008db0:	e3530000 	cmp	r3, #0
30008db4:	0a000024 	beq	30008e4c <OSSemPendAbort+0x118>
        nbr_tasks = 0u;
30008db8:	e3a03000 	mov	r3, #0
30008dbc:	e54b3009 	strb	r3, [fp, #-9]
        switch (opt) {
30008dc0:	e55b3011 	ldrb	r3, [fp, #-17]
30008dc4:	e3530001 	cmp	r3, #1
30008dc8:	0a000009 	beq	30008df4 <OSSemPendAbort+0xc0>
30008dcc:	ea00000e 	b	30008e0c <OSSemPendAbort+0xd8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
30008dd0:	e51b0010 	ldr	r0, [fp, #-16]
30008dd4:	e3a01000 	mov	r1, #0
30008dd8:	e3a02001 	mov	r2, #1
30008ddc:	e3a03002 	mov	r3, #2
30008de0:	ebffe712 	bl	30002a30 <OS_EventTaskRdy>
                     nbr_tasks++;
30008de4:	e55b3009 	ldrb	r3, [fp, #-9]
30008de8:	e2833001 	add	r3, r3, #1
30008dec:	e54b3009 	strb	r3, [fp, #-9]
30008df0:	ea000000 	b	30008df8 <OSSemPendAbort+0xc4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting on semaphore?         */
        nbr_tasks = 0u;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
30008df4:	e1a00000 	nop			; (mov r0, r0)
30008df8:	e51b3010 	ldr	r3, [fp, #-16]
30008dfc:	e5d3300a 	ldrb	r3, [r3, #10]
30008e00:	e3530000 	cmp	r3, #0
30008e04:	1afffff1 	bne	30008dd0 <OSSemPendAbort+0x9c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
30008e08:	ea000007 	b	30008e2c <OSSemPendAbort+0xf8>

            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
30008e0c:	e51b0010 	ldr	r0, [fp, #-16]
30008e10:	e3a01000 	mov	r1, #0
30008e14:	e3a02001 	mov	r2, #1
30008e18:	e3a03002 	mov	r3, #2
30008e1c:	ebffe703 	bl	30002a30 <OS_EventTaskRdy>
                 nbr_tasks++;
30008e20:	e55b3009 	ldrb	r3, [fp, #-9]
30008e24:	e2833001 	add	r3, r3, #1
30008e28:	e54b3009 	strb	r3, [fp, #-9]
                 break;
        }
        OS_EXIT_CRITICAL();
30008e2c:	e51b0008 	ldr	r0, [fp, #-8]
30008e30:	ebffdcc0 	bl	30000138 <OS_CPU_RestoreSR>
        OS_Sched();                                   /* Find HPT ready to run                         */
30008e34:	ebffea03 	bl	30003648 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
30008e38:	e51b3018 	ldr	r3, [fp, #-24]
30008e3c:	e3a0200e 	mov	r2, #14
30008e40:	e5c32000 	strb	r2, [r3]
        return (nbr_tasks);
30008e44:	e55b3009 	ldrb	r3, [fp, #-9]
30008e48:	ea000005 	b	30008e64 <OSSemPendAbort+0x130>
    }
    OS_EXIT_CRITICAL();
30008e4c:	e51b0008 	ldr	r0, [fp, #-8]
30008e50:	ebffdcb8 	bl	30000138 <OS_CPU_RestoreSR>
    *perr = OS_ERR_NONE;
30008e54:	e51b3018 	ldr	r3, [fp, #-24]
30008e58:	e3a02000 	mov	r2, #0
30008e5c:	e5c32000 	strb	r2, [r3]
    return (0u);                                      /* No tasks waiting on semaphore                 */
30008e60:	e3a03000 	mov	r3, #0
}
30008e64:	e1a00003 	mov	r0, r3
30008e68:	e24bd004 	sub	sp, fp, #4
30008e6c:	e8bd4800 	pop	{fp, lr}
30008e70:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30008e74 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
30008e74:	e92d4800 	push	{fp, lr}
30008e78:	e28db004 	add	fp, sp, #4
30008e7c:	e24dd010 	sub	sp, sp, #16
30008e80:	e50b0010 	str	r0, [fp, #-16]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30008e84:	e3a03000 	mov	r3, #0
30008e88:	e50b3008 	str	r3, [fp, #-8]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
30008e8c:	e51b3010 	ldr	r3, [fp, #-16]
30008e90:	e3530000 	cmp	r3, #0
30008e94:	1a000001 	bne	30008ea0 <OSSemPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
30008e98:	e3a03004 	mov	r3, #4
30008e9c:	ea000029 	b	30008f48 <OSSemPost+0xd4>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
30008ea0:	e51b3010 	ldr	r3, [fp, #-16]
30008ea4:	e5d33000 	ldrb	r3, [r3]
30008ea8:	e3530003 	cmp	r3, #3
30008eac:	0a000001 	beq	30008eb8 <OSSemPost+0x44>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
30008eb0:	e3a03001 	mov	r3, #1
30008eb4:	ea000023 	b	30008f48 <OSSemPost+0xd4>
    }
    OS_ENTER_CRITICAL();
30008eb8:	ebffdc96 	bl	30000118 <OS_CPU_SaveSR>
30008ebc:	e1a03000 	mov	r3, r0
30008ec0:	e50b3008 	str	r3, [fp, #-8]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
30008ec4:	e51b3010 	ldr	r3, [fp, #-16]
30008ec8:	e5d3300a 	ldrb	r3, [r3, #10]
30008ecc:	e3530000 	cmp	r3, #0
30008ed0:	0a000009 	beq	30008efc <OSSemPost+0x88>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
30008ed4:	e51b0010 	ldr	r0, [fp, #-16]
30008ed8:	e3a01000 	mov	r1, #0
30008edc:	e3a02001 	mov	r2, #1
30008ee0:	e3a03000 	mov	r3, #0
30008ee4:	ebffe6d1 	bl	30002a30 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
30008ee8:	e51b0008 	ldr	r0, [fp, #-8]
30008eec:	ebffdc91 	bl	30000138 <OS_CPU_RestoreSR>
        OS_Sched();                                   /* Find HPT ready to run                         */
30008ef0:	ebffe9d4 	bl	30003648 <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
30008ef4:	e3a03000 	mov	r3, #0
30008ef8:	ea000012 	b	30008f48 <OSSemPost+0xd4>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
30008efc:	e51b3010 	ldr	r3, [fp, #-16]
30008f00:	e1d320b8 	ldrh	r2, [r3, #8]
30008f04:	e59f304c 	ldr	r3, [pc, #76]	; 30008f58 <OSSemPost+0xe4>
30008f08:	e1520003 	cmp	r2, r3
30008f0c:	0a00000a 	beq	30008f3c <OSSemPost+0xc8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
30008f10:	e51b3010 	ldr	r3, [fp, #-16]
30008f14:	e1d330b8 	ldrh	r3, [r3, #8]
30008f18:	e2833001 	add	r3, r3, #1
30008f1c:	e1a03803 	lsl	r3, r3, #16
30008f20:	e1a02823 	lsr	r2, r3, #16
30008f24:	e51b3010 	ldr	r3, [fp, #-16]
30008f28:	e1c320b8 	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
30008f2c:	e51b0008 	ldr	r0, [fp, #-8]
30008f30:	ebffdc80 	bl	30000138 <OS_CPU_RestoreSR>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
30008f34:	e3a03000 	mov	r3, #0
30008f38:	ea000002 	b	30008f48 <OSSemPost+0xd4>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
30008f3c:	e51b0008 	ldr	r0, [fp, #-8]
30008f40:	ebffdc7c 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
30008f44:	e3a03033 	mov	r3, #51	; 0x33
}
30008f48:	e1a00003 	mov	r0, r3
30008f4c:	e24bd004 	sub	sp, fp, #4
30008f50:	e8bd4800 	pop	{fp, lr}
30008f54:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30008f58:	0000ffff 	.word	0x0000ffff

30008f5c <OSSemQuery>:
*/

#if OS_SEM_QUERY_EN > 0u
INT8U  OSSemQuery (OS_EVENT     *pevent,
                   OS_SEM_DATA  *p_sem_data)
{
30008f5c:	e92d4800 	push	{fp, lr}
30008f60:	e28db004 	add	fp, sp, #4
30008f64:	e24dd018 	sub	sp, sp, #24
30008f68:	e50b0018 	str	r0, [fp, #-24]
30008f6c:	e50b101c 	str	r1, [fp, #-28]
    INT8U       i;
    OS_PRIO    *psrc;
    OS_PRIO    *pdest;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR   cpu_sr = 0u;
30008f70:	e3a03000 	mov	r3, #0
30008f74:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
30008f78:	e51b3018 	ldr	r3, [fp, #-24]
30008f7c:	e3530000 	cmp	r3, #0
30008f80:	1a000001 	bne	30008f8c <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
30008f84:	e3a03004 	mov	r3, #4
30008f88:	ea000031 	b	30009054 <OSSemQuery+0xf8>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
30008f8c:	e51b301c 	ldr	r3, [fp, #-28]
30008f90:	e3530000 	cmp	r3, #0
30008f94:	1a000001 	bne	30008fa0 <OSSemQuery+0x44>
        return (OS_ERR_PDATA_NULL);
30008f98:	e3a03009 	mov	r3, #9
30008f9c:	ea00002c 	b	30009054 <OSSemQuery+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
30008fa0:	e51b3018 	ldr	r3, [fp, #-24]
30008fa4:	e5d33000 	ldrb	r3, [r3]
30008fa8:	e3530003 	cmp	r3, #3
30008fac:	0a000001 	beq	30008fb8 <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
30008fb0:	e3a03001 	mov	r3, #1
30008fb4:	ea000026 	b	30009054 <OSSemQuery+0xf8>
    }
    OS_ENTER_CRITICAL();
30008fb8:	ebffdc56 	bl	30000118 <OS_CPU_SaveSR>
30008fbc:	e1a03000 	mov	r3, r0
30008fc0:	e50b3008 	str	r3, [fp, #-8]
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
30008fc4:	e51b3018 	ldr	r3, [fp, #-24]
30008fc8:	e5d3200a 	ldrb	r2, [r3, #10]
30008fcc:	e51b301c 	ldr	r3, [fp, #-28]
30008fd0:	e5c3200a 	strb	r2, [r3, #10]
    psrc                   = &pevent->OSEventTbl[0];
30008fd4:	e51b3018 	ldr	r3, [fp, #-24]
30008fd8:	e283300b 	add	r3, r3, #11
30008fdc:	e50b3010 	str	r3, [fp, #-16]
    pdest                  = &p_sem_data->OSEventTbl[0];
30008fe0:	e51b301c 	ldr	r3, [fp, #-28]
30008fe4:	e2833002 	add	r3, r3, #2
30008fe8:	e50b300c 	str	r3, [fp, #-12]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
30008fec:	e3a03000 	mov	r3, #0
30008ff0:	e54b3011 	strb	r3, [fp, #-17]
30008ff4:	ea00000c 	b	3000902c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
30008ff8:	e51b3010 	ldr	r3, [fp, #-16]
30008ffc:	e5d32000 	ldrb	r2, [r3]
30009000:	e51b300c 	ldr	r3, [fp, #-12]
30009004:	e5c32000 	strb	r2, [r3]
30009008:	e51b300c 	ldr	r3, [fp, #-12]
3000900c:	e2833001 	add	r3, r3, #1
30009010:	e50b300c 	str	r3, [fp, #-12]
30009014:	e51b3010 	ldr	r3, [fp, #-16]
30009018:	e2833001 	add	r3, r3, #1
3000901c:	e50b3010 	str	r3, [fp, #-16]
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
30009020:	e55b3011 	ldrb	r3, [fp, #-17]
30009024:	e2833001 	add	r3, r3, #1
30009028:	e54b3011 	strb	r3, [fp, #-17]
3000902c:	e55b3011 	ldrb	r3, [fp, #-17]
30009030:	e3530007 	cmp	r3, #7
30009034:	9affffef 	bls	30008ff8 <OSSemQuery+0x9c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
30009038:	e51b3018 	ldr	r3, [fp, #-24]
3000903c:	e1d320b8 	ldrh	r2, [r3, #8]
30009040:	e51b301c 	ldr	r3, [fp, #-28]
30009044:	e1c320b0 	strh	r2, [r3]
    OS_EXIT_CRITICAL();
30009048:	e51b0008 	ldr	r0, [fp, #-8]
3000904c:	ebffdc39 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_NONE);
30009050:	e3a03000 	mov	r3, #0
}
30009054:	e1a00003 	mov	r0, r3
30009058:	e24bd004 	sub	sp, fp, #4
3000905c:	e8bd4800 	pop	{fp, lr}
30009060:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

30009064 <OSSemSet>:

#if OS_SEM_SET_EN > 0u
void  OSSemSet (OS_EVENT  *pevent,
                INT16U     cnt,
                INT8U     *perr)
{
30009064:	e92d4800 	push	{fp, lr}
30009068:	e28db004 	add	fp, sp, #4
3000906c:	e24dd018 	sub	sp, sp, #24
30009070:	e50b0010 	str	r0, [fp, #-16]
30009074:	e1a03001 	mov	r3, r1
30009078:	e50b2018 	str	r2, [fp, #-24]
3000907c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
30009080:	e3a03000 	mov	r3, #0
30009084:	e50b3008 	str	r3, [fp, #-8]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
30009088:	e51b3010 	ldr	r3, [fp, #-16]
3000908c:	e3530000 	cmp	r3, #0
30009090:	1a000003 	bne	300090a4 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
30009094:	e51b3018 	ldr	r3, [fp, #-24]
30009098:	e3a02004 	mov	r2, #4
3000909c:	e5c32000 	strb	r2, [r3]
        return;
300090a0:	ea000022 	b	30009130 <OSSemSet+0xcc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
300090a4:	e51b3010 	ldr	r3, [fp, #-16]
300090a8:	e5d33000 	ldrb	r3, [r3]
300090ac:	e3530003 	cmp	r3, #3
300090b0:	0a000003 	beq	300090c4 <OSSemSet+0x60>
        *perr = OS_ERR_EVENT_TYPE;
300090b4:	e51b3018 	ldr	r3, [fp, #-24]
300090b8:	e3a02001 	mov	r2, #1
300090bc:	e5c32000 	strb	r2, [r3]
        return;
300090c0:	ea00001a 	b	30009130 <OSSemSet+0xcc>
    }
    OS_ENTER_CRITICAL();
300090c4:	ebffdc13 	bl	30000118 <OS_CPU_SaveSR>
300090c8:	e1a03000 	mov	r3, r0
300090cc:	e50b3008 	str	r3, [fp, #-8]
    *perr = OS_ERR_NONE;
300090d0:	e51b3018 	ldr	r3, [fp, #-24]
300090d4:	e3a02000 	mov	r2, #0
300090d8:	e5c32000 	strb	r2, [r3]
    if (pevent->OSEventCnt > 0u) {                    /* See if semaphore already has a count          */
300090dc:	e51b3010 	ldr	r3, [fp, #-16]
300090e0:	e1d330b8 	ldrh	r3, [r3, #8]
300090e4:	e3530000 	cmp	r3, #0
300090e8:	0a000003 	beq	300090fc <OSSemSet+0x98>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
300090ec:	e51b3010 	ldr	r3, [fp, #-16]
300090f0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
300090f4:	e1c320b8 	strh	r2, [r3, #8]
300090f8:	ea00000a 	b	30009128 <OSSemSet+0xc4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0u) {               /*      See if task(s) waiting?                  */
300090fc:	e51b3010 	ldr	r3, [fp, #-16]
30009100:	e5d3300a 	ldrb	r3, [r3, #10]
30009104:	e3530000 	cmp	r3, #0
30009108:	1a000003 	bne	3000911c <OSSemSet+0xb8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
3000910c:	e51b3010 	ldr	r3, [fp, #-16]
30009110:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
30009114:	e1c320b8 	strh	r2, [r3, #8]
30009118:	ea000002 	b	30009128 <OSSemSet+0xc4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
3000911c:	e51b3018 	ldr	r3, [fp, #-24]
30009120:	e3a02049 	mov	r2, #73	; 0x49
30009124:	e5c32000 	strb	r2, [r3]
        }
    }
    OS_EXIT_CRITICAL();
30009128:	e51b0008 	ldr	r0, [fp, #-8]
3000912c:	ebffdc01 	bl	30000138 <OS_CPU_RestoreSR>
}
30009130:	e24bd004 	sub	sp, fp, #4
30009134:	e8bd4800 	pop	{fp, lr}
30009138:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

3000913c <OSTaskChangePrio>:
*/

#if OS_TASK_CHANGE_PRIO_EN > 0u
INT8U  OSTaskChangePrio (INT8U  oldprio,
                         INT8U  newprio)
{
3000913c:	e92d4800 	push	{fp, lr}
30009140:	e28db004 	add	fp, sp, #4
30009144:	e24dd020 	sub	sp, sp, #32
30009148:	e1a02000 	mov	r2, r0
3000914c:	e1a03001 	mov	r3, r1
30009150:	e54b201d 	strb	r2, [fp, #-29]
30009154:	e54b301e 	strb	r3, [fp, #-30]
    OS_PRIO    bity_new;
    OS_PRIO    bitx_new;
    OS_PRIO    bity_old;
    OS_PRIO    bitx_old;
#if OS_CRITICAL_METHOD == 3u
    OS_CPU_SR  cpu_sr = 0u;                                 /* Storage for CPU status register         */
30009158:	e3a03000 	mov	r3, #0
3000915c:	e50b3008 	str	r3, [fp, #-8]
#endif


#if OS_ARG_CHK_EN > 0u
    if (oldprio >= OS_LOWEST_PRIO) {
30009160:	e55b301d 	ldrb	r3, [fp, #-29]
30009164:	e353003e 	cmp	r3, #62	; 0x3e
30009168:	9a000004 	bls	30009180 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
3000916c:	e55b301d 	ldrb	r3, [fp, #-29]
30009170:	e35300ff 	cmp	r3, #255	; 0xff
30009174:	0a000001 	beq	30009180 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
30009178:	e3a0302a 	mov	r3, #42	; 0x2a
3000917c:	ea00011a 	b	300095ec <OSTaskChangePrio+0x4b0>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
30009180:	e55b301e 	ldrb	r3, [fp, #-30]
30009184:	e353003e 	cmp	r3, #62	; 0x3e
30009188:	9a000001 	bls	30009194 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
3000918c:	e3a0302a 	mov	r3, #42	; 0x2a
30009190:	ea000115 	b	300095ec <OSTaskChangePrio+0x4b0>
    }
#endif
    OS_ENTER_CRITICAL();
30009194:	ebffdbdf 	bl	30000118 <OS_CPU_SaveSR>
30009198:	e1a03000 	mov	r3, r0
3000919c:	e50b3008 	str	r3, [fp, #-8]
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
300091a0:	e55b201e 	ldrb	r2, [fp, #-30]
300091a4:	e59f3450 	ldr	r3, [pc, #1104]	; 300095fc <OSTaskChangePrio+0x4c0>
300091a8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
300091ac:	e3530000 	cmp	r3, #0
300091b0:	0a000003 	beq	300091c4 <OSTaskChangePrio+0x88>
        OS_EXIT_CRITICAL();
300091b4:	e51b0008 	ldr	r0, [fp, #-8]
300091b8:	ebffdbde 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_PRIO_EXIST);
300091bc:	e3a03028 	mov	r3, #40	; 0x28
300091c0:	ea000109 	b	300095ec <OSTaskChangePrio+0x4b0>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
300091c4:	e55b301d 	ldrb	r3, [fp, #-29]
300091c8:	e35300ff 	cmp	r3, #255	; 0xff
300091cc:	1a000003 	bne	300091e0 <OSTaskChangePrio+0xa4>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
300091d0:	e59f3428 	ldr	r3, [pc, #1064]	; 30009600 <OSTaskChangePrio+0x4c4>
300091d4:	e5933000 	ldr	r3, [r3]
300091d8:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
300091dc:	e54b301d 	strb	r3, [fp, #-29]
    }
    ptcb = OSTCBPrioTbl[oldprio];
300091e0:	e55b201d 	ldrb	r2, [fp, #-29]
300091e4:	e59f3410 	ldr	r3, [pc, #1040]	; 300095fc <OSTaskChangePrio+0x4c0>
300091e8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
300091ec:	e50b3014 	str	r3, [fp, #-20]
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
300091f0:	e51b3014 	ldr	r3, [fp, #-20]
300091f4:	e3530000 	cmp	r3, #0
300091f8:	1a000003 	bne	3000920c <OSTaskChangePrio+0xd0>
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
300091fc:	e51b0008 	ldr	r0, [fp, #-8]
30009200:	ebffdbcc 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_PRIO);
30009204:	e3a03029 	mov	r3, #41	; 0x29
30009208:	ea0000f7 	b	300095ec <OSTaskChangePrio+0x4b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
3000920c:	e51b3014 	ldr	r3, [fp, #-20]
30009210:	e3530001 	cmp	r3, #1
30009214:	1a000003 	bne	30009228 <OSTaskChangePrio+0xec>
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
30009218:	e51b0008 	ldr	r0, [fp, #-8]
3000921c:	ebffdbc5 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);
30009220:	e3a03043 	mov	r3, #67	; 0x43
30009224:	ea0000f0 	b	300095ec <OSTaskChangePrio+0x4b0>
    }
#if OS_LOWEST_PRIO <= 63u
    y_new                 = (INT8U)(newprio >> 3u);         /* Yes, compute new TCB fields             */
30009228:	e55b301e 	ldrb	r3, [fp, #-30]
3000922c:	e1a031a3 	lsr	r3, r3, #3
30009230:	e54b300f 	strb	r3, [fp, #-15]
    x_new                 = (INT8U)(newprio & 0x07u);
30009234:	e55b301e 	ldrb	r3, [fp, #-30]
30009238:	e2033007 	and	r3, r3, #7
3000923c:	e54b300e 	strb	r3, [fp, #-14]
#else
    y_new                 = (INT8U)((INT8U)(newprio >> 4u) & 0x0Fu);
    x_new                 = (INT8U)(newprio & 0x0Fu);
#endif
    bity_new              = (OS_PRIO)(1uL << y_new);
30009240:	e55b300f 	ldrb	r3, [fp, #-15]
30009244:	e3a02001 	mov	r2, #1
30009248:	e1a03312 	lsl	r3, r2, r3
3000924c:	e54b300c 	strb	r3, [fp, #-12]
    bitx_new              = (OS_PRIO)(1uL << x_new);
30009250:	e55b300e 	ldrb	r3, [fp, #-14]
30009254:	e3a02001 	mov	r2, #1
30009258:	e1a03312 	lsl	r3, r2, r3
3000925c:	e54b300b 	strb	r3, [fp, #-11]

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
30009260:	e55b201d 	ldrb	r2, [fp, #-29]
30009264:	e59f3390 	ldr	r3, [pc, #912]	; 300095fc <OSTaskChangePrio+0x4c0>
30009268:	e3a01000 	mov	r1, #0
3000926c:	e7831102 	str	r1, [r3, r2, lsl #2]
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
30009270:	e55b201e 	ldrb	r2, [fp, #-30]
30009274:	e59f3380 	ldr	r3, [pc, #896]	; 300095fc <OSTaskChangePrio+0x4c0>
30009278:	e51b1014 	ldr	r1, [fp, #-20]
3000927c:	e7831102 	str	r1, [r3, r2, lsl #2]
    y_old                 =  ptcb->OSTCBY;
30009280:	e51b3014 	ldr	r3, [fp, #-20]
30009284:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30009288:	e54b300d 	strb	r3, [fp, #-13]
    bity_old              =  ptcb->OSTCBBitY;
3000928c:	e51b3014 	ldr	r3, [fp, #-20]
30009290:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30009294:	e54b300a 	strb	r3, [fp, #-10]
    bitx_old              =  ptcb->OSTCBBitX;
30009298:	e51b3014 	ldr	r3, [fp, #-20]
3000929c:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
300092a0:	e54b3009 	strb	r3, [fp, #-9]
    if ((OSRdyTbl[y_old] &   bitx_old) != 0u) {             /* If task is ready make it not            */
300092a4:	e55b300d 	ldrb	r3, [fp, #-13]
300092a8:	e59f2354 	ldr	r2, [pc, #852]	; 30009604 <OSTaskChangePrio+0x4c8>
300092ac:	e7d22003 	ldrb	r2, [r2, r3]
300092b0:	e55b3009 	ldrb	r3, [fp, #-9]
300092b4:	e0023003 	and	r3, r2, r3
300092b8:	e20330ff 	and	r3, r3, #255	; 0xff
300092bc:	e3530000 	cmp	r3, #0
300092c0:	0a000028 	beq	30009368 <OSTaskChangePrio+0x22c>
         OSRdyTbl[y_old] &= (OS_PRIO)~bitx_old;
300092c4:	e55b300d 	ldrb	r3, [fp, #-13]
300092c8:	e55b200d 	ldrb	r2, [fp, #-13]
300092cc:	e59f1330 	ldr	r1, [pc, #816]	; 30009604 <OSTaskChangePrio+0x4c8>
300092d0:	e7d11002 	ldrb	r1, [r1, r2]
300092d4:	e55b2009 	ldrb	r2, [fp, #-9]
300092d8:	e1e02002 	mvn	r2, r2
300092dc:	e20220ff 	and	r2, r2, #255	; 0xff
300092e0:	e0012002 	and	r2, r1, r2
300092e4:	e20210ff 	and	r1, r2, #255	; 0xff
300092e8:	e59f2314 	ldr	r2, [pc, #788]	; 30009604 <OSTaskChangePrio+0x4c8>
300092ec:	e7c21003 	strb	r1, [r2, r3]
         if (OSRdyTbl[y_old] == 0u) {
300092f0:	e55b300d 	ldrb	r3, [fp, #-13]
300092f4:	e59f2308 	ldr	r2, [pc, #776]	; 30009604 <OSTaskChangePrio+0x4c8>
300092f8:	e7d23003 	ldrb	r3, [r2, r3]
300092fc:	e3530000 	cmp	r3, #0
30009300:	1a000008 	bne	30009328 <OSTaskChangePrio+0x1ec>
             OSRdyGrp &= (OS_PRIO)~bity_old;
30009304:	e55b300a 	ldrb	r3, [fp, #-10]
30009308:	e1e03003 	mvn	r3, r3
3000930c:	e20320ff 	and	r2, r3, #255	; 0xff
30009310:	e59f32f0 	ldr	r3, [pc, #752]	; 30009608 <OSTaskChangePrio+0x4cc>
30009314:	e5d33000 	ldrb	r3, [r3]
30009318:	e0023003 	and	r3, r2, r3
3000931c:	e20320ff 	and	r2, r3, #255	; 0xff
30009320:	e59f32e0 	ldr	r3, [pc, #736]	; 30009608 <OSTaskChangePrio+0x4cc>
30009324:	e5c32000 	strb	r2, [r3]
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
30009328:	e59f32d8 	ldr	r3, [pc, #728]	; 30009608 <OSTaskChangePrio+0x4cc>
3000932c:	e5d32000 	ldrb	r2, [r3]
30009330:	e55b300c 	ldrb	r3, [fp, #-12]
30009334:	e1823003 	orr	r3, r2, r3
30009338:	e20320ff 	and	r2, r3, #255	; 0xff
3000933c:	e59f32c4 	ldr	r3, [pc, #708]	; 30009608 <OSTaskChangePrio+0x4cc>
30009340:	e5c32000 	strb	r2, [r3]
         OSRdyTbl[y_new] |= bitx_new;
30009344:	e55b300f 	ldrb	r3, [fp, #-15]
30009348:	e55b200f 	ldrb	r2, [fp, #-15]
3000934c:	e59f12b0 	ldr	r1, [pc, #688]	; 30009604 <OSTaskChangePrio+0x4c8>
30009350:	e7d11002 	ldrb	r1, [r1, r2]
30009354:	e55b200b 	ldrb	r2, [fp, #-11]
30009358:	e1812002 	orr	r2, r1, r2
3000935c:	e20210ff 	and	r1, r2, #255	; 0xff
30009360:	e59f229c 	ldr	r2, [pc, #668]	; 30009604 <OSTaskChangePrio+0x4c8>
30009364:	e7c21003 	strb	r1, [r2, r3]
         OS_TRACE_TASK_READY(ptcb);
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
30009368:	e51b3014 	ldr	r3, [fp, #-20]
3000936c:	e593301c 	ldr	r3, [r3, #28]
30009370:	e50b301c 	str	r3, [fp, #-28]
    if (pevent != (OS_EVENT *)0) {
30009374:	e51b301c 	ldr	r3, [fp, #-28]
30009378:	e3530000 	cmp	r3, #0
3000937c:	0a000037 	beq	30009460 <OSTaskChangePrio+0x324>
        pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;    /* Remove old task prio from wait list     */
30009380:	e55b100d 	ldrb	r1, [fp, #-13]
30009384:	e55b200d 	ldrb	r2, [fp, #-13]
30009388:	e51b001c 	ldr	r0, [fp, #-28]
3000938c:	e3a03008 	mov	r3, #8
30009390:	e0802002 	add	r2, r0, r2
30009394:	e0823003 	add	r3, r2, r3
30009398:	e5d32003 	ldrb	r2, [r3, #3]
3000939c:	e55b3009 	ldrb	r3, [fp, #-9]
300093a0:	e1e03003 	mvn	r3, r3
300093a4:	e20330ff 	and	r3, r3, #255	; 0xff
300093a8:	e0023003 	and	r3, r2, r3
300093ac:	e20320ff 	and	r2, r3, #255	; 0xff
300093b0:	e51b001c 	ldr	r0, [fp, #-28]
300093b4:	e3a03008 	mov	r3, #8
300093b8:	e0801001 	add	r1, r0, r1
300093bc:	e0813003 	add	r3, r1, r3
300093c0:	e5c32003 	strb	r2, [r3, #3]
        if (pevent->OSEventTbl[y_old] == 0u) {
300093c4:	e55b200d 	ldrb	r2, [fp, #-13]
300093c8:	e51b101c 	ldr	r1, [fp, #-28]
300093cc:	e3a03008 	mov	r3, #8
300093d0:	e0812002 	add	r2, r1, r2
300093d4:	e0823003 	add	r3, r2, r3
300093d8:	e5d33003 	ldrb	r3, [r3, #3]
300093dc:	e3530000 	cmp	r3, #0
300093e0:	1a000008 	bne	30009408 <OSTaskChangePrio+0x2cc>
            pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
300093e4:	e51b301c 	ldr	r3, [fp, #-28]
300093e8:	e5d3200a 	ldrb	r2, [r3, #10]
300093ec:	e55b300a 	ldrb	r3, [fp, #-10]
300093f0:	e1e03003 	mvn	r3, r3
300093f4:	e20330ff 	and	r3, r3, #255	; 0xff
300093f8:	e0023003 	and	r3, r2, r3
300093fc:	e20320ff 	and	r2, r3, #255	; 0xff
30009400:	e51b301c 	ldr	r3, [fp, #-28]
30009404:	e5c3200a 	strb	r2, [r3, #10]
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
30009408:	e51b301c 	ldr	r3, [fp, #-28]
3000940c:	e5d3200a 	ldrb	r2, [r3, #10]
30009410:	e55b300c 	ldrb	r3, [fp, #-12]
30009414:	e1823003 	orr	r3, r2, r3
30009418:	e20320ff 	and	r2, r3, #255	; 0xff
3000941c:	e51b301c 	ldr	r3, [fp, #-28]
30009420:	e5c3200a 	strb	r2, [r3, #10]
        pevent->OSEventTbl[y_new] |= bitx_new;
30009424:	e55b100f 	ldrb	r1, [fp, #-15]
30009428:	e55b200f 	ldrb	r2, [fp, #-15]
3000942c:	e51b001c 	ldr	r0, [fp, #-28]
30009430:	e3a03008 	mov	r3, #8
30009434:	e0802002 	add	r2, r0, r2
30009438:	e0823003 	add	r3, r2, r3
3000943c:	e5d32003 	ldrb	r2, [r3, #3]
30009440:	e55b300b 	ldrb	r3, [fp, #-11]
30009444:	e1823003 	orr	r3, r2, r3
30009448:	e20320ff 	and	r2, r3, #255	; 0xff
3000944c:	e51b001c 	ldr	r0, [fp, #-28]
30009450:	e3a03008 	mov	r3, #8
30009454:	e0801001 	add	r1, r0, r1
30009458:	e0813003 	add	r3, r1, r3
3000945c:	e5c32003 	strb	r2, [r3, #3]
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
30009460:	e51b3014 	ldr	r3, [fp, #-20]
30009464:	e5933020 	ldr	r3, [r3, #32]
30009468:	e3530000 	cmp	r3, #0
3000946c:	0a000047 	beq	30009590 <OSTaskChangePrio+0x454>
        pevents =  ptcb->OSTCBEventMultiPtr;
30009470:	e51b3014 	ldr	r3, [fp, #-20]
30009474:	e5933020 	ldr	r3, [r3, #32]
30009478:	e50b3018 	str	r3, [fp, #-24]
        pevent  = *pevents;
3000947c:	e51b3018 	ldr	r3, [fp, #-24]
30009480:	e5933000 	ldr	r3, [r3]
30009484:	e50b301c 	str	r3, [fp, #-28]
        while (pevent != (OS_EVENT *)0) {
30009488:	ea00003d 	b	30009584 <OSTaskChangePrio+0x448>
            pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;   /* Remove old task prio from wait lists */
3000948c:	e55b100d 	ldrb	r1, [fp, #-13]
30009490:	e55b200d 	ldrb	r2, [fp, #-13]
30009494:	e51b001c 	ldr	r0, [fp, #-28]
30009498:	e3a03008 	mov	r3, #8
3000949c:	e0802002 	add	r2, r0, r2
300094a0:	e0823003 	add	r3, r2, r3
300094a4:	e5d32003 	ldrb	r2, [r3, #3]
300094a8:	e55b3009 	ldrb	r3, [fp, #-9]
300094ac:	e1e03003 	mvn	r3, r3
300094b0:	e20330ff 	and	r3, r3, #255	; 0xff
300094b4:	e0023003 	and	r3, r2, r3
300094b8:	e20320ff 	and	r2, r3, #255	; 0xff
300094bc:	e51b001c 	ldr	r0, [fp, #-28]
300094c0:	e3a03008 	mov	r3, #8
300094c4:	e0801001 	add	r1, r0, r1
300094c8:	e0813003 	add	r3, r1, r3
300094cc:	e5c32003 	strb	r2, [r3, #3]
            if (pevent->OSEventTbl[y_old] == 0u) {
300094d0:	e55b200d 	ldrb	r2, [fp, #-13]
300094d4:	e51b101c 	ldr	r1, [fp, #-28]
300094d8:	e3a03008 	mov	r3, #8
300094dc:	e0812002 	add	r2, r1, r2
300094e0:	e0823003 	add	r3, r2, r3
300094e4:	e5d33003 	ldrb	r3, [r3, #3]
300094e8:	e3530000 	cmp	r3, #0
300094ec:	1a000008 	bne	30009514 <OSTaskChangePrio+0x3d8>
                pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
300094f0:	e51b301c 	ldr	r3, [fp, #-28]
300094f4:	e5d3200a 	ldrb	r2, [r3, #10]
300094f8:	e55b300a 	ldrb	r3, [fp, #-10]
300094fc:	e1e03003 	mvn	r3, r3
30009500:	e20330ff 	and	r3, r3, #255	; 0xff
30009504:	e0023003 	and	r3, r2, r3
30009508:	e20320ff 	and	r2, r3, #255	; 0xff
3000950c:	e51b301c 	ldr	r3, [fp, #-28]
30009510:	e5c3200a 	strb	r2, [r3, #10]
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
30009514:	e51b301c 	ldr	r3, [fp, #-28]
30009518:	e5d3200a 	ldrb	r2, [r3, #10]
3000951c:	e55b300c 	ldrb	r3, [fp, #-12]
30009520:	e1823003 	orr	r3, r2, r3
30009524:	e20320ff 	and	r2, r3, #255	; 0xff
30009528:	e51b301c 	ldr	r3, [fp, #-28]
3000952c:	e5c3200a 	strb	r2, [r3, #10]
            pevent->OSEventTbl[y_new] |= bitx_new;
30009530:	e55b100f 	ldrb	r1, [fp, #-15]
30009534:	e55b200f 	ldrb	r2, [fp, #-15]
30009538:	e51b001c 	ldr	r0, [fp, #-28]
3000953c:	e3a03008 	mov	r3, #8
30009540:	e0802002 	add	r2, r0, r2
30009544:	e0823003 	add	r3, r2, r3
30009548:	e5d32003 	ldrb	r2, [r3, #3]
3000954c:	e55b300b 	ldrb	r3, [fp, #-11]
30009550:	e1823003 	orr	r3, r2, r3
30009554:	e20320ff 	and	r2, r3, #255	; 0xff
30009558:	e51b001c 	ldr	r0, [fp, #-28]
3000955c:	e3a03008 	mov	r3, #8
30009560:	e0801001 	add	r1, r0, r1
30009564:	e0813003 	add	r3, r1, r3
30009568:	e5c32003 	strb	r2, [r3, #3]
            pevents++;
3000956c:	e51b3018 	ldr	r3, [fp, #-24]
30009570:	e2833004 	add	r3, r3, #4
30009574:	e50b3018 	str	r3, [fp, #-24]
            pevent                     = *pevents;
30009578:	e51b3018 	ldr	r3, [fp, #-24]
3000957c:	e5933000 	ldr	r3, [r3]
30009580:	e50b301c 	str	r3, [fp, #-28]
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
30009584:	e51b301c 	ldr	r3, [fp, #-28]
30009588:	e3530000 	cmp	r3, #0
3000958c:	1affffbe 	bne	3000948c <OSTaskChangePrio+0x350>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
30009590:	e51b3014 	ldr	r3, [fp, #-20]
30009594:	e55b201e 	ldrb	r2, [fp, #-30]
30009598:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    ptcb->OSTCBY    = y_new;
3000959c:	e51b3014 	ldr	r3, [fp, #-20]
300095a0:	e55b200f 	ldrb	r2, [fp, #-15]
300095a4:	e5c3203c 	strb	r2, [r3, #60]	; 0x3c
    ptcb->OSTCBX    = x_new;
300095a8:	e51b3014 	ldr	r3, [fp, #-20]
300095ac:	e55b200e 	ldrb	r2, [fp, #-14]
300095b0:	e5c3203b 	strb	r2, [r3, #59]	; 0x3b
    ptcb->OSTCBBitY = bity_new;
300095b4:	e51b3014 	ldr	r3, [fp, #-20]
300095b8:	e55b200c 	ldrb	r2, [fp, #-12]
300095bc:	e5c3203e 	strb	r2, [r3, #62]	; 0x3e
    ptcb->OSTCBBitX = bitx_new;
300095c0:	e51b3014 	ldr	r3, [fp, #-20]
300095c4:	e55b200b 	ldrb	r2, [fp, #-11]
300095c8:	e5c3203d 	strb	r2, [r3, #61]	; 0x3d
    OS_EXIT_CRITICAL();
300095cc:	e51b0008 	ldr	r0, [fp, #-8]
300095d0:	ebffdad8 	bl	30000138 <OS_CPU_RestoreSR>
    if (OSRunning == OS_TRUE) {
300095d4:	e59f3030 	ldr	r3, [pc, #48]	; 3000960c <OSTaskChangePrio+0x4d0>
300095d8:	e5d33000 	ldrb	r3, [r3]
300095dc:	e3530001 	cmp	r3, #1
300095e0:	1a000000 	bne	300095e8 <OSTaskChangePrio+0x4ac>
        OS_Sched();                                         /* Find new highest priority task          */
300095e4:	ebffe817 	bl	30003648 <OS_Sched>
    }
    return (OS_ERR_NONE);
300095e8:	e3a03000 	mov	r3, #0
}
300095ec:	e1a00003 	mov	r0, r3
300095f0:	e24bd004 	sub	sp, fp, #4
300095f4:	e8bd4800 	pop	{fp, lr}
300095f8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300095fc:	300186d0 	.word	0x300186d0
30009600:	30017be0 	.word	0x30017be0
30009604:	300179d0 	.word	0x300179d0
30009608:	300179cc 	.word	0x300179cc
3000960c:	300173f1 	.word	0x300173f1

30009610 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
30009610:	e92d4800 	push	{fp, lr}
30009614:	e28db004 	add	fp, sp, #4
30009618:	e24dd030 	sub	sp, sp, #48	; 0x30
3000961c:	e50b0018 	str	r0, [fp, #-24]
30009620:	e50b101c 	str	r1, [fp, #-28]
30009624:	e50b2020 	str	r2, [fp, #-32]
30009628:	e54b3021 	strb	r3, [fp, #-33]	; 0x21
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
3000962c:	e3a03000 	mov	r3, #0
30009630:	e50b3008 	str	r3, [fp, #-8]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
30009634:	e55b3021 	ldrb	r3, [fp, #-33]	; 0x21
30009638:	e353003f 	cmp	r3, #63	; 0x3f
3000963c:	9a000001 	bls	30009648 <OSTaskCreate+0x38>
        return (OS_ERR_PRIO_INVALID);
30009640:	e3a0302a 	mov	r3, #42	; 0x2a
30009644:	ea000043 	b	30009758 <OSTaskCreate+0x148>
    }
#endif
    OS_ENTER_CRITICAL();
30009648:	ebffdab2 	bl	30000118 <OS_CPU_SaveSR>
3000964c:	e1a03000 	mov	r3, r0
30009650:	e50b3008 	str	r3, [fp, #-8]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
30009654:	e59f310c 	ldr	r3, [pc, #268]	; 30009768 <OSTaskCreate+0x158>
30009658:	e5d33000 	ldrb	r3, [r3]
3000965c:	e3530000 	cmp	r3, #0
30009660:	0a000003 	beq	30009674 <OSTaskCreate+0x64>
        OS_EXIT_CRITICAL();
30009664:	e51b0008 	ldr	r0, [fp, #-8]
30009668:	ebffdab2 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_CREATE_ISR);
3000966c:	e3a0303c 	mov	r3, #60	; 0x3c
30009670:	ea000038 	b	30009758 <OSTaskCreate+0x148>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
30009674:	e55b2021 	ldrb	r2, [fp, #-33]	; 0x21
30009678:	e59f30ec 	ldr	r3, [pc, #236]	; 3000976c <OSTaskCreate+0x15c>
3000967c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
30009680:	e3530000 	cmp	r3, #0
30009684:	1a000030 	bne	3000974c <OSTaskCreate+0x13c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
30009688:	e55b2021 	ldrb	r2, [fp, #-33]	; 0x21
3000968c:	e59f30d8 	ldr	r3, [pc, #216]	; 3000976c <OSTaskCreate+0x15c>
30009690:	e3a01001 	mov	r1, #1
30009694:	e7831102 	str	r1, [r3, r2, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
30009698:	e51b0008 	ldr	r0, [fp, #-8]
3000969c:	ebffdaa5 	bl	30000138 <OS_CPU_RestoreSR>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
300096a0:	e51b0018 	ldr	r0, [fp, #-24]
300096a4:	e51b101c 	ldr	r1, [fp, #-28]
300096a8:	e51b2020 	ldr	r2, [fp, #-32]
300096ac:	e3a03000 	mov	r3, #0
300096b0:	ebffe106 	bl	30001ad0 <OSTaskStkInit>
300096b4:	e1a03000 	mov	r3, r0
300096b8:	e50b3010 	str	r3, [fp, #-16]
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
300096bc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0x21
300096c0:	e3a02000 	mov	r2, #0
300096c4:	e58d2000 	str	r2, [sp]
300096c8:	e3a02000 	mov	r2, #0
300096cc:	e58d2004 	str	r2, [sp, #4]
300096d0:	e3a02000 	mov	r2, #0
300096d4:	e58d2008 	str	r2, [sp, #8]
300096d8:	e1a00003 	mov	r0, r3
300096dc:	e51b1010 	ldr	r1, [fp, #-16]
300096e0:	e3a02000 	mov	r2, #0
300096e4:	e3a03000 	mov	r3, #0
300096e8:	ebffe8eb 	bl	30003a9c <OS_TCBInit>
300096ec:	e1a03000 	mov	r3, r0
300096f0:	e54b3009 	strb	r3, [fp, #-9]
        if (err == OS_ERR_NONE) {
300096f4:	e55b3009 	ldrb	r3, [fp, #-9]
300096f8:	e3530000 	cmp	r3, #0
300096fc:	1a000005 	bne	30009718 <OSTaskCreate+0x108>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
30009700:	e59f3068 	ldr	r3, [pc, #104]	; 30009770 <OSTaskCreate+0x160>
30009704:	e5d33000 	ldrb	r3, [r3]
30009708:	e3530001 	cmp	r3, #1
3000970c:	1a00000b 	bne	30009740 <OSTaskCreate+0x130>
                OS_Sched();
30009710:	ebffe7cc 	bl	30003648 <OS_Sched>
30009714:	ea00000a 	b	30009744 <OSTaskCreate+0x134>
            }
        } else {
            OS_TRACE_TASK_CREATE_FAILED(OSTCBPrioTbl[prio]);
            OS_ENTER_CRITICAL();
30009718:	ebffda7e 	bl	30000118 <OS_CPU_SaveSR>
3000971c:	e1a03000 	mov	r3, r0
30009720:	e50b3008 	str	r3, [fp, #-8]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
30009724:	e55b2021 	ldrb	r2, [fp, #-33]	; 0x21
30009728:	e59f303c 	ldr	r3, [pc, #60]	; 3000976c <OSTaskCreate+0x15c>
3000972c:	e3a01000 	mov	r1, #0
30009730:	e7831102 	str	r1, [r3, r2, lsl #2]
            OS_EXIT_CRITICAL();
30009734:	e51b0008 	ldr	r0, [fp, #-8]
30009738:	ebffda7e 	bl	30000138 <OS_CPU_RestoreSR>
3000973c:	ea000000 	b	30009744 <OSTaskCreate+0x134>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
        if (err == OS_ERR_NONE) {
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
                OS_Sched();
30009740:	e1a00000 	nop			; (mov r0, r0)
            OS_TRACE_TASK_CREATE_FAILED(OSTCBPrioTbl[prio]);
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
            OS_EXIT_CRITICAL();
        }
        return (err);
30009744:	e55b3009 	ldrb	r3, [fp, #-9]
30009748:	ea000002 	b	30009758 <OSTaskCreate+0x148>
    }
    OS_EXIT_CRITICAL();
3000974c:	e51b0008 	ldr	r0, [fp, #-8]
30009750:	ebffda78 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_PRIO_EXIST);
30009754:	e3a03028 	mov	r3, #40	; 0x28
}
30009758:	e1a00003 	mov	r0, r3
3000975c:	e24bd004 	sub	sp, fp, #4
30009760:	e8bd4800 	pop	{fp, lr}
30009764:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30009768:	30017bdc 	.word	0x30017bdc
3000976c:	300186d0 	.word	0x300186d0
30009770:	300173f1 	.word	0x300173f1

30009774 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
30009774:	e92d4800 	push	{fp, lr}
30009778:	e28db004 	add	fp, sp, #4
3000977c:	e24dd030 	sub	sp, sp, #48	; 0x30
30009780:	e50b0018 	str	r0, [fp, #-24]
30009784:	e50b101c 	str	r1, [fp, #-28]
30009788:	e50b2020 	str	r2, [fp, #-32]
3000978c:	e54b3021 	strb	r3, [fp, #-33]	; 0x21
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
30009790:	e3a03000 	mov	r3, #0
30009794:	e50b3008 	str	r3, [fp, #-8]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
30009798:	e55b3021 	ldrb	r3, [fp, #-33]	; 0x21
3000979c:	e353003f 	cmp	r3, #63	; 0x3f
300097a0:	9a000001 	bls	300097ac <OSTaskCreateExt+0x38>
        return (OS_ERR_PRIO_INVALID);
300097a4:	e3a0302a 	mov	r3, #42	; 0x2a
300097a8:	ea000048 	b	300098d0 <OSTaskCreateExt+0x15c>
    }
#endif
    OS_ENTER_CRITICAL();
300097ac:	ebffda59 	bl	30000118 <OS_CPU_SaveSR>
300097b0:	e1a03000 	mov	r3, r0
300097b4:	e50b3008 	str	r3, [fp, #-8]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
300097b8:	e59f3120 	ldr	r3, [pc, #288]	; 300098e0 <OSTaskCreateExt+0x16c>
300097bc:	e5d33000 	ldrb	r3, [r3]
300097c0:	e3530000 	cmp	r3, #0
300097c4:	0a000003 	beq	300097d8 <OSTaskCreateExt+0x64>
        OS_EXIT_CRITICAL();
300097c8:	e51b0008 	ldr	r0, [fp, #-8]
300097cc:	ebffda59 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_CREATE_ISR);
300097d0:	e3a0303c 	mov	r3, #60	; 0x3c
300097d4:	ea00003d 	b	300098d0 <OSTaskCreateExt+0x15c>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
300097d8:	e55b2021 	ldrb	r2, [fp, #-33]	; 0x21
300097dc:	e59f3100 	ldr	r3, [pc, #256]	; 300098e4 <OSTaskCreateExt+0x170>
300097e0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
300097e4:	e3530000 	cmp	r3, #0
300097e8:	1a000035 	bne	300098c4 <OSTaskCreateExt+0x150>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
300097ec:	e55b2021 	ldrb	r2, [fp, #-33]	; 0x21
300097f0:	e59f30ec 	ldr	r3, [pc, #236]	; 300098e4 <OSTaskCreateExt+0x170>
300097f4:	e3a01001 	mov	r1, #1
300097f8:	e7831102 	str	r1, [r3, r2, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
300097fc:	e51b0008 	ldr	r0, [fp, #-8]
30009800:	ebffda4c 	bl	30000138 <OS_CPU_RestoreSR>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
30009804:	e1db31b4 	ldrh	r3, [fp, #20]
30009808:	e59b0008 	ldr	r0, [fp, #8]
3000980c:	e59b100c 	ldr	r1, [fp, #12]
30009810:	e1a02003 	mov	r2, r3
30009814:	eb000420 	bl	3000a89c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
30009818:	e1db31b4 	ldrh	r3, [fp, #20]
3000981c:	e51b0018 	ldr	r0, [fp, #-24]
30009820:	e51b101c 	ldr	r1, [fp, #-28]
30009824:	e51b2020 	ldr	r2, [fp, #-32]
30009828:	ebffe0a8 	bl	30001ad0 <OSTaskStkInit>
3000982c:	e1a03000 	mov	r3, r0
30009830:	e50b3010 	str	r3, [fp, #-16]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
30009834:	e55b2021 	ldrb	r2, [fp, #-33]	; 0x21
30009838:	e1db30b4 	ldrh	r3, [fp, #4]
3000983c:	e59b100c 	ldr	r1, [fp, #12]
30009840:	e58d1000 	str	r1, [sp]
30009844:	e59b1010 	ldr	r1, [fp, #16]
30009848:	e58d1004 	str	r1, [sp, #4]
3000984c:	e1db11b4 	ldrh	r1, [fp, #20]
30009850:	e58d1008 	str	r1, [sp, #8]
30009854:	e1a00002 	mov	r0, r2
30009858:	e51b1010 	ldr	r1, [fp, #-16]
3000985c:	e59b2008 	ldr	r2, [fp, #8]
30009860:	ebffe88d 	bl	30003a9c <OS_TCBInit>
30009864:	e1a03000 	mov	r3, r0
30009868:	e54b3009 	strb	r3, [fp, #-9]
        if (err == OS_ERR_NONE) {
3000986c:	e55b3009 	ldrb	r3, [fp, #-9]
30009870:	e3530000 	cmp	r3, #0
30009874:	1a000005 	bne	30009890 <OSTaskCreateExt+0x11c>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
30009878:	e59f3068 	ldr	r3, [pc, #104]	; 300098e8 <OSTaskCreateExt+0x174>
3000987c:	e5d33000 	ldrb	r3, [r3]
30009880:	e3530001 	cmp	r3, #1
30009884:	1a00000b 	bne	300098b8 <OSTaskCreateExt+0x144>
                OS_Sched();
30009888:	ebffe76e 	bl	30003648 <OS_Sched>
3000988c:	ea00000a 	b	300098bc <OSTaskCreateExt+0x148>
            }
        } else {
            OS_ENTER_CRITICAL();
30009890:	ebffda20 	bl	30000118 <OS_CPU_SaveSR>
30009894:	e1a03000 	mov	r3, r0
30009898:	e50b3008 	str	r3, [fp, #-8]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
3000989c:	e55b2021 	ldrb	r2, [fp, #-33]	; 0x21
300098a0:	e59f303c 	ldr	r3, [pc, #60]	; 300098e4 <OSTaskCreateExt+0x170>
300098a4:	e3a01000 	mov	r1, #0
300098a8:	e7831102 	str	r1, [r3, r2, lsl #2]
            OS_EXIT_CRITICAL();
300098ac:	e51b0008 	ldr	r0, [fp, #-8]
300098b0:	ebffda20 	bl	30000138 <OS_CPU_RestoreSR>
300098b4:	ea000000 	b	300098bc <OSTaskCreateExt+0x148>
        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
        if (err == OS_ERR_NONE) {
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
                OS_Sched();
300098b8:	e1a00000 	nop			; (mov r0, r0)
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
            OS_EXIT_CRITICAL();
        }
        return (err);
300098bc:	e55b3009 	ldrb	r3, [fp, #-9]
300098c0:	ea000002 	b	300098d0 <OSTaskCreateExt+0x15c>
    }
    OS_EXIT_CRITICAL();
300098c4:	e51b0008 	ldr	r0, [fp, #-8]
300098c8:	ebffda1a 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_PRIO_EXIST);
300098cc:	e3a03028 	mov	r3, #40	; 0x28
}
300098d0:	e1a00003 	mov	r0, r3
300098d4:	e24bd004 	sub	sp, fp, #4
300098d8:	e8bd4800 	pop	{fp, lr}
300098dc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
300098e0:	30017bdc 	.word	0x30017bdc
300098e4:	300186d0 	.word	0x300186d0
300098e8:	300173f1 	.word	0x300173f1

300098ec <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
300098ec:	e92d4800 	push	{fp, lr}
300098f0:	e28db004 	add	fp, sp, #4
300098f4:	e24dd018 	sub	sp, sp, #24
300098f8:	e1a03000 	mov	r3, r0
300098fc:	e54b3015 	strb	r3, [fp, #-21]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
30009900:	e3a03000 	mov	r3, #0
30009904:	e50b3008 	str	r3, [fp, #-8]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
30009908:	e59f3304 	ldr	r3, [pc, #772]	; 30009c14 <OSTaskDel+0x328>
3000990c:	e5d33000 	ldrb	r3, [r3]
30009910:	e3530000 	cmp	r3, #0
30009914:	0a000001 	beq	30009920 <OSTaskDel+0x34>
        return (OS_ERR_TASK_DEL_ISR);
30009918:	e3a03040 	mov	r3, #64	; 0x40
3000991c:	ea0000b8 	b	30009c04 <OSTaskDel+0x318>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
30009920:	e55b3015 	ldrb	r3, [fp, #-21]
30009924:	e353003f 	cmp	r3, #63	; 0x3f
30009928:	1a000001 	bne	30009934 <OSTaskDel+0x48>
        return (OS_ERR_TASK_DEL_IDLE);
3000992c:	e3a0303e 	mov	r3, #62	; 0x3e
30009930:	ea0000b3 	b	30009c04 <OSTaskDel+0x318>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
30009934:	e55b3015 	ldrb	r3, [fp, #-21]
30009938:	e353003e 	cmp	r3, #62	; 0x3e
3000993c:	9a000004 	bls	30009954 <OSTaskDel+0x68>
        if (prio != OS_PRIO_SELF) {
30009940:	e55b3015 	ldrb	r3, [fp, #-21]
30009944:	e35300ff 	cmp	r3, #255	; 0xff
30009948:	0a000001 	beq	30009954 <OSTaskDel+0x68>
            return (OS_ERR_PRIO_INVALID);
3000994c:	e3a0302a 	mov	r3, #42	; 0x2a
30009950:	ea0000ab 	b	30009c04 <OSTaskDel+0x318>
        }
    }
#endif

    OS_ENTER_CRITICAL();
30009954:	ebffd9ef 	bl	30000118 <OS_CPU_SaveSR>
30009958:	e1a03000 	mov	r3, r0
3000995c:	e50b3008 	str	r3, [fp, #-8]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
30009960:	e55b3015 	ldrb	r3, [fp, #-21]
30009964:	e35300ff 	cmp	r3, #255	; 0xff
30009968:	1a000003 	bne	3000997c <OSTaskDel+0x90>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
3000996c:	e59f32a4 	ldr	r3, [pc, #676]	; 30009c18 <OSTaskDel+0x32c>
30009970:	e5933000 	ldr	r3, [r3]
30009974:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30009978:	e54b3015 	strb	r3, [fp, #-21]
    }
    ptcb = OSTCBPrioTbl[prio];
3000997c:	e55b2015 	ldrb	r2, [fp, #-21]
30009980:	e59f3294 	ldr	r3, [pc, #660]	; 30009c1c <OSTaskDel+0x330>
30009984:	e7933102 	ldr	r3, [r3, r2, lsl #2]
30009988:	e50b300c 	str	r3, [fp, #-12]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
3000998c:	e51b300c 	ldr	r3, [fp, #-12]
30009990:	e3530000 	cmp	r3, #0
30009994:	1a000003 	bne	300099a8 <OSTaskDel+0xbc>
        OS_EXIT_CRITICAL();
30009998:	e51b0008 	ldr	r0, [fp, #-8]
3000999c:	ebffd9e5 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);
300099a0:	e3a03043 	mov	r3, #67	; 0x43
300099a4:	ea000096 	b	30009c04 <OSTaskDel+0x318>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
300099a8:	e51b300c 	ldr	r3, [fp, #-12]
300099ac:	e3530001 	cmp	r3, #1
300099b0:	1a000003 	bne	300099c4 <OSTaskDel+0xd8>
        OS_EXIT_CRITICAL();
300099b4:	e51b0008 	ldr	r0, [fp, #-8]
300099b8:	ebffd9de 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_DEL);
300099bc:	e3a0303d 	mov	r3, #61	; 0x3d
300099c0:	ea00008f 	b	30009c04 <OSTaskDel+0x318>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
300099c4:	e51b300c 	ldr	r3, [fp, #-12]
300099c8:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
300099cc:	e51b200c 	ldr	r2, [fp, #-12]
300099d0:	e5d2203c 	ldrb	r2, [r2, #60]	; 0x3c
300099d4:	e59f1244 	ldr	r1, [pc, #580]	; 30009c20 <OSTaskDel+0x334>
300099d8:	e7d11002 	ldrb	r1, [r1, r2]
300099dc:	e51b200c 	ldr	r2, [fp, #-12]
300099e0:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
300099e4:	e1e02002 	mvn	r2, r2
300099e8:	e20220ff 	and	r2, r2, #255	; 0xff
300099ec:	e0012002 	and	r2, r1, r2
300099f0:	e20210ff 	and	r1, r2, #255	; 0xff
300099f4:	e59f2224 	ldr	r2, [pc, #548]	; 30009c20 <OSTaskDel+0x334>
300099f8:	e7c21003 	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
300099fc:	e51b300c 	ldr	r3, [fp, #-12]
30009a00:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
30009a04:	e59f2214 	ldr	r2, [pc, #532]	; 30009c20 <OSTaskDel+0x334>
30009a08:	e7d23003 	ldrb	r3, [r2, r3]
30009a0c:	e3530000 	cmp	r3, #0
30009a10:	1a000009 	bne	30009a3c <OSTaskDel+0x150>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
30009a14:	e51b300c 	ldr	r3, [fp, #-12]
30009a18:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
30009a1c:	e1e03003 	mvn	r3, r3
30009a20:	e20320ff 	and	r2, r3, #255	; 0xff
30009a24:	e59f31f8 	ldr	r3, [pc, #504]	; 30009c24 <OSTaskDel+0x338>
30009a28:	e5d33000 	ldrb	r3, [r3]
30009a2c:	e0023003 	and	r3, r2, r3
30009a30:	e20320ff 	and	r2, r3, #255	; 0xff
30009a34:	e59f31e8 	ldr	r3, [pc, #488]	; 30009c24 <OSTaskDel+0x338>
30009a38:	e5c32000 	strb	r2, [r3]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
30009a3c:	e51b300c 	ldr	r3, [fp, #-12]
30009a40:	e593301c 	ldr	r3, [r3, #28]
30009a44:	e3530000 	cmp	r3, #0
30009a48:	0a000004 	beq	30009a60 <OSTaskDel+0x174>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
30009a4c:	e51b300c 	ldr	r3, [fp, #-12]
30009a50:	e593301c 	ldr	r3, [r3, #28]
30009a54:	e51b000c 	ldr	r0, [fp, #-12]
30009a58:	e1a01003 	mov	r1, r3
30009a5c:	ebffe507 	bl	30002e80 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
30009a60:	e51b300c 	ldr	r3, [fp, #-12]
30009a64:	e5933020 	ldr	r3, [r3, #32]
30009a68:	e3530000 	cmp	r3, #0
30009a6c:	0a000004 	beq	30009a84 <OSTaskDel+0x198>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
30009a70:	e51b300c 	ldr	r3, [fp, #-12]
30009a74:	e5933020 	ldr	r3, [r3, #32]
30009a78:	e51b000c 	ldr	r0, [fp, #-12]
30009a7c:	e1a01003 	mov	r1, r3
30009a80:	ebffe530 	bl	30002f48 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
30009a84:	e51b300c 	ldr	r3, [fp, #-12]
30009a88:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
30009a8c:	e50b3010 	str	r3, [fp, #-16]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
30009a90:	e51b3010 	ldr	r3, [fp, #-16]
30009a94:	e3530000 	cmp	r3, #0
30009a98:	0a000001 	beq	30009aa4 <OSTaskDel+0x1b8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
30009a9c:	e51b0010 	ldr	r0, [fp, #-16]
30009aa0:	ebffee31 	bl	3000536c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
30009aa4:	e51b300c 	ldr	r3, [fp, #-12]
30009aa8:	e3a02000 	mov	r2, #0
30009aac:	e5832034 	str	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
30009ab0:	e51b300c 	ldr	r3, [fp, #-12]
30009ab4:	e3a02000 	mov	r2, #0
30009ab8:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
30009abc:	e51b300c 	ldr	r3, [fp, #-12]
30009ac0:	e3a02000 	mov	r2, #0
30009ac4:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
30009ac8:	e59f3158 	ldr	r3, [pc, #344]	; 30009c28 <OSTaskDel+0x33c>
30009acc:	e5d33000 	ldrb	r3, [r3]
30009ad0:	e35300ff 	cmp	r3, #255	; 0xff
30009ad4:	0a000005 	beq	30009af0 <OSTaskDel+0x204>
        OSLockNesting++;
30009ad8:	e59f3148 	ldr	r3, [pc, #328]	; 30009c28 <OSTaskDel+0x33c>
30009adc:	e5d33000 	ldrb	r3, [r3]
30009ae0:	e2833001 	add	r3, r3, #1
30009ae4:	e20320ff 	and	r2, r3, #255	; 0xff
30009ae8:	e59f3138 	ldr	r3, [pc, #312]	; 30009c28 <OSTaskDel+0x33c>
30009aec:	e5c32000 	strb	r2, [r3]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
30009af0:	e51b0008 	ldr	r0, [fp, #-8]
30009af4:	ebffd98f 	bl	30000138 <OS_CPU_RestoreSR>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
30009af8:	ebffe3c7 	bl	30002a1c <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
30009afc:	ebffd985 	bl	30000118 <OS_CPU_SaveSR>
30009b00:	e1a03000 	mov	r3, r0
30009b04:	e50b3008 	str	r3, [fp, #-8]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
30009b08:	e59f3118 	ldr	r3, [pc, #280]	; 30009c28 <OSTaskDel+0x33c>
30009b0c:	e5d33000 	ldrb	r3, [r3]
30009b10:	e3530000 	cmp	r3, #0
30009b14:	0a000005 	beq	30009b30 <OSTaskDel+0x244>
        OSLockNesting--;
30009b18:	e59f3108 	ldr	r3, [pc, #264]	; 30009c28 <OSTaskDel+0x33c>
30009b1c:	e5d33000 	ldrb	r3, [r3]
30009b20:	e2433001 	sub	r3, r3, #1
30009b24:	e20320ff 	and	r2, r3, #255	; 0xff
30009b28:	e59f30f8 	ldr	r3, [pc, #248]	; 30009c28 <OSTaskDel+0x33c>
30009b2c:	e5c32000 	strb	r2, [r3]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
30009b30:	e51b000c 	ldr	r0, [fp, #-12]
30009b34:	ebffdfd4 	bl	30001a8c <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
30009b38:	e59f30ec 	ldr	r3, [pc, #236]	; 30009c2c <OSTaskDel+0x340>
30009b3c:	e5d33000 	ldrb	r3, [r3]
30009b40:	e2433001 	sub	r3, r3, #1
30009b44:	e20320ff 	and	r2, r3, #255	; 0xff
30009b48:	e59f30dc 	ldr	r3, [pc, #220]	; 30009c2c <OSTaskDel+0x340>
30009b4c:	e5c32000 	strb	r2, [r3]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
30009b50:	e55b2015 	ldrb	r2, [fp, #-21]
30009b54:	e59f30c0 	ldr	r3, [pc, #192]	; 30009c1c <OSTaskDel+0x330>
30009b58:	e3a01000 	mov	r1, #0
30009b5c:	e7831102 	str	r1, [r3, r2, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
30009b60:	e51b300c 	ldr	r3, [fp, #-12]
30009b64:	e5933018 	ldr	r3, [r3, #24]
30009b68:	e3530000 	cmp	r3, #0
30009b6c:	1a000008 	bne	30009b94 <OSTaskDel+0x2a8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
30009b70:	e51b300c 	ldr	r3, [fp, #-12]
30009b74:	e5933014 	ldr	r3, [r3, #20]
30009b78:	e3a02000 	mov	r2, #0
30009b7c:	e5832018 	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
30009b80:	e51b300c 	ldr	r3, [fp, #-12]
30009b84:	e5932014 	ldr	r2, [r3, #20]
30009b88:	e59f30a0 	ldr	r3, [pc, #160]	; 30009c30 <OSTaskDel+0x344>
30009b8c:	e5832000 	str	r2, [r3]
30009b90:	ea000009 	b	30009bbc <OSTaskDel+0x2d0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
30009b94:	e51b300c 	ldr	r3, [fp, #-12]
30009b98:	e5933018 	ldr	r3, [r3, #24]
30009b9c:	e51b200c 	ldr	r2, [fp, #-12]
30009ba0:	e5922014 	ldr	r2, [r2, #20]
30009ba4:	e5832014 	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
30009ba8:	e51b300c 	ldr	r3, [fp, #-12]
30009bac:	e5933014 	ldr	r3, [r3, #20]
30009bb0:	e51b200c 	ldr	r2, [fp, #-12]
30009bb4:	e5922018 	ldr	r2, [r2, #24]
30009bb8:	e5832018 	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
30009bbc:	e59f3070 	ldr	r3, [pc, #112]	; 30009c34 <OSTaskDel+0x348>
30009bc0:	e5932000 	ldr	r2, [r3]
30009bc4:	e51b300c 	ldr	r3, [fp, #-12]
30009bc8:	e5832014 	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
30009bcc:	e59f3060 	ldr	r3, [pc, #96]	; 30009c34 <OSTaskDel+0x348>
30009bd0:	e51b200c 	ldr	r2, [fp, #-12]
30009bd4:	e5832000 	str	r2, [r3]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
30009bd8:	e51b300c 	ldr	r3, [fp, #-12]
30009bdc:	e59f2054 	ldr	r2, [pc, #84]	; 30009c38 <OSTaskDel+0x34c>
30009be0:	e5832054 	str	r2, [r3, #84]	; 0x54
#endif
    OS_EXIT_CRITICAL();
30009be4:	e51b0008 	ldr	r0, [fp, #-8]
30009be8:	ebffd952 	bl	30000138 <OS_CPU_RestoreSR>
    if (OSRunning == OS_TRUE) {
30009bec:	e59f3048 	ldr	r3, [pc, #72]	; 30009c3c <OSTaskDel+0x350>
30009bf0:	e5d33000 	ldrb	r3, [r3]
30009bf4:	e3530001 	cmp	r3, #1
30009bf8:	1a000000 	bne	30009c00 <OSTaskDel+0x314>
        OS_Sched();                                     /* Find new highest priority task              */
30009bfc:	ebffe691 	bl	30003648 <OS_Sched>
    }
    return (OS_ERR_NONE);
30009c00:	e3a03000 	mov	r3, #0
}
30009c04:	e1a00003 	mov	r0, r3
30009c08:	e24bd004 	sub	sp, fp, #4
30009c0c:	e8bd4800 	pop	{fp, lr}
30009c10:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30009c14:	30017bdc 	.word	0x30017bdc
30009c18:	30017be0 	.word	0x30017be0
30009c1c:	300186d0 	.word	0x300186d0
30009c20:	300179d0 	.word	0x300179d0
30009c24:	300179cc 	.word	0x300179cc
30009c28:	300173e8 	.word	0x300173e8
30009c2c:	3001795d 	.word	0x3001795d
30009c30:	300176d0 	.word	0x300176d0
30009c34:	30017958 	.word	0x30017958
30009c38:	3000c278 	.word	0x3000c278
30009c3c:	300173f1 	.word	0x300173f1

30009c40 <OSTaskDelReq>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDelReq (INT8U prio)
{
30009c40:	e92d4800 	push	{fp, lr}
30009c44:	e28db004 	add	fp, sp, #4
30009c48:	e24dd018 	sub	sp, sp, #24
30009c4c:	e1a03000 	mov	r3, r0
30009c50:	e54b3015 	strb	r3, [fp, #-21]
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
30009c54:	e3a03000 	mov	r3, #0
30009c58:	e50b3008 	str	r3, [fp, #-8]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
30009c5c:	e55b3015 	ldrb	r3, [fp, #-21]
30009c60:	e353003f 	cmp	r3, #63	; 0x3f
30009c64:	1a000001 	bne	30009c70 <OSTaskDelReq+0x30>
        return (OS_ERR_TASK_DEL_IDLE);
30009c68:	e3a0303e 	mov	r3, #62	; 0x3e
30009c6c:	ea000030 	b	30009d34 <OSTaskDelReq+0xf4>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
30009c70:	e55b3015 	ldrb	r3, [fp, #-21]
30009c74:	e353003e 	cmp	r3, #62	; 0x3e
30009c78:	9a000004 	bls	30009c90 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
30009c7c:	e55b3015 	ldrb	r3, [fp, #-21]
30009c80:	e35300ff 	cmp	r3, #255	; 0xff
30009c84:	0a000001 	beq	30009c90 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
30009c88:	e3a0302a 	mov	r3, #42	; 0x2a
30009c8c:	ea000028 	b	30009d34 <OSTaskDelReq+0xf4>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
30009c90:	e55b3015 	ldrb	r3, [fp, #-21]
30009c94:	e35300ff 	cmp	r3, #255	; 0xff
30009c98:	1a00000a 	bne	30009cc8 <OSTaskDelReq+0x88>
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
30009c9c:	ebffd91d 	bl	30000118 <OS_CPU_SaveSR>
30009ca0:	e1a03000 	mov	r3, r0
30009ca4:	e50b3008 	str	r3, [fp, #-8]
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
30009ca8:	e59f3094 	ldr	r3, [pc, #148]	; 30009d44 <OSTaskDelReq+0x104>
30009cac:	e5933000 	ldr	r3, [r3]
30009cb0:	e5d3303f 	ldrb	r3, [r3, #63]	; 0x3f
30009cb4:	e54b300d 	strb	r3, [fp, #-13]
        OS_EXIT_CRITICAL();
30009cb8:	e51b0008 	ldr	r0, [fp, #-8]
30009cbc:	ebffd91d 	bl	30000138 <OS_CPU_RestoreSR>
        return (stat);
30009cc0:	e55b300d 	ldrb	r3, [fp, #-13]
30009cc4:	ea00001a 	b	30009d34 <OSTaskDelReq+0xf4>
    }
    OS_ENTER_CRITICAL();
30009cc8:	ebffd912 	bl	30000118 <OS_CPU_SaveSR>
30009ccc:	e1a03000 	mov	r3, r0
30009cd0:	e50b3008 	str	r3, [fp, #-8]
    ptcb = OSTCBPrioTbl[prio];
30009cd4:	e55b2015 	ldrb	r2, [fp, #-21]
30009cd8:	e59f3068 	ldr	r3, [pc, #104]	; 30009d48 <OSTaskDelReq+0x108>
30009cdc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
30009ce0:	e50b300c 	str	r3, [fp, #-12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
30009ce4:	e51b300c 	ldr	r3, [fp, #-12]
30009ce8:	e3530000 	cmp	r3, #0
30009cec:	1a000003 	bne	30009d00 <OSTaskDelReq+0xc0>
        OS_EXIT_CRITICAL();
30009cf0:	e51b0008 	ldr	r0, [fp, #-8]
30009cf4:	ebffd90f 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
30009cf8:	e3a03043 	mov	r3, #67	; 0x43
30009cfc:	ea00000c 	b	30009d34 <OSTaskDelReq+0xf4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
30009d00:	e51b300c 	ldr	r3, [fp, #-12]
30009d04:	e3530001 	cmp	r3, #1
30009d08:	1a000003 	bne	30009d1c <OSTaskDelReq+0xdc>
        OS_EXIT_CRITICAL();
30009d0c:	e51b0008 	ldr	r0, [fp, #-8]
30009d10:	ebffd908 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_DEL);
30009d14:	e3a0303d 	mov	r3, #61	; 0x3d
30009d18:	ea000005 	b	30009d34 <OSTaskDelReq+0xf4>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
30009d1c:	e51b300c 	ldr	r3, [fp, #-12]
30009d20:	e3a0203f 	mov	r2, #63	; 0x3f
30009d24:	e5c3203f 	strb	r2, [r3, #63]	; 0x3f
    OS_EXIT_CRITICAL();
30009d28:	e51b0008 	ldr	r0, [fp, #-8]
30009d2c:	ebffd901 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_NONE);
30009d30:	e3a03000 	mov	r3, #0
}
30009d34:	e1a00003 	mov	r0, r3
30009d38:	e24bd004 	sub	sp, fp, #4
30009d3c:	e8bd4800 	pop	{fp, lr}
30009d40:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30009d44:	30017be0 	.word	0x30017be0
30009d48:	300186d0 	.word	0x300186d0

30009d4c <OSTaskNameGet>:

#if OS_TASK_NAME_EN > 0u
INT8U  OSTaskNameGet (INT8U    prio,
                      INT8U  **pname,
                      INT8U   *perr)
{
30009d4c:	e92d4800 	push	{fp, lr}
30009d50:	e28db004 	add	fp, sp, #4
30009d54:	e24dd020 	sub	sp, sp, #32
30009d58:	e1a03000 	mov	r3, r0
30009d5c:	e50b101c 	str	r1, [fp, #-28]
30009d60:	e50b2020 	str	r2, [fp, #-32]
30009d64:	e54b3015 	strb	r3, [fp, #-21]
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3u                             /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0u;
30009d68:	e3a03000 	mov	r3, #0
30009d6c:	e50b3008 	str	r3, [fp, #-8]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
30009d70:	e55b3015 	ldrb	r3, [fp, #-21]
30009d74:	e353003f 	cmp	r3, #63	; 0x3f
30009d78:	9a000007 	bls	30009d9c <OSTaskNameGet+0x50>
        if (prio != OS_PRIO_SELF) {
30009d7c:	e55b3015 	ldrb	r3, [fp, #-21]
30009d80:	e35300ff 	cmp	r3, #255	; 0xff
30009d84:	0a000004 	beq	30009d9c <OSTaskNameGet+0x50>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
30009d88:	e51b3020 	ldr	r3, [fp, #-32]
30009d8c:	e3a0202a 	mov	r2, #42	; 0x2a
30009d90:	e5c32000 	strb	r2, [r3]
            return (0u);
30009d94:	e3a03000 	mov	r3, #0
30009d98:	ea000042 	b	30009ea8 <OSTaskNameGet+0x15c>
        }
    }
    if (pname == (INT8U **)0) {                          /* Is 'pname' a NULL pointer?                 */
30009d9c:	e51b301c 	ldr	r3, [fp, #-28]
30009da0:	e3530000 	cmp	r3, #0
30009da4:	1a000004 	bne	30009dbc <OSTaskNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
30009da8:	e51b3020 	ldr	r3, [fp, #-32]
30009dac:	e3a0200c 	mov	r2, #12
30009db0:	e5c32000 	strb	r2, [r3]
        return (0u);
30009db4:	e3a03000 	mov	r3, #0
30009db8:	ea00003a 	b	30009ea8 <OSTaskNameGet+0x15c>
    }
#endif
    if (OSIntNesting > 0u) {                              /* See if trying to call from an ISR          */
30009dbc:	e59f30f4 	ldr	r3, [pc, #244]	; 30009eb8 <OSTaskNameGet+0x16c>
30009dc0:	e5d33000 	ldrb	r3, [r3]
30009dc4:	e3530000 	cmp	r3, #0
30009dc8:	0a000004 	beq	30009de0 <OSTaskNameGet+0x94>
        *perr = OS_ERR_NAME_GET_ISR;
30009dcc:	e51b3020 	ldr	r3, [fp, #-32]
30009dd0:	e3a02011 	mov	r2, #17
30009dd4:	e5c32000 	strb	r2, [r3]
        return (0u);
30009dd8:	e3a03000 	mov	r3, #0
30009ddc:	ea000031 	b	30009ea8 <OSTaskNameGet+0x15c>
    }
    OS_ENTER_CRITICAL();
30009de0:	ebffd8cc 	bl	30000118 <OS_CPU_SaveSR>
30009de4:	e1a03000 	mov	r3, r0
30009de8:	e50b3008 	str	r3, [fp, #-8]
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
30009dec:	e55b3015 	ldrb	r3, [fp, #-21]
30009df0:	e35300ff 	cmp	r3, #255	; 0xff
30009df4:	1a000003 	bne	30009e08 <OSTaskNameGet+0xbc>
        prio = OSTCBCur->OSTCBPrio;
30009df8:	e59f30bc 	ldr	r3, [pc, #188]	; 30009ebc <OSTaskNameGet+0x170>
30009dfc:	e5933000 	ldr	r3, [r3]
30009e00:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30009e04:	e54b3015 	strb	r3, [fp, #-21]
    }
    ptcb = OSTCBPrioTbl[prio];
30009e08:	e55b2015 	ldrb	r2, [fp, #-21]
30009e0c:	e59f30ac 	ldr	r3, [pc, #172]	; 30009ec0 <OSTaskNameGet+0x174>
30009e10:	e7933102 	ldr	r3, [r3, r2, lsl #2]
30009e14:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
30009e18:	e51b3010 	ldr	r3, [fp, #-16]
30009e1c:	e3530000 	cmp	r3, #0
30009e20:	1a000006 	bne	30009e40 <OSTaskNameGet+0xf4>
        OS_EXIT_CRITICAL();                              /* No                                         */
30009e24:	e51b0008 	ldr	r0, [fp, #-8]
30009e28:	ebffd8c2 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_TASK_NOT_EXIST;
30009e2c:	e51b3020 	ldr	r3, [fp, #-32]
30009e30:	e3a02043 	mov	r2, #67	; 0x43
30009e34:	e5c32000 	strb	r2, [r3]
        return (0u);
30009e38:	e3a03000 	mov	r3, #0
30009e3c:	ea000019 	b	30009ea8 <OSTaskNameGet+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
30009e40:	e51b3010 	ldr	r3, [fp, #-16]
30009e44:	e3530001 	cmp	r3, #1
30009e48:	1a000006 	bne	30009e68 <OSTaskNameGet+0x11c>
        OS_EXIT_CRITICAL();                              /* Yes                                        */
30009e4c:	e51b0008 	ldr	r0, [fp, #-8]
30009e50:	ebffd8b8 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_TASK_NOT_EXIST;
30009e54:	e51b3020 	ldr	r3, [fp, #-32]
30009e58:	e3a02043 	mov	r2, #67	; 0x43
30009e5c:	e5c32000 	strb	r2, [r3]
        return (0u);
30009e60:	e3a03000 	mov	r3, #0
30009e64:	ea00000f 	b	30009ea8 <OSTaskNameGet+0x15c>
    }
    *pname = ptcb->OSTCBTaskName;
30009e68:	e51b3010 	ldr	r3, [fp, #-16]
30009e6c:	e5932054 	ldr	r2, [r3, #84]	; 0x54
30009e70:	e51b301c 	ldr	r3, [fp, #-28]
30009e74:	e5832000 	str	r2, [r3]
    len    = OS_StrLen(*pname);
30009e78:	e51b301c 	ldr	r3, [fp, #-28]
30009e7c:	e5933000 	ldr	r3, [r3]
30009e80:	e1a00003 	mov	r0, r3
30009e84:	ebffe63f 	bl	30003788 <OS_StrLen>
30009e88:	e1a03000 	mov	r3, r0
30009e8c:	e54b3009 	strb	r3, [fp, #-9]
    OS_EXIT_CRITICAL();
30009e90:	e51b0008 	ldr	r0, [fp, #-8]
30009e94:	ebffd8a7 	bl	30000138 <OS_CPU_RestoreSR>
    *perr  = OS_ERR_NONE;
30009e98:	e51b3020 	ldr	r3, [fp, #-32]
30009e9c:	e3a02000 	mov	r2, #0
30009ea0:	e5c32000 	strb	r2, [r3]
    return (len);
30009ea4:	e55b3009 	ldrb	r3, [fp, #-9]
}
30009ea8:	e1a00003 	mov	r0, r3
30009eac:	e24bd004 	sub	sp, fp, #4
30009eb0:	e8bd4800 	pop	{fp, lr}
30009eb4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30009eb8:	30017bdc 	.word	0x30017bdc
30009ebc:	30017be0 	.word	0x30017be0
30009ec0:	300186d0 	.word	0x300186d0

30009ec4 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
30009ec4:	e92d4800 	push	{fp, lr}
30009ec8:	e28db004 	add	fp, sp, #4
30009ecc:	e24dd018 	sub	sp, sp, #24
30009ed0:	e1a03000 	mov	r3, r0
30009ed4:	e50b1014 	str	r1, [fp, #-20]
30009ed8:	e50b2018 	str	r2, [fp, #-24]
30009edc:	e54b300d 	strb	r3, [fp, #-13]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
30009ee0:	e3a03000 	mov	r3, #0
30009ee4:	e50b3008 	str	r3, [fp, #-8]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
30009ee8:	e55b300d 	ldrb	r3, [fp, #-13]
30009eec:	e353003f 	cmp	r3, #63	; 0x3f
30009ef0:	9a000006 	bls	30009f10 <OSTaskNameSet+0x4c>
        if (prio != OS_PRIO_SELF) {
30009ef4:	e55b300d 	ldrb	r3, [fp, #-13]
30009ef8:	e35300ff 	cmp	r3, #255	; 0xff
30009efc:	0a000003 	beq	30009f10 <OSTaskNameSet+0x4c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
30009f00:	e51b3018 	ldr	r3, [fp, #-24]
30009f04:	e3a0202a 	mov	r2, #42	; 0x2a
30009f08:	e5c32000 	strb	r2, [r3]
            return;
30009f0c:	ea000036 	b	30009fec <OSTaskNameSet+0x128>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
30009f10:	e51b3014 	ldr	r3, [fp, #-20]
30009f14:	e3530000 	cmp	r3, #0
30009f18:	1a000003 	bne	30009f2c <OSTaskNameSet+0x68>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
30009f1c:	e51b3018 	ldr	r3, [fp, #-24]
30009f20:	e3a0200c 	mov	r2, #12
30009f24:	e5c32000 	strb	r2, [r3]
        return;
30009f28:	ea00002f 	b	30009fec <OSTaskNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
30009f2c:	e59f30c4 	ldr	r3, [pc, #196]	; 30009ff8 <OSTaskNameSet+0x134>
30009f30:	e5d33000 	ldrb	r3, [r3]
30009f34:	e3530000 	cmp	r3, #0
30009f38:	0a000003 	beq	30009f4c <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
30009f3c:	e51b3018 	ldr	r3, [fp, #-24]
30009f40:	e3a02012 	mov	r2, #18
30009f44:	e5c32000 	strb	r2, [r3]
        return;
30009f48:	ea000027 	b	30009fec <OSTaskNameSet+0x128>
    }
    OS_ENTER_CRITICAL();
30009f4c:	ebffd871 	bl	30000118 <OS_CPU_SaveSR>
30009f50:	e1a03000 	mov	r3, r0
30009f54:	e50b3008 	str	r3, [fp, #-8]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
30009f58:	e55b300d 	ldrb	r3, [fp, #-13]
30009f5c:	e35300ff 	cmp	r3, #255	; 0xff
30009f60:	1a000003 	bne	30009f74 <OSTaskNameSet+0xb0>
        prio = OSTCBCur->OSTCBPrio;
30009f64:	e59f3090 	ldr	r3, [pc, #144]	; 30009ffc <OSTaskNameSet+0x138>
30009f68:	e5933000 	ldr	r3, [r3]
30009f6c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
30009f70:	e54b300d 	strb	r3, [fp, #-13]
    }
    ptcb = OSTCBPrioTbl[prio];
30009f74:	e55b200d 	ldrb	r2, [fp, #-13]
30009f78:	e59f3080 	ldr	r3, [pc, #128]	; 3000a000 <OSTaskNameSet+0x13c>
30009f7c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
30009f80:	e50b300c 	str	r3, [fp, #-12]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
30009f84:	e51b300c 	ldr	r3, [fp, #-12]
30009f88:	e3530000 	cmp	r3, #0
30009f8c:	1a000005 	bne	30009fa8 <OSTaskNameSet+0xe4>
        OS_EXIT_CRITICAL();                          /* No                                             */
30009f90:	e51b0008 	ldr	r0, [fp, #-8]
30009f94:	ebffd867 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_TASK_NOT_EXIST;
30009f98:	e51b3018 	ldr	r3, [fp, #-24]
30009f9c:	e3a02043 	mov	r2, #67	; 0x43
30009fa0:	e5c32000 	strb	r2, [r3]
        return;
30009fa4:	ea000010 	b	30009fec <OSTaskNameSet+0x128>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
30009fa8:	e51b300c 	ldr	r3, [fp, #-12]
30009fac:	e3530001 	cmp	r3, #1
30009fb0:	1a000005 	bne	30009fcc <OSTaskNameSet+0x108>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
30009fb4:	e51b0008 	ldr	r0, [fp, #-8]
30009fb8:	ebffd85e 	bl	30000138 <OS_CPU_RestoreSR>
        *perr = OS_ERR_TASK_NOT_EXIST;
30009fbc:	e51b3018 	ldr	r3, [fp, #-24]
30009fc0:	e3a02043 	mov	r2, #67	; 0x43
30009fc4:	e5c32000 	strb	r2, [r3]
        return;
30009fc8:	ea000007 	b	30009fec <OSTaskNameSet+0x128>
    }
    ptcb->OSTCBTaskName = pname;
30009fcc:	e51b300c 	ldr	r3, [fp, #-12]
30009fd0:	e51b2014 	ldr	r2, [fp, #-20]
30009fd4:	e5832054 	str	r2, [r3, #84]	; 0x54
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
30009fd8:	e51b0008 	ldr	r0, [fp, #-8]
30009fdc:	ebffd855 	bl	30000138 <OS_CPU_RestoreSR>
    *perr               = OS_ERR_NONE;
30009fe0:	e51b3018 	ldr	r3, [fp, #-24]
30009fe4:	e3a02000 	mov	r2, #0
30009fe8:	e5c32000 	strb	r2, [r3]
}
30009fec:	e24bd004 	sub	sp, fp, #4
30009ff0:	e8bd4800 	pop	{fp, lr}
30009ff4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
30009ff8:	30017bdc 	.word	0x30017bdc
30009ffc:	30017be0 	.word	0x30017be0
3000a000:	300186d0 	.word	0x300186d0

3000a004 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskResume (INT8U prio)
{
3000a004:	e92d4800 	push	{fp, lr}
3000a008:	e28db004 	add	fp, sp, #4
3000a00c:	e24dd010 	sub	sp, sp, #16
3000a010:	e1a03000 	mov	r3, r0
3000a014:	e54b300d 	strb	r3, [fp, #-13]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
3000a018:	e3a03000 	mov	r3, #0
3000a01c:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
3000a020:	e55b300d 	ldrb	r3, [fp, #-13]
3000a024:	e353003e 	cmp	r3, #62	; 0x3e
3000a028:	9a000001 	bls	3000a034 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
3000a02c:	e3a0302a 	mov	r3, #42	; 0x2a
3000a030:	ea00004f 	b	3000a174 <OSTaskResume+0x170>
    }
#endif
    OS_ENTER_CRITICAL();
3000a034:	ebffd837 	bl	30000118 <OS_CPU_SaveSR>
3000a038:	e1a03000 	mov	r3, r0
3000a03c:	e50b3008 	str	r3, [fp, #-8]
    ptcb = OSTCBPrioTbl[prio];
3000a040:	e55b200d 	ldrb	r2, [fp, #-13]
3000a044:	e59f3138 	ldr	r3, [pc, #312]	; 3000a184 <OSTaskResume+0x180>
3000a048:	e7933102 	ldr	r3, [r3, r2, lsl #2]
3000a04c:	e50b300c 	str	r3, [fp, #-12]
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
3000a050:	e51b300c 	ldr	r3, [fp, #-12]
3000a054:	e3530000 	cmp	r3, #0
3000a058:	1a000003 	bne	3000a06c <OSTaskResume+0x68>
        OS_EXIT_CRITICAL();
3000a05c:	e51b0008 	ldr	r0, [fp, #-8]
3000a060:	ebffd834 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_RESUME_PRIO);
3000a064:	e3a03046 	mov	r3, #70	; 0x46
3000a068:	ea000041 	b	3000a174 <OSTaskResume+0x170>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
3000a06c:	e51b300c 	ldr	r3, [fp, #-12]
3000a070:	e3530001 	cmp	r3, #1
3000a074:	1a000003 	bne	3000a088 <OSTaskResume+0x84>
        OS_EXIT_CRITICAL();
3000a078:	e51b0008 	ldr	r0, [fp, #-8]
3000a07c:	ebffd82d 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);
3000a080:	e3a03043 	mov	r3, #67	; 0x43
3000a084:	ea00003a 	b	3000a174 <OSTaskResume+0x170>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
3000a088:	e51b300c 	ldr	r3, [fp, #-12]
3000a08c:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
3000a090:	e2033008 	and	r3, r3, #8
3000a094:	e3530000 	cmp	r3, #0
3000a098:	0a000032 	beq	3000a168 <OSTaskResume+0x164>
        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
3000a09c:	e51b300c 	ldr	r3, [fp, #-12]
3000a0a0:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
3000a0a4:	e20330f7 	and	r3, r3, #247	; 0xf7
3000a0a8:	e51b200c 	ldr	r2, [fp, #-12]
3000a0ac:	e5c23038 	strb	r3, [r2, #56]	; 0x38
        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
3000a0b0:	e51b300c 	ldr	r3, [fp, #-12]
3000a0b4:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
3000a0b8:	e2033037 	and	r3, r3, #55	; 0x37
3000a0bc:	e3530000 	cmp	r3, #0
3000a0c0:	1a000022 	bne	3000a150 <OSTaskResume+0x14c>
            if (ptcb->OSTCBDly == 0u) {
3000a0c4:	e51b300c 	ldr	r3, [fp, #-12]
3000a0c8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
3000a0cc:	e3530000 	cmp	r3, #0
3000a0d0:	1a00001b 	bne	3000a144 <OSTaskResume+0x140>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
3000a0d4:	e51b300c 	ldr	r3, [fp, #-12]
3000a0d8:	e5d3203e 	ldrb	r2, [r3, #62]	; 0x3e
3000a0dc:	e59f30a4 	ldr	r3, [pc, #164]	; 3000a188 <OSTaskResume+0x184>
3000a0e0:	e5d33000 	ldrb	r3, [r3]
3000a0e4:	e1823003 	orr	r3, r2, r3
3000a0e8:	e20320ff 	and	r2, r3, #255	; 0xff
3000a0ec:	e59f3094 	ldr	r3, [pc, #148]	; 3000a188 <OSTaskResume+0x184>
3000a0f0:	e5c32000 	strb	r2, [r3]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
3000a0f4:	e51b300c 	ldr	r3, [fp, #-12]
3000a0f8:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
3000a0fc:	e51b200c 	ldr	r2, [fp, #-12]
3000a100:	e5d2203c 	ldrb	r2, [r2, #60]	; 0x3c
3000a104:	e59f1080 	ldr	r1, [pc, #128]	; 3000a18c <OSTaskResume+0x188>
3000a108:	e7d11002 	ldrb	r1, [r1, r2]
3000a10c:	e51b200c 	ldr	r2, [fp, #-12]
3000a110:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
3000a114:	e1812002 	orr	r2, r1, r2
3000a118:	e20210ff 	and	r1, r2, #255	; 0xff
3000a11c:	e59f2068 	ldr	r2, [pc, #104]	; 3000a18c <OSTaskResume+0x188>
3000a120:	e7c21003 	strb	r1, [r2, r3]
                OS_TRACE_TASK_READY(ptcb);
                OS_EXIT_CRITICAL();
3000a124:	e51b0008 	ldr	r0, [fp, #-8]
3000a128:	ebffd802 	bl	30000138 <OS_CPU_RestoreSR>
                if (OSRunning == OS_TRUE) {
3000a12c:	e59f305c 	ldr	r3, [pc, #92]	; 3000a190 <OSTaskResume+0x18c>
3000a130:	e5d33000 	ldrb	r3, [r3]
3000a134:	e3530001 	cmp	r3, #1
3000a138:	1a000007 	bne	3000a15c <OSTaskResume+0x158>
                    OS_TRACE_TASK_RESUME(ptcb);
                    OS_Sched();                               /* Find new highest priority task        */
3000a13c:	ebffe541 	bl	30003648 <OS_Sched>
                }
            } else {
                OS_EXIT_CRITICAL();
3000a140:	ea000006 	b	3000a160 <OSTaskResume+0x15c>
3000a144:	e51b0008 	ldr	r0, [fp, #-8]
3000a148:	ebffd7fa 	bl	30000138 <OS_CPU_RestoreSR>
3000a14c:	ea000003 	b	3000a160 <OSTaskResume+0x15c>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
3000a150:	e51b0008 	ldr	r0, [fp, #-8]
3000a154:	ebffd7f7 	bl	30000138 <OS_CPU_RestoreSR>
3000a158:	ea000000 	b	3000a160 <OSTaskResume+0x15c>
                if (OSRunning == OS_TRUE) {
                    OS_TRACE_TASK_RESUME(ptcb);
                    OS_Sched();                               /* Find new highest priority task        */
                }
            } else {
                OS_EXIT_CRITICAL();
3000a15c:	e1a00000 	nop			; (mov r0, r0)
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
3000a160:	e3a03000 	mov	r3, #0
3000a164:	ea000002 	b	3000a174 <OSTaskResume+0x170>
    }
    OS_EXIT_CRITICAL();
3000a168:	e51b0008 	ldr	r0, [fp, #-8]
3000a16c:	ebffd7f1 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_TASK_NOT_SUSPENDED);
3000a170:	e3a03044 	mov	r3, #68	; 0x44
}
3000a174:	e1a00003 	mov	r0, r3
3000a178:	e24bd004 	sub	sp, fp, #4
3000a17c:	e8bd4800 	pop	{fp, lr}
3000a180:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000a184:	300186d0 	.word	0x300186d0
3000a188:	300179cc 	.word	0x300179cc
3000a18c:	300179d0 	.word	0x300179d0
3000a190:	300173f1 	.word	0x300173f1

3000a194 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
3000a194:	e92d4800 	push	{fp, lr}
3000a198:	e28db004 	add	fp, sp, #4
3000a19c:	e24dd020 	sub	sp, sp, #32
3000a1a0:	e1a03000 	mov	r3, r0
3000a1a4:	e50b1024 	str	r1, [fp, #-36]	; 0x24
3000a1a8:	e54b301d 	strb	r3, [fp, #-29]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
3000a1ac:	e3a03000 	mov	r3, #0
3000a1b0:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
3000a1b4:	e55b301d 	ldrb	r3, [fp, #-29]
3000a1b8:	e353003f 	cmp	r3, #63	; 0x3f
3000a1bc:	9a000004 	bls	3000a1d4 <OSTaskStkChk+0x40>
        if (prio != OS_PRIO_SELF) {
3000a1c0:	e55b301d 	ldrb	r3, [fp, #-29]
3000a1c4:	e35300ff 	cmp	r3, #255	; 0xff
3000a1c8:	0a000001 	beq	3000a1d4 <OSTaskStkChk+0x40>
            return (OS_ERR_PRIO_INVALID);
3000a1cc:	e3a0302a 	mov	r3, #42	; 0x2a
3000a1d0:	ea000051 	b	3000a31c <OSTaskStkChk+0x188>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
3000a1d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000a1d8:	e3530000 	cmp	r3, #0
3000a1dc:	1a000001 	bne	3000a1e8 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
3000a1e0:	e3a03009 	mov	r3, #9
3000a1e4:	ea00004c 	b	3000a31c <OSTaskStkChk+0x188>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
3000a1e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000a1ec:	e3a02000 	mov	r2, #0
3000a1f0:	e5832000 	str	r2, [r3]
    p_stk_data->OSUsed = 0u;
3000a1f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000a1f8:	e3a02000 	mov	r2, #0
3000a1fc:	e5832004 	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
3000a200:	ebffd7c4 	bl	30000118 <OS_CPU_SaveSR>
3000a204:	e1a03000 	mov	r3, r0
3000a208:	e50b3008 	str	r3, [fp, #-8]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
3000a20c:	e55b301d 	ldrb	r3, [fp, #-29]
3000a210:	e35300ff 	cmp	r3, #255	; 0xff
3000a214:	1a000003 	bne	3000a228 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
3000a218:	e59f310c 	ldr	r3, [pc, #268]	; 3000a32c <OSTaskStkChk+0x198>
3000a21c:	e5933000 	ldr	r3, [r3]
3000a220:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
3000a224:	e54b301d 	strb	r3, [fp, #-29]
    }
    ptcb = OSTCBPrioTbl[prio];
3000a228:	e55b201d 	ldrb	r2, [fp, #-29]
3000a22c:	e59f30fc 	ldr	r3, [pc, #252]	; 3000a330 <OSTaskStkChk+0x19c>
3000a230:	e7933102 	ldr	r3, [r3, r2, lsl #2]
3000a234:	e50b3018 	str	r3, [fp, #-24]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
3000a238:	e51b3018 	ldr	r3, [fp, #-24]
3000a23c:	e3530000 	cmp	r3, #0
3000a240:	1a000003 	bne	3000a254 <OSTaskStkChk+0xc0>
        OS_EXIT_CRITICAL();
3000a244:	e51b0008 	ldr	r0, [fp, #-8]
3000a248:	ebffd7ba 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);
3000a24c:	e3a03043 	mov	r3, #67	; 0x43
3000a250:	ea000031 	b	3000a31c <OSTaskStkChk+0x188>
    }
    if (ptcb == OS_TCB_RESERVED) {
3000a254:	e51b3018 	ldr	r3, [fp, #-24]
3000a258:	e3530001 	cmp	r3, #1
3000a25c:	1a000003 	bne	3000a270 <OSTaskStkChk+0xdc>
        OS_EXIT_CRITICAL();
3000a260:	e51b0008 	ldr	r0, [fp, #-8]
3000a264:	ebffd7b3 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);
3000a268:	e3a03043 	mov	r3, #67	; 0x43
3000a26c:	ea00002a 	b	3000a31c <OSTaskStkChk+0x188>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
3000a270:	e51b3018 	ldr	r3, [fp, #-24]
3000a274:	e1d331b0 	ldrh	r3, [r3, #16]
3000a278:	e2033001 	and	r3, r3, #1
3000a27c:	e3530000 	cmp	r3, #0
3000a280:	1a000003 	bne	3000a294 <OSTaskStkChk+0x100>
        OS_EXIT_CRITICAL();
3000a284:	e51b0008 	ldr	r0, [fp, #-8]
3000a288:	ebffd7aa 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_OPT);
3000a28c:	e3a03045 	mov	r3, #69	; 0x45
3000a290:	ea000021 	b	3000a31c <OSTaskStkChk+0x188>
    }
    nfree = 0u;
3000a294:	e3a03000 	mov	r3, #0
3000a298:	e50b3010 	str	r3, [fp, #-16]
    size  = ptcb->OSTCBStkSize;
3000a29c:	e51b3018 	ldr	r3, [fp, #-24]
3000a2a0:	e593300c 	ldr	r3, [r3, #12]
3000a2a4:	e50b300c 	str	r3, [fp, #-12]
    pchk  = ptcb->OSTCBStkBottom;
3000a2a8:	e51b3018 	ldr	r3, [fp, #-24]
3000a2ac:	e5933008 	ldr	r3, [r3, #8]
3000a2b0:	e50b3014 	str	r3, [fp, #-20]
    OS_EXIT_CRITICAL();
3000a2b4:	e51b0008 	ldr	r0, [fp, #-8]
3000a2b8:	ebffd79e 	bl	30000138 <OS_CPU_RestoreSR>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
3000a2bc:	ea000002 	b	3000a2cc <OSTaskStkChk+0x138>
        nfree++;
3000a2c0:	e51b3010 	ldr	r3, [fp, #-16]
3000a2c4:	e2833001 	add	r3, r3, #1
3000a2c8:	e50b3010 	str	r3, [fp, #-16]
    nfree = 0u;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
3000a2cc:	e51b3014 	ldr	r3, [fp, #-20]
3000a2d0:	e5933000 	ldr	r3, [r3]
3000a2d4:	e3530000 	cmp	r3, #0
3000a2d8:	13a03000 	movne	r3, #0
3000a2dc:	03a03001 	moveq	r3, #1
3000a2e0:	e20330ff 	and	r3, r3, #255	; 0xff
3000a2e4:	e51b2014 	ldr	r2, [fp, #-20]
3000a2e8:	e2822004 	add	r2, r2, #4
3000a2ec:	e50b2014 	str	r2, [fp, #-20]
3000a2f0:	e3530000 	cmp	r3, #0
3000a2f4:	1afffff1 	bne	3000a2c0 <OSTaskStkChk+0x12c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
3000a2f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000a2fc:	e51b2010 	ldr	r2, [fp, #-16]
3000a300:	e5832000 	str	r2, [r3]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
3000a304:	e51b200c 	ldr	r2, [fp, #-12]
3000a308:	e51b3010 	ldr	r3, [fp, #-16]
3000a30c:	e0632002 	rsb	r2, r3, r2
3000a310:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
3000a314:	e5832004 	str	r2, [r3, #4]
    return (OS_ERR_NONE);
3000a318:	e3a03000 	mov	r3, #0
}
3000a31c:	e1a00003 	mov	r0, r3
3000a320:	e24bd004 	sub	sp, fp, #4
3000a324:	e8bd4800 	pop	{fp, lr}
3000a328:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000a32c:	30017be0 	.word	0x30017be0
3000a330:	300186d0 	.word	0x300186d0

3000a334 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
3000a334:	e92d4800 	push	{fp, lr}
3000a338:	e28db004 	add	fp, sp, #4
3000a33c:	e24dd018 	sub	sp, sp, #24
3000a340:	e1a03000 	mov	r3, r0
3000a344:	e54b3015 	strb	r3, [fp, #-21]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
3000a348:	e3a03000 	mov	r3, #0
3000a34c:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
3000a350:	e55b3015 	ldrb	r3, [fp, #-21]
3000a354:	e353003f 	cmp	r3, #63	; 0x3f
3000a358:	1a000001 	bne	3000a364 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
3000a35c:	e3a03047 	mov	r3, #71	; 0x47
3000a360:	ea00005c 	b	3000a4d8 <OSTaskSuspend+0x1a4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
3000a364:	e55b3015 	ldrb	r3, [fp, #-21]
3000a368:	e353003e 	cmp	r3, #62	; 0x3e
3000a36c:	9a000004 	bls	3000a384 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
3000a370:	e55b3015 	ldrb	r3, [fp, #-21]
3000a374:	e35300ff 	cmp	r3, #255	; 0xff
3000a378:	0a000001 	beq	3000a384 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
3000a37c:	e3a0302a 	mov	r3, #42	; 0x2a
3000a380:	ea000054 	b	3000a4d8 <OSTaskSuspend+0x1a4>
        }
    }
#endif
    OS_ENTER_CRITICAL();
3000a384:	ebffd763 	bl	30000118 <OS_CPU_SaveSR>
3000a388:	e1a03000 	mov	r3, r0
3000a38c:	e50b3008 	str	r3, [fp, #-8]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
3000a390:	e55b3015 	ldrb	r3, [fp, #-21]
3000a394:	e35300ff 	cmp	r3, #255	; 0xff
3000a398:	1a000006 	bne	3000a3b8 <OSTaskSuspend+0x84>
        prio = OSTCBCur->OSTCBPrio;
3000a39c:	e59f3144 	ldr	r3, [pc, #324]	; 3000a4e8 <OSTaskSuspend+0x1b4>
3000a3a0:	e5933000 	ldr	r3, [r3]
3000a3a4:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
3000a3a8:	e54b3015 	strb	r3, [fp, #-21]
        self = OS_TRUE;
3000a3ac:	e3a03001 	mov	r3, #1
3000a3b0:	e54b3011 	strb	r3, [fp, #-17]
3000a3b4:	ea00000a 	b	3000a3e4 <OSTaskSuspend+0xb0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
3000a3b8:	e59f3128 	ldr	r3, [pc, #296]	; 3000a4e8 <OSTaskSuspend+0x1b4>
3000a3bc:	e5933000 	ldr	r3, [r3]
3000a3c0:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
3000a3c4:	e55b2015 	ldrb	r2, [fp, #-21]
3000a3c8:	e1520003 	cmp	r2, r3
3000a3cc:	1a000002 	bne	3000a3dc <OSTaskSuspend+0xa8>
        self = OS_TRUE;
3000a3d0:	e3a03001 	mov	r3, #1
3000a3d4:	e54b3011 	strb	r3, [fp, #-17]
3000a3d8:	ea000001 	b	3000a3e4 <OSTaskSuspend+0xb0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
3000a3dc:	e3a03000 	mov	r3, #0
3000a3e0:	e54b3011 	strb	r3, [fp, #-17]
    }
    ptcb = OSTCBPrioTbl[prio];
3000a3e4:	e55b2015 	ldrb	r2, [fp, #-21]
3000a3e8:	e59f30fc 	ldr	r3, [pc, #252]	; 3000a4ec <OSTaskSuspend+0x1b8>
3000a3ec:	e7933102 	ldr	r3, [r3, r2, lsl #2]
3000a3f0:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
3000a3f4:	e51b3010 	ldr	r3, [fp, #-16]
3000a3f8:	e3530000 	cmp	r3, #0
3000a3fc:	1a000003 	bne	3000a410 <OSTaskSuspend+0xdc>
        OS_EXIT_CRITICAL();
3000a400:	e51b0008 	ldr	r0, [fp, #-8]
3000a404:	ebffd74b 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_SUSPEND_PRIO);
3000a408:	e3a03048 	mov	r3, #72	; 0x48
3000a40c:	ea000031 	b	3000a4d8 <OSTaskSuspend+0x1a4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
3000a410:	e51b3010 	ldr	r3, [fp, #-16]
3000a414:	e3530001 	cmp	r3, #1
3000a418:	1a000003 	bne	3000a42c <OSTaskSuspend+0xf8>
        OS_EXIT_CRITICAL();
3000a41c:	e51b0008 	ldr	r0, [fp, #-8]
3000a420:	ebffd744 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);
3000a424:	e3a03043 	mov	r3, #67	; 0x43
3000a428:	ea00002a 	b	3000a4d8 <OSTaskSuspend+0x1a4>
    }
    y            = ptcb->OSTCBY;
3000a42c:	e51b3010 	ldr	r3, [fp, #-16]
3000a430:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
3000a434:	e54b3009 	strb	r3, [fp, #-9]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
3000a438:	e55b3009 	ldrb	r3, [fp, #-9]
3000a43c:	e55b2009 	ldrb	r2, [fp, #-9]
3000a440:	e59f10a8 	ldr	r1, [pc, #168]	; 3000a4f0 <OSTaskSuspend+0x1bc>
3000a444:	e7d11002 	ldrb	r1, [r1, r2]
3000a448:	e51b2010 	ldr	r2, [fp, #-16]
3000a44c:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
3000a450:	e1e02002 	mvn	r2, r2
3000a454:	e20220ff 	and	r2, r2, #255	; 0xff
3000a458:	e0012002 	and	r2, r1, r2
3000a45c:	e20210ff 	and	r1, r2, #255	; 0xff
3000a460:	e59f2088 	ldr	r2, [pc, #136]	; 3000a4f0 <OSTaskSuspend+0x1bc>
3000a464:	e7c21003 	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
3000a468:	e55b3009 	ldrb	r3, [fp, #-9]
3000a46c:	e59f207c 	ldr	r2, [pc, #124]	; 3000a4f0 <OSTaskSuspend+0x1bc>
3000a470:	e7d23003 	ldrb	r3, [r2, r3]
3000a474:	e3530000 	cmp	r3, #0
3000a478:	1a000009 	bne	3000a4a4 <OSTaskSuspend+0x170>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
3000a47c:	e51b3010 	ldr	r3, [fp, #-16]
3000a480:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
3000a484:	e1e03003 	mvn	r3, r3
3000a488:	e20320ff 	and	r2, r3, #255	; 0xff
3000a48c:	e59f3060 	ldr	r3, [pc, #96]	; 3000a4f4 <OSTaskSuspend+0x1c0>
3000a490:	e5d33000 	ldrb	r3, [r3]
3000a494:	e0023003 	and	r3, r2, r3
3000a498:	e20320ff 	and	r2, r3, #255	; 0xff
3000a49c:	e59f3050 	ldr	r3, [pc, #80]	; 3000a4f4 <OSTaskSuspend+0x1c0>
3000a4a0:	e5c32000 	strb	r2, [r3]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
3000a4a4:	e51b3010 	ldr	r3, [fp, #-16]
3000a4a8:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
3000a4ac:	e3833008 	orr	r3, r3, #8
3000a4b0:	e20320ff 	and	r2, r3, #255	; 0xff
3000a4b4:	e51b3010 	ldr	r3, [fp, #-16]
3000a4b8:	e5c32038 	strb	r2, [r3, #56]	; 0x38
    OS_EXIT_CRITICAL();
3000a4bc:	e51b0008 	ldr	r0, [fp, #-8]
3000a4c0:	ebffd71c 	bl	30000138 <OS_CPU_RestoreSR>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
3000a4c4:	e55b3011 	ldrb	r3, [fp, #-17]
3000a4c8:	e3530001 	cmp	r3, #1
3000a4cc:	1a000000 	bne	3000a4d4 <OSTaskSuspend+0x1a0>
        OS_Sched();                                             /* Find new highest priority task      */
3000a4d0:	ebffe45c 	bl	30003648 <OS_Sched>
    }
    return (OS_ERR_NONE);
3000a4d4:	e3a03000 	mov	r3, #0
}
3000a4d8:	e1a00003 	mov	r0, r3
3000a4dc:	e24bd004 	sub	sp, fp, #4
3000a4e0:	e8bd4800 	pop	{fp, lr}
3000a4e4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000a4e8:	30017be0 	.word	0x30017be0
3000a4ec:	300186d0 	.word	0x300186d0
3000a4f0:	300179d0 	.word	0x300179d0
3000a4f4:	300179cc 	.word	0x300179cc

3000a4f8 <OSTaskQuery>:
*/

#if OS_TASK_QUERY_EN > 0u
INT8U  OSTaskQuery (INT8U    prio,
                    OS_TCB  *p_task_data)
{
3000a4f8:	e92d4800 	push	{fp, lr}
3000a4fc:	e28db004 	add	fp, sp, #4
3000a500:	e24dd010 	sub	sp, sp, #16
3000a504:	e1a03000 	mov	r3, r0
3000a508:	e50b1014 	str	r1, [fp, #-20]
3000a50c:	e54b300d 	strb	r3, [fp, #-13]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
3000a510:	e3a03000 	mov	r3, #0
3000a514:	e50b3008 	str	r3, [fp, #-8]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
3000a518:	e55b300d 	ldrb	r3, [fp, #-13]
3000a51c:	e353003f 	cmp	r3, #63	; 0x3f
3000a520:	9a000004 	bls	3000a538 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
3000a524:	e55b300d 	ldrb	r3, [fp, #-13]
3000a528:	e35300ff 	cmp	r3, #255	; 0xff
3000a52c:	0a000001 	beq	3000a538 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
3000a530:	e3a0302a 	mov	r3, #42	; 0x2a
3000a534:	ea000029 	b	3000a5e0 <OSTaskQuery+0xe8>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
3000a538:	e51b3014 	ldr	r3, [fp, #-20]
3000a53c:	e3530000 	cmp	r3, #0
3000a540:	1a000001 	bne	3000a54c <OSTaskQuery+0x54>
        return (OS_ERR_PDATA_NULL);
3000a544:	e3a03009 	mov	r3, #9
3000a548:	ea000024 	b	3000a5e0 <OSTaskQuery+0xe8>
    }
#endif
    OS_ENTER_CRITICAL();
3000a54c:	ebffd6f1 	bl	30000118 <OS_CPU_SaveSR>
3000a550:	e1a03000 	mov	r3, r0
3000a554:	e50b3008 	str	r3, [fp, #-8]
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
3000a558:	e55b300d 	ldrb	r3, [fp, #-13]
3000a55c:	e35300ff 	cmp	r3, #255	; 0xff
3000a560:	1a000003 	bne	3000a574 <OSTaskQuery+0x7c>
        prio = OSTCBCur->OSTCBPrio;
3000a564:	e59f3084 	ldr	r3, [pc, #132]	; 3000a5f0 <OSTaskQuery+0xf8>
3000a568:	e5933000 	ldr	r3, [r3]
3000a56c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
3000a570:	e54b300d 	strb	r3, [fp, #-13]
    }
    ptcb = OSTCBPrioTbl[prio];
3000a574:	e55b200d 	ldrb	r2, [fp, #-13]
3000a578:	e59f3074 	ldr	r3, [pc, #116]	; 3000a5f4 <OSTaskQuery+0xfc>
3000a57c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
3000a580:	e50b300c 	str	r3, [fp, #-12]
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
3000a584:	e51b300c 	ldr	r3, [fp, #-12]
3000a588:	e3530000 	cmp	r3, #0
3000a58c:	1a000003 	bne	3000a5a0 <OSTaskQuery+0xa8>
        OS_EXIT_CRITICAL();
3000a590:	e51b0008 	ldr	r0, [fp, #-8]
3000a594:	ebffd6e7 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_PRIO);
3000a598:	e3a03029 	mov	r3, #41	; 0x29
3000a59c:	ea00000f 	b	3000a5e0 <OSTaskQuery+0xe8>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
3000a5a0:	e51b300c 	ldr	r3, [fp, #-12]
3000a5a4:	e3530001 	cmp	r3, #1
3000a5a8:	1a000003 	bne	3000a5bc <OSTaskQuery+0xc4>
        OS_EXIT_CRITICAL();
3000a5ac:	e51b0008 	ldr	r0, [fp, #-8]
3000a5b0:	ebffd6e0 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);
3000a5b4:	e3a03043 	mov	r3, #67	; 0x43
3000a5b8:	ea000008 	b	3000a5e0 <OSTaskQuery+0xe8>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
3000a5bc:	e51b2014 	ldr	r2, [fp, #-20]
3000a5c0:	e51b300c 	ldr	r3, [fp, #-12]
3000a5c4:	e1a00002 	mov	r0, r2
3000a5c8:	e1a01003 	mov	r1, r3
3000a5cc:	e3a0205c 	mov	r2, #92	; 0x5c
3000a5d0:	ebffe401 	bl	300035dc <OS_MemCopy>
    OS_EXIT_CRITICAL();
3000a5d4:	e51b0008 	ldr	r0, [fp, #-8]
3000a5d8:	ebffd6d6 	bl	30000138 <OS_CPU_RestoreSR>
    return (OS_ERR_NONE);
3000a5dc:	e3a03000 	mov	r3, #0
}
3000a5e0:	e1a00003 	mov	r0, r3
3000a5e4:	e24bd004 	sub	sp, fp, #4
3000a5e8:	e8bd4800 	pop	{fp, lr}
3000a5ec:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000a5f0:	30017be0 	.word	0x30017be0
3000a5f4:	300186d0 	.word	0x300186d0

3000a5f8 <OSTaskRegGet>:

#if OS_TASK_REG_TBL_SIZE > 0u
INT32U  OSTaskRegGet (INT8U   prio,
                      INT8U   id,
                      INT8U  *perr)
{
3000a5f8:	e92d4800 	push	{fp, lr}
3000a5fc:	e28db004 	add	fp, sp, #4
3000a600:	e24dd018 	sub	sp, sp, #24
3000a604:	e1a03001 	mov	r3, r1
3000a608:	e50b201c 	str	r2, [fp, #-28]
3000a60c:	e1a02000 	mov	r2, r0
3000a610:	e54b2015 	strb	r2, [fp, #-21]
3000a614:	e54b3016 	strb	r3, [fp, #-22]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
3000a618:	e3a03000 	mov	r3, #0
3000a61c:	e50b3010 	str	r3, [fp, #-16]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {
3000a620:	e55b3015 	ldrb	r3, [fp, #-21]
3000a624:	e353003e 	cmp	r3, #62	; 0x3e
3000a628:	9a000007 	bls	3000a64c <OSTaskRegGet+0x54>
        if (prio != OS_PRIO_SELF) {
3000a62c:	e55b3015 	ldrb	r3, [fp, #-21]
3000a630:	e35300ff 	cmp	r3, #255	; 0xff
3000a634:	0a000004 	beq	3000a64c <OSTaskRegGet+0x54>
            *perr = OS_ERR_PRIO_INVALID;
3000a638:	e51b301c 	ldr	r3, [fp, #-28]
3000a63c:	e3a0202a 	mov	r2, #42	; 0x2a
3000a640:	e5c32000 	strb	r2, [r3]
            return (0u);
3000a644:	e3a03000 	mov	r3, #0
3000a648:	ea000020 	b	3000a6d0 <OSTaskRegGet+0xd8>
        }
    }
    if (id >= OS_TASK_REG_TBL_SIZE) {
3000a64c:	e55b3016 	ldrb	r3, [fp, #-22]
3000a650:	e3530000 	cmp	r3, #0
3000a654:	0a000004 	beq	3000a66c <OSTaskRegGet+0x74>
        *perr = OS_ERR_ID_INVALID;
3000a658:	e51b301c 	ldr	r3, [fp, #-28]
3000a65c:	e3a02008 	mov	r2, #8
3000a660:	e5c32000 	strb	r2, [r3]
        return (0u);
3000a664:	e3a03000 	mov	r3, #0
3000a668:	ea000018 	b	3000a6d0 <OSTaskRegGet+0xd8>
    }
#endif
    OS_ENTER_CRITICAL();
3000a66c:	ebffd6a9 	bl	30000118 <OS_CPU_SaveSR>
3000a670:	e1a03000 	mov	r3, r0
3000a674:	e50b3010 	str	r3, [fp, #-16]
    if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
3000a678:	e55b3015 	ldrb	r3, [fp, #-21]
3000a67c:	e35300ff 	cmp	r3, #255	; 0xff
3000a680:	1a000003 	bne	3000a694 <OSTaskRegGet+0x9c>
        ptcb = OSTCBCur;
3000a684:	e59f3054 	ldr	r3, [pc, #84]	; 3000a6e0 <OSTaskRegGet+0xe8>
3000a688:	e5933000 	ldr	r3, [r3]
3000a68c:	e50b3008 	str	r3, [fp, #-8]
3000a690:	ea000003 	b	3000a6a4 <OSTaskRegGet+0xac>
    } else {
        ptcb = OSTCBPrioTbl[prio];
3000a694:	e55b2015 	ldrb	r2, [fp, #-21]
3000a698:	e59f3044 	ldr	r3, [pc, #68]	; 3000a6e4 <OSTaskRegGet+0xec>
3000a69c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
3000a6a0:	e50b3008 	str	r3, [fp, #-8]
    }
    value = ptcb->OSTCBRegTbl[id];
3000a6a4:	e55b2016 	ldrb	r2, [fp, #-22]
3000a6a8:	e51b3008 	ldr	r3, [fp, #-8]
3000a6ac:	e2822016 	add	r2, r2, #22
3000a6b0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
3000a6b4:	e50b300c 	str	r3, [fp, #-12]
    OS_EXIT_CRITICAL();
3000a6b8:	e51b0010 	ldr	r0, [fp, #-16]
3000a6bc:	ebffd69d 	bl	30000138 <OS_CPU_RestoreSR>
    *perr = OS_ERR_NONE;
3000a6c0:	e51b301c 	ldr	r3, [fp, #-28]
3000a6c4:	e3a02000 	mov	r2, #0
3000a6c8:	e5c32000 	strb	r2, [r3]
    return (value);
3000a6cc:	e51b300c 	ldr	r3, [fp, #-12]
}
3000a6d0:	e1a00003 	mov	r0, r3
3000a6d4:	e24bd004 	sub	sp, fp, #4
3000a6d8:	e8bd4800 	pop	{fp, lr}
3000a6dc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000a6e0:	30017be0 	.word	0x30017be0
3000a6e4:	300186d0 	.word	0x300186d0

3000a6e8 <OSTaskRegGetID>:
************************************************************************************************************************
*/

#if OS_TASK_REG_TBL_SIZE > 0u
INT8U  OSTaskRegGetID (INT8U  *perr)
{
3000a6e8:	e92d4800 	push	{fp, lr}
3000a6ec:	e28db004 	add	fp, sp, #4
3000a6f0:	e24dd010 	sub	sp, sp, #16
3000a6f4:	e50b0010 	str	r0, [fp, #-16]
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
3000a6f8:	e3a03000 	mov	r3, #0
3000a6fc:	e50b300c 	str	r3, [fp, #-12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((INT8U)OS_TASK_REG_TBL_SIZE);
    }
#endif

    OS_ENTER_CRITICAL();
3000a700:	ebffd684 	bl	30000118 <OS_CPU_SaveSR>
3000a704:	e1a03000 	mov	r3, r0
3000a708:	e50b300c 	str	r3, [fp, #-12]
    if (OSTaskRegNextAvailID >= OS_TASK_REG_TBL_SIZE) {         /* See if we exceeded the number of IDs available     */
3000a70c:	e59f3070 	ldr	r3, [pc, #112]	; 3000a784 <OSTaskRegGetID+0x9c>
3000a710:	e5d33000 	ldrb	r3, [r3]
3000a714:	e3530000 	cmp	r3, #0
3000a718:	0a000006 	beq	3000a738 <OSTaskRegGetID+0x50>
       *perr = OS_ERR_NO_MORE_ID_AVAIL;                         /* Yes, cannot allocate more task register IDs        */
3000a71c:	e51b3010 	ldr	r3, [fp, #-16]
3000a720:	e3e02069 	mvn	r2, #105	; 0x69
3000a724:	e5c32000 	strb	r2, [r3]
        OS_EXIT_CRITICAL();
3000a728:	e51b000c 	ldr	r0, [fp, #-12]
3000a72c:	ebffd681 	bl	30000138 <OS_CPU_RestoreSR>
        return ((INT8U)OS_TASK_REG_TBL_SIZE);
3000a730:	e3a03001 	mov	r3, #1
3000a734:	ea00000e 	b	3000a774 <OSTaskRegGetID+0x8c>
    }

    id   = OSTaskRegNextAvailID;                                /* Assign the next available ID                       */
3000a738:	e59f3044 	ldr	r3, [pc, #68]	; 3000a784 <OSTaskRegGetID+0x9c>
3000a73c:	e5d33000 	ldrb	r3, [r3]
3000a740:	e54b3005 	strb	r3, [fp, #-5]
    OSTaskRegNextAvailID++;                                     /* Increment available ID for next request            */
3000a744:	e59f3038 	ldr	r3, [pc, #56]	; 3000a784 <OSTaskRegGetID+0x9c>
3000a748:	e5d33000 	ldrb	r3, [r3]
3000a74c:	e2833001 	add	r3, r3, #1
3000a750:	e20320ff 	and	r2, r3, #255	; 0xff
3000a754:	e59f3028 	ldr	r3, [pc, #40]	; 3000a784 <OSTaskRegGetID+0x9c>
3000a758:	e5c32000 	strb	r2, [r3]
    OS_EXIT_CRITICAL();
3000a75c:	e51b000c 	ldr	r0, [fp, #-12]
3000a760:	ebffd674 	bl	30000138 <OS_CPU_RestoreSR>
   *perr = OS_ERR_NONE;
3000a764:	e51b3010 	ldr	r3, [fp, #-16]
3000a768:	e3a02000 	mov	r2, #0
3000a76c:	e5c32000 	strb	r2, [r3]
    return (id);
3000a770:	e55b3005 	ldrb	r3, [fp, #-5]
}
3000a774:	e1a00003 	mov	r0, r3
3000a778:	e24bd004 	sub	sp, fp, #4
3000a77c:	e8bd4800 	pop	{fp, lr}
3000a780:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000a784:	300173f0 	.word	0x300173f0

3000a788 <OSTaskRegSet>:
#if OS_TASK_REG_TBL_SIZE > 0u
void  OSTaskRegSet (INT8U    prio,
                    INT8U    id,
                    INT32U   value,
                    INT8U   *perr)
{
3000a788:	e92d4800 	push	{fp, lr}
3000a78c:	e28db004 	add	fp, sp, #4
3000a790:	e24dd018 	sub	sp, sp, #24
3000a794:	e50b2014 	str	r2, [fp, #-20]
3000a798:	e50b3018 	str	r3, [fp, #-24]
3000a79c:	e1a03000 	mov	r3, r0
3000a7a0:	e54b300d 	strb	r3, [fp, #-13]
3000a7a4:	e1a03001 	mov	r3, r1
3000a7a8:	e54b300e 	strb	r3, [fp, #-14]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
3000a7ac:	e3a03000 	mov	r3, #0
3000a7b0:	e50b300c 	str	r3, [fp, #-12]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {
3000a7b4:	e55b300d 	ldrb	r3, [fp, #-13]
3000a7b8:	e353003e 	cmp	r3, #62	; 0x3e
3000a7bc:	9a000006 	bls	3000a7dc <OSTaskRegSet+0x54>
        if (prio != OS_PRIO_SELF) {
3000a7c0:	e55b300d 	ldrb	r3, [fp, #-13]
3000a7c4:	e35300ff 	cmp	r3, #255	; 0xff
3000a7c8:	0a000003 	beq	3000a7dc <OSTaskRegSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;
3000a7cc:	e51b3018 	ldr	r3, [fp, #-24]
3000a7d0:	e3a0202a 	mov	r2, #42	; 0x2a
3000a7d4:	e5c32000 	strb	r2, [r3]
            return;
3000a7d8:	ea00001e 	b	3000a858 <OSTaskRegSet+0xd0>
        }
    }
    if (id >= OS_TASK_REG_TBL_SIZE) {
3000a7dc:	e55b300e 	ldrb	r3, [fp, #-14]
3000a7e0:	e3530000 	cmp	r3, #0
3000a7e4:	0a000003 	beq	3000a7f8 <OSTaskRegSet+0x70>
        *perr = OS_ERR_ID_INVALID;
3000a7e8:	e51b3018 	ldr	r3, [fp, #-24]
3000a7ec:	e3a02008 	mov	r2, #8
3000a7f0:	e5c32000 	strb	r2, [r3]
        return;
3000a7f4:	ea000017 	b	3000a858 <OSTaskRegSet+0xd0>
    }
#endif
    OS_ENTER_CRITICAL();
3000a7f8:	ebffd646 	bl	30000118 <OS_CPU_SaveSR>
3000a7fc:	e1a03000 	mov	r3, r0
3000a800:	e50b300c 	str	r3, [fp, #-12]
    if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
3000a804:	e55b300d 	ldrb	r3, [fp, #-13]
3000a808:	e35300ff 	cmp	r3, #255	; 0xff
3000a80c:	1a000003 	bne	3000a820 <OSTaskRegSet+0x98>
        ptcb = OSTCBCur;
3000a810:	e59f304c 	ldr	r3, [pc, #76]	; 3000a864 <OSTaskRegSet+0xdc>
3000a814:	e5933000 	ldr	r3, [r3]
3000a818:	e50b3008 	str	r3, [fp, #-8]
3000a81c:	ea000003 	b	3000a830 <OSTaskRegSet+0xa8>
    } else {
        ptcb = OSTCBPrioTbl[prio];
3000a820:	e55b200d 	ldrb	r2, [fp, #-13]
3000a824:	e59f303c 	ldr	r3, [pc, #60]	; 3000a868 <OSTaskRegSet+0xe0>
3000a828:	e7933102 	ldr	r3, [r3, r2, lsl #2]
3000a82c:	e50b3008 	str	r3, [fp, #-8]
    }
    ptcb->OSTCBRegTbl[id] = value;
3000a830:	e55b200e 	ldrb	r2, [fp, #-14]
3000a834:	e51b3008 	ldr	r3, [fp, #-8]
3000a838:	e2822016 	add	r2, r2, #22
3000a83c:	e51b1014 	ldr	r1, [fp, #-20]
3000a840:	e7831102 	str	r1, [r3, r2, lsl #2]
    OS_EXIT_CRITICAL();
3000a844:	e51b000c 	ldr	r0, [fp, #-12]
3000a848:	ebffd63a 	bl	30000138 <OS_CPU_RestoreSR>
    *perr                 = OS_ERR_NONE;
3000a84c:	e51b3018 	ldr	r3, [fp, #-24]
3000a850:	e3a02000 	mov	r2, #0
3000a854:	e5c32000 	strb	r2, [r3]
}
3000a858:	e24bd004 	sub	sp, fp, #4
3000a85c:	e8bd4800 	pop	{fp, lr}
3000a860:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000a864:	30017be0 	.word	0x30017be0
3000a868:	300186d0 	.word	0x300186d0

3000a86c <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
3000a86c:	e92d4800 	push	{fp, lr}
3000a870:	e28db004 	add	fp, sp, #4
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
3000a874:	e59f301c 	ldr	r3, [pc, #28]	; 3000a898 <OS_TaskReturn+0x2c>
3000a878:	e5933000 	ldr	r3, [r3]
3000a87c:	e1a00003 	mov	r0, r3
3000a880:	ebffdccc 	bl	30001bb8 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
3000a884:	e3a000ff 	mov	r0, #255	; 0xff
3000a888:	ebfffc17 	bl	300098ec <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
3000a88c:	e24bd004 	sub	sp, fp, #4
3000a890:	e8bd4800 	pop	{fp, lr}
3000a894:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000a898:	30017be0 	.word	0x30017be0

3000a89c <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
3000a89c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
3000a8a0:	e28db000 	add	fp, sp, #0
3000a8a4:	e24dd014 	sub	sp, sp, #20
3000a8a8:	e50b0008 	str	r0, [fp, #-8]
3000a8ac:	e50b100c 	str	r1, [fp, #-12]
3000a8b0:	e1a03002 	mov	r3, r2
3000a8b4:	e14b30be 	strh	r3, [fp, #-14]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
3000a8b8:	e15b30be 	ldrh	r3, [fp, #-14]
3000a8bc:	e2033001 	and	r3, r3, #1
3000a8c0:	e20330ff 	and	r3, r3, #255	; 0xff
3000a8c4:	e3530000 	cmp	r3, #0
3000a8c8:	0a000010 	beq	3000a910 <OS_TaskStkClr+0x74>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
3000a8cc:	e15b30be 	ldrh	r3, [fp, #-14]
3000a8d0:	e2033002 	and	r3, r3, #2
3000a8d4:	e3530000 	cmp	r3, #0
3000a8d8:	0a00000c 	beq	3000a910 <OS_TaskStkClr+0x74>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
3000a8dc:	ea000008 	b	3000a904 <OS_TaskStkClr+0x68>
                size--;
3000a8e0:	e51b300c 	ldr	r3, [fp, #-12]
3000a8e4:	e2433001 	sub	r3, r3, #1
3000a8e8:	e50b300c 	str	r3, [fp, #-12]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
3000a8ec:	e51b3008 	ldr	r3, [fp, #-8]
3000a8f0:	e3a02000 	mov	r2, #0
3000a8f4:	e5832000 	str	r2, [r3]
3000a8f8:	e51b3008 	ldr	r3, [fp, #-8]
3000a8fc:	e2833004 	add	r3, r3, #4
3000a900:	e50b3008 	str	r3, [fp, #-8]
                     INT16U   opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
3000a904:	e51b300c 	ldr	r3, [fp, #-12]
3000a908:	e3530000 	cmp	r3, #0
3000a90c:	1afffff3 	bne	3000a8e0 <OS_TaskStkClr+0x44>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
3000a910:	e28bd000 	add	sp, fp, #0
3000a914:	e8bd0800 	pop	{fp}
3000a918:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

3000a91c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
3000a91c:	e92d4800 	push	{fp, lr}
3000a920:	e28db004 	add	fp, sp, #4
3000a924:	e24dd010 	sub	sp, sp, #16
3000a928:	e50b0010 	str	r0, [fp, #-16]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
3000a92c:	e3a03000 	mov	r3, #0
3000a930:	e50b3008 	str	r3, [fp, #-8]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
3000a934:	e59f30ec 	ldr	r3, [pc, #236]	; 3000aa28 <OSTimeDly+0x10c>
3000a938:	e5d33000 	ldrb	r3, [r3]
3000a93c:	e3530000 	cmp	r3, #0
3000a940:	1a000032 	bne	3000aa10 <OSTimeDly+0xf4>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
3000a944:	e59f30e0 	ldr	r3, [pc, #224]	; 3000aa2c <OSTimeDly+0x110>
3000a948:	e5d33000 	ldrb	r3, [r3]
3000a94c:	e3530000 	cmp	r3, #0
3000a950:	1a000030 	bne	3000aa18 <OSTimeDly+0xfc>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
3000a954:	e51b3010 	ldr	r3, [fp, #-16]
3000a958:	e3530000 	cmp	r3, #0
3000a95c:	0a00002e 	beq	3000aa1c <OSTimeDly+0x100>
        OS_ENTER_CRITICAL();
3000a960:	ebffd5ec 	bl	30000118 <OS_CPU_SaveSR>
3000a964:	e1a03000 	mov	r3, r0
3000a968:	e50b3008 	str	r3, [fp, #-8]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
3000a96c:	e59f30bc 	ldr	r3, [pc, #188]	; 3000aa30 <OSTimeDly+0x114>
3000a970:	e5933000 	ldr	r3, [r3]
3000a974:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
3000a978:	e54b3009 	strb	r3, [fp, #-9]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
3000a97c:	e55b3009 	ldrb	r3, [fp, #-9]
3000a980:	e55b2009 	ldrb	r2, [fp, #-9]
3000a984:	e59f10a8 	ldr	r1, [pc, #168]	; 3000aa34 <OSTimeDly+0x118>
3000a988:	e7d11002 	ldrb	r1, [r1, r2]
3000a98c:	e59f209c 	ldr	r2, [pc, #156]	; 3000aa30 <OSTimeDly+0x114>
3000a990:	e5922000 	ldr	r2, [r2]
3000a994:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
3000a998:	e1e02002 	mvn	r2, r2
3000a99c:	e20220ff 	and	r2, r2, #255	; 0xff
3000a9a0:	e0012002 	and	r2, r1, r2
3000a9a4:	e20210ff 	and	r1, r2, #255	; 0xff
3000a9a8:	e59f2084 	ldr	r2, [pc, #132]	; 3000aa34 <OSTimeDly+0x118>
3000a9ac:	e7c21003 	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
3000a9b0:	e55b3009 	ldrb	r3, [fp, #-9]
3000a9b4:	e59f2078 	ldr	r2, [pc, #120]	; 3000aa34 <OSTimeDly+0x118>
3000a9b8:	e7d23003 	ldrb	r3, [r2, r3]
3000a9bc:	e3530000 	cmp	r3, #0
3000a9c0:	1a00000a 	bne	3000a9f0 <OSTimeDly+0xd4>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
3000a9c4:	e59f3064 	ldr	r3, [pc, #100]	; 3000aa30 <OSTimeDly+0x114>
3000a9c8:	e5933000 	ldr	r3, [r3]
3000a9cc:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
3000a9d0:	e1e03003 	mvn	r3, r3
3000a9d4:	e20320ff 	and	r2, r3, #255	; 0xff
3000a9d8:	e59f3058 	ldr	r3, [pc, #88]	; 3000aa38 <OSTimeDly+0x11c>
3000a9dc:	e5d33000 	ldrb	r3, [r3]
3000a9e0:	e0023003 	and	r3, r2, r3
3000a9e4:	e20320ff 	and	r2, r3, #255	; 0xff
3000a9e8:	e59f3048 	ldr	r3, [pc, #72]	; 3000aa38 <OSTimeDly+0x11c>
3000a9ec:	e5c32000 	strb	r2, [r3]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
3000a9f0:	e59f3038 	ldr	r3, [pc, #56]	; 3000aa30 <OSTimeDly+0x114>
3000a9f4:	e5933000 	ldr	r3, [r3]
3000a9f8:	e51b2010 	ldr	r2, [fp, #-16]
3000a9fc:	e5832034 	str	r2, [r3, #52]	; 0x34
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
3000aa00:	e51b0008 	ldr	r0, [fp, #-8]
3000aa04:	ebffd5cb 	bl	30000138 <OS_CPU_RestoreSR>
        OS_Sched();                              /* Find next task to run!                             */
3000aa08:	ebffe30e 	bl	30003648 <OS_Sched>
3000aa0c:	ea000002 	b	3000aa1c <OSTimeDly+0x100>
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
        return;
3000aa10:	e1a00000 	nop			; (mov r0, r0)
3000aa14:	ea000000 	b	3000aa1c <OSTimeDly+0x100>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
        return;
3000aa18:	e1a00000 	nop			; (mov r0, r0)
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
3000aa1c:	e24bd004 	sub	sp, fp, #4
3000aa20:	e8bd4800 	pop	{fp, lr}
3000aa24:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000aa28:	30017bdc 	.word	0x30017bdc
3000aa2c:	300173e8 	.word	0x300173e8
3000aa30:	30017be0 	.word	0x30017be0
3000aa34:	300179d0 	.word	0x300179d0
3000aa38:	300179cc 	.word	0x300179cc

3000aa3c <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
3000aa3c:	e92d4800 	push	{fp, lr}
3000aa40:	e28db004 	add	fp, sp, #4
3000aa44:	e24dd010 	sub	sp, sp, #16
3000aa48:	e54b000d 	strb	r0, [fp, #-13]
3000aa4c:	e54b100e 	strb	r1, [fp, #-14]
3000aa50:	e54b200f 	strb	r2, [fp, #-15]
3000aa54:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
3000aa58:	e59f3148 	ldr	r3, [pc, #328]	; 3000aba8 <OSTimeDlyHMSM+0x16c>
3000aa5c:	e5d33000 	ldrb	r3, [r3]
3000aa60:	e3530000 	cmp	r3, #0
3000aa64:	0a000001 	beq	3000aa70 <OSTimeDlyHMSM+0x34>
        return (OS_ERR_TIME_DLY_ISR);
3000aa68:	e3a03055 	mov	r3, #85	; 0x55
3000aa6c:	ea000049 	b	3000ab98 <OSTimeDlyHMSM+0x15c>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
3000aa70:	e59f3134 	ldr	r3, [pc, #308]	; 3000abac <OSTimeDlyHMSM+0x170>
3000aa74:	e5d33000 	ldrb	r3, [r3]
3000aa78:	e3530000 	cmp	r3, #0
3000aa7c:	0a000001 	beq	3000aa88 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_SCHED_LOCKED);
3000aa80:	e3a03032 	mov	r3, #50	; 0x32
3000aa84:	ea000043 	b	3000ab98 <OSTimeDlyHMSM+0x15c>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
3000aa88:	e55b300d 	ldrb	r3, [fp, #-13]
3000aa8c:	e3530000 	cmp	r3, #0
3000aa90:	1a00000a 	bne	3000aac0 <OSTimeDlyHMSM+0x84>
        if (minutes == 0u) {
3000aa94:	e55b300e 	ldrb	r3, [fp, #-14]
3000aa98:	e3530000 	cmp	r3, #0
3000aa9c:	1a000007 	bne	3000aac0 <OSTimeDlyHMSM+0x84>
            if (seconds == 0u) {
3000aaa0:	e55b300f 	ldrb	r3, [fp, #-15]
3000aaa4:	e3530000 	cmp	r3, #0
3000aaa8:	1a000004 	bne	3000aac0 <OSTimeDlyHMSM+0x84>
                if (ms == 0u) {
3000aaac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
3000aab0:	e3530000 	cmp	r3, #0
3000aab4:	1a000001 	bne	3000aac0 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
3000aab8:	e3a03054 	mov	r3, #84	; 0x54
3000aabc:	ea000035 	b	3000ab98 <OSTimeDlyHMSM+0x15c>
                }
            }
        }
    }
    if (minutes > 59u) {
3000aac0:	e55b300e 	ldrb	r3, [fp, #-14]
3000aac4:	e353003b 	cmp	r3, #59	; 0x3b
3000aac8:	9a000001 	bls	3000aad4 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
3000aacc:	e3a03051 	mov	r3, #81	; 0x51
3000aad0:	ea000030 	b	3000ab98 <OSTimeDlyHMSM+0x15c>
    }
    if (seconds > 59u) {
3000aad4:	e55b300f 	ldrb	r3, [fp, #-15]
3000aad8:	e353003b 	cmp	r3, #59	; 0x3b
3000aadc:	9a000001 	bls	3000aae8 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_SECONDS);
3000aae0:	e3a03052 	mov	r3, #82	; 0x52
3000aae4:	ea00002b 	b	3000ab98 <OSTimeDlyHMSM+0x15c>
    }
    if (ms > 999u) {
3000aae8:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
3000aaec:	e59f30bc 	ldr	r3, [pc, #188]	; 3000abb0 <OSTimeDlyHMSM+0x174>
3000aaf0:	e1520003 	cmp	r2, r3
3000aaf4:	9a000001 	bls	3000ab00 <OSTimeDlyHMSM+0xc4>
        return (OS_ERR_TIME_INVALID_MS);
3000aaf8:	e3a03053 	mov	r3, #83	; 0x53
3000aafc:	ea000025 	b	3000ab98 <OSTimeDlyHMSM+0x15c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
3000ab00:	e55b200d 	ldrb	r2, [fp, #-13]
3000ab04:	e1a03002 	mov	r3, r2
3000ab08:	e1a03183 	lsl	r3, r3, #3
3000ab0c:	e0623003 	rsb	r3, r2, r3
3000ab10:	e1a03283 	lsl	r3, r3, #5
3000ab14:	e0833002 	add	r3, r3, r2
3000ab18:	e1a03203 	lsl	r3, r3, #4
3000ab1c:	e1a02003 	mov	r2, r3
3000ab20:	e55b300e 	ldrb	r3, [fp, #-14]
3000ab24:	e1a03103 	lsl	r3, r3, #2
3000ab28:	e1a01203 	lsl	r1, r3, #4
3000ab2c:	e0633001 	rsb	r3, r3, r1
3000ab30:	e0822003 	add	r2, r2, r3
3000ab34:	e55b300f 	ldrb	r3, [fp, #-15]
3000ab38:	e0822003 	add	r2, r2, r3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
3000ab3c:	e1a03002 	mov	r3, r2
3000ab40:	e1a03103 	lsl	r3, r3, #2
3000ab44:	e0833002 	add	r3, r3, r2
3000ab48:	e1a02103 	lsl	r2, r3, #2
3000ab4c:	e0833002 	add	r3, r3, r2
3000ab50:	e1a03103 	lsl	r3, r3, #2
3000ab54:	e1a01003 	mov	r1, r3
3000ab58:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
3000ab5c:	e1a03002 	mov	r3, r2
3000ab60:	e1a03103 	lsl	r3, r3, #2
3000ab64:	e0833002 	add	r3, r3, r2
3000ab68:	e1a02103 	lsl	r2, r3, #2
3000ab6c:	e0833002 	add	r3, r3, r2
3000ab70:	e1a03103 	lsl	r3, r3, #2
3000ab74:	e2830f7d 	add	r0, r3, #500	; 0x1f4
3000ab78:	e59f2034 	ldr	r2, [pc, #52]	; 3000abb4 <OSTimeDlyHMSM+0x178>
3000ab7c:	e083c092 	umull	ip, r3, r2, r0
3000ab80:	e1a03323 	lsr	r3, r3, #6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
3000ab84:	e0813003 	add	r3, r1, r3
3000ab88:	e50b3008 	str	r3, [fp, #-8]
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
    OSTimeDly(ticks);
3000ab8c:	e51b0008 	ldr	r0, [fp, #-8]
3000ab90:	ebffff61 	bl	3000a91c <OSTimeDly>
    return (OS_ERR_NONE);
3000ab94:	e3a03000 	mov	r3, #0
}
3000ab98:	e1a00003 	mov	r0, r3
3000ab9c:	e24bd004 	sub	sp, fp, #4
3000aba0:	e8bd4800 	pop	{fp, lr}
3000aba4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000aba8:	30017bdc 	.word	0x30017bdc
3000abac:	300173e8 	.word	0x300173e8
3000abb0:	000003e7 	.word	0x000003e7
3000abb4:	10624dd3 	.word	0x10624dd3

3000abb8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0u
INT8U  OSTimeDlyResume (INT8U prio)
{
3000abb8:	e92d4800 	push	{fp, lr}
3000abbc:	e28db004 	add	fp, sp, #4
3000abc0:	e24dd010 	sub	sp, sp, #16
3000abc4:	e1a03000 	mov	r3, r0
3000abc8:	e54b300d 	strb	r3, [fp, #-13]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                   /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
3000abcc:	e3a03000 	mov	r3, #0
3000abd0:	e50b3008 	str	r3, [fp, #-8]
#endif



    if (prio >= OS_LOWEST_PRIO) {
3000abd4:	e55b300d 	ldrb	r3, [fp, #-13]
3000abd8:	e353003e 	cmp	r3, #62	; 0x3e
3000abdc:	9a000001 	bls	3000abe8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
3000abe0:	e3a0302a 	mov	r3, #42	; 0x2a
3000abe4:	ea000050 	b	3000ad2c <OSTimeDlyResume+0x174>
    }
    OS_ENTER_CRITICAL();
3000abe8:	ebffd54a 	bl	30000118 <OS_CPU_SaveSR>
3000abec:	e1a03000 	mov	r3, r0
3000abf0:	e50b3008 	str	r3, [fp, #-8]
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
3000abf4:	e55b200d 	ldrb	r2, [fp, #-13]
3000abf8:	e59f313c 	ldr	r3, [pc, #316]	; 3000ad3c <OSTimeDlyResume+0x184>
3000abfc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
3000ac00:	e50b300c 	str	r3, [fp, #-12]
    if (ptcb == (OS_TCB *)0) {
3000ac04:	e51b300c 	ldr	r3, [fp, #-12]
3000ac08:	e3530000 	cmp	r3, #0
3000ac0c:	1a000003 	bne	3000ac20 <OSTimeDlyResume+0x68>
        OS_EXIT_CRITICAL();
3000ac10:	e51b0008 	ldr	r0, [fp, #-8]
3000ac14:	ebffd547 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
3000ac18:	e3a03043 	mov	r3, #67	; 0x43
3000ac1c:	ea000042 	b	3000ad2c <OSTimeDlyResume+0x174>
    }
    if (ptcb == OS_TCB_RESERVED) {
3000ac20:	e51b300c 	ldr	r3, [fp, #-12]
3000ac24:	e3530001 	cmp	r3, #1
3000ac28:	1a000003 	bne	3000ac3c <OSTimeDlyResume+0x84>
        OS_EXIT_CRITICAL();
3000ac2c:	e51b0008 	ldr	r0, [fp, #-8]
3000ac30:	ebffd540 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
3000ac34:	e3a03043 	mov	r3, #67	; 0x43
3000ac38:	ea00003b 	b	3000ad2c <OSTimeDlyResume+0x174>
    }
    if (ptcb->OSTCBDly == 0u) {                                /* See if task is delayed               */
3000ac3c:	e51b300c 	ldr	r3, [fp, #-12]
3000ac40:	e5933034 	ldr	r3, [r3, #52]	; 0x34
3000ac44:	e3530000 	cmp	r3, #0
3000ac48:	1a000003 	bne	3000ac5c <OSTimeDlyResume+0xa4>
        OS_EXIT_CRITICAL();
3000ac4c:	e51b0008 	ldr	r0, [fp, #-8]
3000ac50:	ebffd538 	bl	30000138 <OS_CPU_RestoreSR>
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
3000ac54:	e3a03050 	mov	r3, #80	; 0x50
3000ac58:	ea000033 	b	3000ad2c <OSTimeDlyResume+0x174>
    }

    ptcb->OSTCBDly = 0u;                                       /* Clear the time delay                 */
3000ac5c:	e51b300c 	ldr	r3, [fp, #-12]
3000ac60:	e3a02000 	mov	r2, #0
3000ac64:	e5832034 	str	r2, [r3, #52]	; 0x34
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
3000ac68:	e51b300c 	ldr	r3, [fp, #-12]
3000ac6c:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
3000ac70:	e2033037 	and	r3, r3, #55	; 0x37
3000ac74:	e3530000 	cmp	r3, #0
3000ac78:	0a000008 	beq	3000aca0 <OSTimeDlyResume+0xe8>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
3000ac7c:	e51b300c 	ldr	r3, [fp, #-12]
3000ac80:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
3000ac84:	e20330c8 	and	r3, r3, #200	; 0xc8
3000ac88:	e51b200c 	ldr	r2, [fp, #-12]
3000ac8c:	e5c23038 	strb	r3, [r2, #56]	; 0x38
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
3000ac90:	e51b300c 	ldr	r3, [fp, #-12]
3000ac94:	e3a02001 	mov	r2, #1
3000ac98:	e5c32039 	strb	r2, [r3, #57]	; 0x39
3000ac9c:	ea000002 	b	3000acac <OSTimeDlyResume+0xf4>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
3000aca0:	e51b300c 	ldr	r3, [fp, #-12]
3000aca4:	e3a02000 	mov	r2, #0
3000aca8:	e5c32039 	strb	r2, [r3, #57]	; 0x39
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
3000acac:	e51b300c 	ldr	r3, [fp, #-12]
3000acb0:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
3000acb4:	e2033008 	and	r3, r3, #8
3000acb8:	e3530000 	cmp	r3, #0
3000acbc:	1a000017 	bne	3000ad20 <OSTimeDlyResume+0x168>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
3000acc0:	e51b300c 	ldr	r3, [fp, #-12]
3000acc4:	e5d3203e 	ldrb	r2, [r3, #62]	; 0x3e
3000acc8:	e59f3070 	ldr	r3, [pc, #112]	; 3000ad40 <OSTimeDlyResume+0x188>
3000accc:	e5d33000 	ldrb	r3, [r3]
3000acd0:	e1823003 	orr	r3, r2, r3
3000acd4:	e20320ff 	and	r2, r3, #255	; 0xff
3000acd8:	e59f3060 	ldr	r3, [pc, #96]	; 3000ad40 <OSTimeDlyResume+0x188>
3000acdc:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
3000ace0:	e51b300c 	ldr	r3, [fp, #-12]
3000ace4:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
3000ace8:	e51b200c 	ldr	r2, [fp, #-12]
3000acec:	e5d2203c 	ldrb	r2, [r2, #60]	; 0x3c
3000acf0:	e59f104c 	ldr	r1, [pc, #76]	; 3000ad44 <OSTimeDlyResume+0x18c>
3000acf4:	e7d11002 	ldrb	r1, [r1, r2]
3000acf8:	e51b200c 	ldr	r2, [fp, #-12]
3000acfc:	e5d2203d 	ldrb	r2, [r2, #61]	; 0x3d
3000ad00:	e1812002 	orr	r2, r1, r2
3000ad04:	e20210ff 	and	r1, r2, #255	; 0xff
3000ad08:	e59f2034 	ldr	r2, [pc, #52]	; 3000ad44 <OSTimeDlyResume+0x18c>
3000ad0c:	e7c21003 	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
3000ad10:	e51b0008 	ldr	r0, [fp, #-8]
3000ad14:	ebffd507 	bl	30000138 <OS_CPU_RestoreSR>
        OS_Sched();                                            /* See if this is new highest priority  */
3000ad18:	ebffe24a 	bl	30003648 <OS_Sched>
3000ad1c:	ea000001 	b	3000ad28 <OSTimeDlyResume+0x170>
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
3000ad20:	e51b0008 	ldr	r0, [fp, #-8]
3000ad24:	ebffd503 	bl	30000138 <OS_CPU_RestoreSR>
    }
    return (OS_ERR_NONE);
3000ad28:	e3a03000 	mov	r3, #0
}
3000ad2c:	e1a00003 	mov	r0, r3
3000ad30:	e24bd004 	sub	sp, fp, #4
3000ad34:	e8bd4800 	pop	{fp, lr}
3000ad38:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000ad3c:	300186d0 	.word	0x300186d0
3000ad40:	300179cc 	.word	0x300179cc
3000ad44:	300179d0 	.word	0x300179d0

3000ad48 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
3000ad48:	e92d4800 	push	{fp, lr}
3000ad4c:	e28db004 	add	fp, sp, #4
3000ad50:	e24dd008 	sub	sp, sp, #8
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
3000ad54:	e3a03000 	mov	r3, #0
3000ad58:	e50b3008 	str	r3, [fp, #-8]
#endif



    OS_ENTER_CRITICAL();
3000ad5c:	ebffd4ed 	bl	30000118 <OS_CPU_SaveSR>
3000ad60:	e1a03000 	mov	r3, r0
3000ad64:	e50b3008 	str	r3, [fp, #-8]
    ticks = OSTime;
3000ad68:	e59f3020 	ldr	r3, [pc, #32]	; 3000ad90 <OSTimeGet+0x48>
3000ad6c:	e5933000 	ldr	r3, [r3]
3000ad70:	e50b300c 	str	r3, [fp, #-12]
    OS_EXIT_CRITICAL();
3000ad74:	e51b0008 	ldr	r0, [fp, #-8]
3000ad78:	ebffd4ee 	bl	30000138 <OS_CPU_RestoreSR>
    return (ticks);
3000ad7c:	e51b300c 	ldr	r3, [fp, #-12]
}
3000ad80:	e1a00003 	mov	r0, r3
3000ad84:	e24bd004 	sub	sp, fp, #4
3000ad88:	e8bd4800 	pop	{fp, lr}
3000ad8c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000ad90:	30017be8 	.word	0x30017be8

3000ad94 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
void  OSTimeSet (INT32U ticks)
{
3000ad94:	e92d4800 	push	{fp, lr}
3000ad98:	e28db004 	add	fp, sp, #4
3000ad9c:	e24dd010 	sub	sp, sp, #16
3000ada0:	e50b0010 	str	r0, [fp, #-16]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
3000ada4:	e3a03000 	mov	r3, #0
3000ada8:	e50b3008 	str	r3, [fp, #-8]
#endif



    OS_ENTER_CRITICAL();
3000adac:	ebffd4d9 	bl	30000118 <OS_CPU_SaveSR>
3000adb0:	e1a03000 	mov	r3, r0
3000adb4:	e50b3008 	str	r3, [fp, #-8]
    OSTime = ticks;
3000adb8:	e59f3018 	ldr	r3, [pc, #24]	; 3000add8 <OSTimeSet+0x44>
3000adbc:	e51b2010 	ldr	r2, [fp, #-16]
3000adc0:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
3000adc4:	e51b0008 	ldr	r0, [fp, #-8]
3000adc8:	ebffd4da 	bl	30000138 <OS_CPU_RestoreSR>
}
3000adcc:	e24bd004 	sub	sp, fp, #4
3000add0:	e8bd4800 	pop	{fp, lr}
3000add4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000add8:	30017be8 	.word	0x30017be8

3000addc <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
3000addc:	e92d4800 	push	{fp, lr}
3000ade0:	e28db004 	add	fp, sp, #4
3000ade4:	e24dd018 	sub	sp, sp, #24
3000ade8:	e50b0010 	str	r0, [fp, #-16]
3000adec:	e50b1014 	str	r1, [fp, #-20]
3000adf0:	e50b301c 	str	r3, [fp, #-28]
3000adf4:	e1a03002 	mov	r3, r2
3000adf8:	e54b3015 	strb	r3, [fp, #-21]
        return ((OS_TMR *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate arguments                                     */
3000adfc:	e55b3015 	ldrb	r3, [fp, #-21]
3000ae00:	e3530001 	cmp	r3, #1
3000ae04:	0a000009 	beq	3000ae30 <OSTmrCreate+0x54>
3000ae08:	e3530002 	cmp	r3, #2
3000ae0c:	1a00000f 	bne	3000ae50 <OSTmrCreate+0x74>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0u) {
3000ae10:	e51b3014 	ldr	r3, [fp, #-20]
3000ae14:	e3530000 	cmp	r3, #0
3000ae18:	1a000011 	bne	3000ae64 <OSTmrCreate+0x88>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
3000ae1c:	e59b300c 	ldr	r3, [fp, #12]
3000ae20:	e3e0207c 	mvn	r2, #124	; 0x7c
3000ae24:	e5c32000 	strb	r2, [r3]
                 return ((OS_TMR *)0);
3000ae28:	e3a03000 	mov	r3, #0
3000ae2c:	ea000046 	b	3000af4c <OSTmrCreate+0x170>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0u) {
3000ae30:	e51b3010 	ldr	r3, [fp, #-16]
3000ae34:	e3530000 	cmp	r3, #0
3000ae38:	1a00000b 	bne	3000ae6c <OSTmrCreate+0x90>
                 *perr = OS_ERR_TMR_INVALID_DLY;
3000ae3c:	e59b300c 	ldr	r3, [fp, #12]
3000ae40:	e3e0207d 	mvn	r2, #125	; 0x7d
3000ae44:	e5c32000 	strb	r2, [r3]
                 return ((OS_TMR *)0);
3000ae48:	e3a03000 	mov	r3, #0
3000ae4c:	ea00003e 	b	3000af4c <OSTmrCreate+0x170>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
3000ae50:	e59b300c 	ldr	r3, [fp, #12]
3000ae54:	e3e0207b 	mvn	r2, #123	; 0x7b
3000ae58:	e5c32000 	strb	r2, [r3]
             return ((OS_TMR *)0);
3000ae5c:	e3a03000 	mov	r3, #0
3000ae60:	ea000039 	b	3000af4c <OSTmrCreate+0x170>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0u) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
3000ae64:	e1a00000 	nop			; (mov r0, r0)
3000ae68:	ea000000 	b	3000ae70 <OSTmrCreate+0x94>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0u) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
3000ae6c:	e1a00000 	nop			; (mov r0, r0)
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0u) {                                /* See if trying to call from an ISR                      */
3000ae70:	e59f30e4 	ldr	r3, [pc, #228]	; 3000af5c <OSTmrCreate+0x180>
3000ae74:	e5d33000 	ldrb	r3, [r3]
3000ae78:	e3530000 	cmp	r3, #0
3000ae7c:	0a000004 	beq	3000ae94 <OSTmrCreate+0xb8>
        *perr  = OS_ERR_TMR_ISR;
3000ae80:	e59b300c 	ldr	r3, [fp, #12]
3000ae84:	e3e02074 	mvn	r2, #116	; 0x74
3000ae88:	e5c32000 	strb	r2, [r3]
        return ((OS_TMR *)0);
3000ae8c:	e3a03000 	mov	r3, #0
3000ae90:	ea00002d 	b	3000af4c <OSTmrCreate+0x170>
    }
    OSSchedLock();
3000ae94:	ebffdde0 	bl	3000261c <OSSchedLock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
3000ae98:	eb000240 	bl	3000b7a0 <OSTmr_Alloc>
3000ae9c:	e1a03000 	mov	r3, r0
3000aea0:	e50b3008 	str	r3, [fp, #-8]
    if (ptmr == (OS_TMR *)0) {
3000aea4:	e51b3008 	ldr	r3, [fp, #-8]
3000aea8:	e3530000 	cmp	r3, #0
3000aeac:	1a000005 	bne	3000aec8 <OSTmrCreate+0xec>
        OSSchedUnlock();
3000aeb0:	ebffddfb 	bl	300026a4 <OSSchedUnlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
3000aeb4:	e59b300c 	ldr	r3, [fp, #12]
3000aeb8:	e3e02079 	mvn	r2, #121	; 0x79
3000aebc:	e5c32000 	strb	r2, [r3]
        return ((OS_TMR *)0);
3000aec0:	e3a03000 	mov	r3, #0
3000aec4:	ea000020 	b	3000af4c <OSTmrCreate+0x170>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
3000aec8:	e51b3008 	ldr	r3, [fp, #-8]
3000aecc:	e3a02001 	mov	r2, #1
3000aed0:	e5c32025 	strb	r2, [r3, #37]	; 0x25
    ptmr->OSTmrDly         = dly;
3000aed4:	e51b3008 	ldr	r3, [fp, #-8]
3000aed8:	e51b2010 	ldr	r2, [fp, #-16]
3000aedc:	e5832018 	str	r2, [r3, #24]
    ptmr->OSTmrPeriod      = period;
3000aee0:	e51b3008 	ldr	r3, [fp, #-8]
3000aee4:	e51b2014 	ldr	r2, [fp, #-20]
3000aee8:	e583201c 	str	r2, [r3, #28]
    ptmr->OSTmrOpt         = opt;
3000aeec:	e51b3008 	ldr	r3, [fp, #-8]
3000aef0:	e55b2015 	ldrb	r2, [fp, #-21]
3000aef4:	e5c32024 	strb	r2, [r3, #36]	; 0x24
    ptmr->OSTmrCallback    = callback;
3000aef8:	e51b3008 	ldr	r3, [fp, #-8]
3000aefc:	e51b201c 	ldr	r2, [fp, #-28]
3000af00:	e5832004 	str	r2, [r3, #4]
    ptmr->OSTmrCallbackArg = callback_arg;
3000af04:	e51b3008 	ldr	r3, [fp, #-8]
3000af08:	e59b2004 	ldr	r2, [fp, #4]
3000af0c:	e5832008 	str	r2, [r3, #8]
#if OS_TMR_CFG_NAME_EN > 0u
    if (pname == (INT8U *)0) {                              /* Is 'pname' a NULL pointer?                             */
3000af10:	e59b3008 	ldr	r3, [fp, #8]
3000af14:	e3530000 	cmp	r3, #0
3000af18:	1a000003 	bne	3000af2c <OSTmrCreate+0x150>
        ptmr->OSTmrName    = (INT8U *)(void *)"?";
3000af1c:	e51b3008 	ldr	r3, [fp, #-8]
3000af20:	e59f2038 	ldr	r2, [pc, #56]	; 3000af60 <OSTmrCreate+0x184>
3000af24:	e5832020 	str	r2, [r3, #32]
3000af28:	ea000002 	b	3000af38 <OSTmrCreate+0x15c>
    } else {
        ptmr->OSTmrName    = pname;
3000af2c:	e51b3008 	ldr	r3, [fp, #-8]
3000af30:	e59b2008 	ldr	r2, [fp, #8]
3000af34:	e5832020 	str	r2, [r3, #32]
    }
#endif
    OSSchedUnlock();
3000af38:	ebffddd9 	bl	300026a4 <OSSchedUnlock>
    OS_TRACE_TMR_CREATE(ptmr, ptmr->OSTmrName);
    *perr = OS_ERR_NONE;
3000af3c:	e59b300c 	ldr	r3, [fp, #12]
3000af40:	e3a02000 	mov	r2, #0
3000af44:	e5c32000 	strb	r2, [r3]
    return (ptmr);
3000af48:	e51b3008 	ldr	r3, [fp, #-8]
}
3000af4c:	e1a00003 	mov	r0, r3
3000af50:	e24bd004 	sub	sp, fp, #4
3000af54:	e8bd4800 	pop	{fp, lr}
3000af58:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000af5c:	30017bdc 	.word	0x30017bdc
3000af60:	3000c278 	.word	0x3000c278

3000af64 <OSTmrDel>:
*/

#if OS_TMR_EN > 0u
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
3000af64:	e92d4800 	push	{fp, lr}
3000af68:	e28db004 	add	fp, sp, #4
3000af6c:	e24dd008 	sub	sp, sp, #8
3000af70:	e50b0008 	str	r0, [fp, #-8]
3000af74:	e50b100c 	str	r1, [fp, #-12]
        return (OS_FALSE);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (ptmr == (OS_TMR *)0) {
3000af78:	e51b3008 	ldr	r3, [fp, #-8]
3000af7c:	e3530000 	cmp	r3, #0
3000af80:	1a000004 	bne	3000af98 <OSTmrDel+0x34>
        *perr = OS_ERR_TMR_INVALID;
3000af84:	e51b300c 	ldr	r3, [fp, #-12]
3000af88:	e3e02075 	mvn	r2, #117	; 0x75
3000af8c:	e5c32000 	strb	r2, [r3]
        return (OS_FALSE);
3000af90:	e3a03000 	mov	r3, #0
3000af94:	ea000038 	b	3000b07c <OSTmrDel+0x118>
    }
#endif

    OS_TRACE_TMR_DEL_ENTER(ptmr);

    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
3000af98:	e51b3008 	ldr	r3, [fp, #-8]
3000af9c:	e5d33000 	ldrb	r3, [r3]
3000afa0:	e3530064 	cmp	r3, #100	; 0x64
3000afa4:	0a000004 	beq	3000afbc <OSTmrDel+0x58>
        *perr = OS_ERR_TMR_INVALID_TYPE;
3000afa8:	e51b300c 	ldr	r3, [fp, #-12]
3000afac:	e3e02076 	mvn	r2, #118	; 0x76
3000afb0:	e5c32000 	strb	r2, [r3]
        OS_TRACE_TMR_DEL_EXIT(*perr);
        return (OS_FALSE);
3000afb4:	e3a03000 	mov	r3, #0
3000afb8:	ea00002f 	b	3000b07c <OSTmrDel+0x118>
    }
    if (OSIntNesting > 0u) {                                /* See if trying to call from an ISR                      */
3000afbc:	e59f30c8 	ldr	r3, [pc, #200]	; 3000b08c <OSTmrDel+0x128>
3000afc0:	e5d33000 	ldrb	r3, [r3]
3000afc4:	e3530000 	cmp	r3, #0
3000afc8:	0a000004 	beq	3000afe0 <OSTmrDel+0x7c>
        *perr  = OS_ERR_TMR_ISR;
3000afcc:	e51b300c 	ldr	r3, [fp, #-12]
3000afd0:	e3e02074 	mvn	r2, #116	; 0x74
3000afd4:	e5c32000 	strb	r2, [r3]
        OS_TRACE_TMR_DEL_EXIT(*perr);
        return (OS_FALSE);
3000afd8:	e3a03000 	mov	r3, #0
3000afdc:	ea000026 	b	3000b07c <OSTmrDel+0x118>
    }
    OSSchedLock();
3000afe0:	ebffdd8d 	bl	3000261c <OSSchedLock>
    switch (ptmr->OSTmrState) {
3000afe4:	e51b3008 	ldr	r3, [fp, #-8]
3000afe8:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
3000afec:	e3530003 	cmp	r3, #3
3000aff0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
3000aff4:	ea00001b 	b	3000b068 <OSTmrDel+0x104>
3000aff8:	3000b050 	.word	0x3000b050
3000affc:	3000b030 	.word	0x3000b030
3000b000:	3000b030 	.word	0x3000b030
3000b004:	3000b008 	.word	0x3000b008
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
3000b008:	e51b0008 	ldr	r0, [fp, #-8]
3000b00c:	eb000347 	bl	3000bd30 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
3000b010:	e51b0008 	ldr	r0, [fp, #-8]
3000b014:	eb00020e 	bl	3000b854 <OSTmr_Free>
             OSSchedUnlock();
3000b018:	ebffdda1 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_NONE;
3000b01c:	e51b300c 	ldr	r3, [fp, #-12]
3000b020:	e3a02000 	mov	r2, #0
3000b024:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_DEL_EXIT(*perr);
             return (OS_TRUE);
3000b028:	e3a03001 	mov	r3, #1
3000b02c:	ea000012 	b	3000b07c <OSTmrDel+0x118>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
3000b030:	e51b0008 	ldr	r0, [fp, #-8]
3000b034:	eb000206 	bl	3000b854 <OSTmr_Free>
             OSSchedUnlock();
3000b038:	ebffdd99 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_NONE;
3000b03c:	e51b300c 	ldr	r3, [fp, #-12]
3000b040:	e3a02000 	mov	r2, #0
3000b044:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_DEL_EXIT(*perr);
             return (OS_TRUE);
3000b048:	e3a03001 	mov	r3, #1
3000b04c:	ea00000a 	b	3000b07c <OSTmrDel+0x118>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSSchedUnlock();
3000b050:	ebffdd93 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INACTIVE;
3000b054:	e51b300c 	ldr	r3, [fp, #-12]
3000b058:	e3e02078 	mvn	r2, #120	; 0x78
3000b05c:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_DEL_EXIT(*perr);
             return (OS_FALSE);
3000b060:	e3a03000 	mov	r3, #0
3000b064:	ea000004 	b	3000b07c <OSTmrDel+0x118>

        default:
             OSSchedUnlock();
3000b068:	ebffdd8d 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
3000b06c:	e51b300c 	ldr	r3, [fp, #-12]
3000b070:	e3e02072 	mvn	r2, #114	; 0x72
3000b074:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_DEL_EXIT(*perr);
             return (OS_FALSE);
3000b078:	e3a03000 	mov	r3, #0
    }
}
3000b07c:	e1a00003 	mov	r0, r3
3000b080:	e24bd004 	sub	sp, fp, #4
3000b084:	e8bd4800 	pop	{fp, lr}
3000b088:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000b08c:	30017bdc 	.word	0x30017bdc

3000b090 <OSTmrNameGet>:

#if OS_TMR_EN > 0u && OS_TMR_CFG_NAME_EN > 0u
INT8U  OSTmrNameGet (OS_TMR   *ptmr,
                     INT8U   **pdest,
                     INT8U    *perr)
{
3000b090:	e92d4800 	push	{fp, lr}
3000b094:	e28db004 	add	fp, sp, #4
3000b098:	e24dd018 	sub	sp, sp, #24
3000b09c:	e50b0010 	str	r0, [fp, #-16]
3000b0a0:	e50b1014 	str	r1, [fp, #-20]
3000b0a4:	e50b2018 	str	r2, [fp, #-24]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pdest == (INT8U **)0) {
3000b0a8:	e51b3014 	ldr	r3, [fp, #-20]
3000b0ac:	e3530000 	cmp	r3, #0
3000b0b0:	1a000004 	bne	3000b0c8 <OSTmrNameGet+0x38>
        *perr = OS_ERR_TMR_INVALID_DEST;
3000b0b4:	e51b3018 	ldr	r3, [fp, #-24]
3000b0b8:	e3e02077 	mvn	r2, #119	; 0x77
3000b0bc:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b0c0:	e3a03000 	mov	r3, #0
3000b0c4:	ea00003d 	b	3000b1c0 <OSTmrNameGet+0x130>
    }
    if (ptmr == (OS_TMR *)0) {
3000b0c8:	e51b3010 	ldr	r3, [fp, #-16]
3000b0cc:	e3530000 	cmp	r3, #0
3000b0d0:	1a000004 	bne	3000b0e8 <OSTmrNameGet+0x58>
        *perr = OS_ERR_TMR_INVALID;
3000b0d4:	e51b3018 	ldr	r3, [fp, #-24]
3000b0d8:	e3e02075 	mvn	r2, #117	; 0x75
3000b0dc:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b0e0:	e3a03000 	mov	r3, #0
3000b0e4:	ea000035 	b	3000b1c0 <OSTmrNameGet+0x130>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
3000b0e8:	e51b3010 	ldr	r3, [fp, #-16]
3000b0ec:	e5d33000 	ldrb	r3, [r3]
3000b0f0:	e3530064 	cmp	r3, #100	; 0x64
3000b0f4:	0a000004 	beq	3000b10c <OSTmrNameGet+0x7c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
3000b0f8:	e51b3018 	ldr	r3, [fp, #-24]
3000b0fc:	e3e02076 	mvn	r2, #118	; 0x76
3000b100:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b104:	e3a03000 	mov	r3, #0
3000b108:	ea00002c 	b	3000b1c0 <OSTmrNameGet+0x130>
    }
    if (OSIntNesting > 0u) {                           /* See if trying to call from an ISR                           */
3000b10c:	e59f30bc 	ldr	r3, [pc, #188]	; 3000b1d0 <OSTmrNameGet+0x140>
3000b110:	e5d33000 	ldrb	r3, [r3]
3000b114:	e3530000 	cmp	r3, #0
3000b118:	0a000004 	beq	3000b130 <OSTmrNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
3000b11c:	e51b3018 	ldr	r3, [fp, #-24]
3000b120:	e3a02011 	mov	r2, #17
3000b124:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b128:	e3a03000 	mov	r3, #0
3000b12c:	ea000023 	b	3000b1c0 <OSTmrNameGet+0x130>
    }
    OSSchedLock();
3000b130:	ebffdd39 	bl	3000261c <OSSchedLock>
    switch (ptmr->OSTmrState) {
3000b134:	e51b3010 	ldr	r3, [fp, #-16]
3000b138:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
3000b13c:	e3530000 	cmp	r3, #0
3000b140:	0a000013 	beq	3000b194 <OSTmrNameGet+0x104>
3000b144:	e3530000 	cmp	r3, #0
3000b148:	ba000017 	blt	3000b1ac <OSTmrNameGet+0x11c>
3000b14c:	e3530003 	cmp	r3, #3
3000b150:	ca000015 	bgt	3000b1ac <OSTmrNameGet+0x11c>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             *pdest = ptmr->OSTmrName;
3000b154:	e51b3010 	ldr	r3, [fp, #-16]
3000b158:	e5932020 	ldr	r2, [r3, #32]
3000b15c:	e51b3014 	ldr	r3, [fp, #-20]
3000b160:	e5832000 	str	r2, [r3]
             len    = OS_StrLen(*pdest);
3000b164:	e51b3014 	ldr	r3, [fp, #-20]
3000b168:	e5933000 	ldr	r3, [r3]
3000b16c:	e1a00003 	mov	r0, r3
3000b170:	ebffe184 	bl	30003788 <OS_StrLen>
3000b174:	e1a03000 	mov	r3, r0
3000b178:	e54b3005 	strb	r3, [fp, #-5]
             OSSchedUnlock();
3000b17c:	ebffdd48 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_NONE;
3000b180:	e51b3018 	ldr	r3, [fp, #-24]
3000b184:	e3a02000 	mov	r2, #0
3000b188:	e5c32000 	strb	r2, [r3]
             return (len);
3000b18c:	e55b3005 	ldrb	r3, [fp, #-5]
3000b190:	ea00000a 	b	3000b1c0 <OSTmrNameGet+0x130>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSSchedUnlock();
3000b194:	ebffdd42 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INACTIVE;
3000b198:	e51b3018 	ldr	r3, [fp, #-24]
3000b19c:	e3e02078 	mvn	r2, #120	; 0x78
3000b1a0:	e5c32000 	strb	r2, [r3]
             return (0u);
3000b1a4:	e3a03000 	mov	r3, #0
3000b1a8:	ea000004 	b	3000b1c0 <OSTmrNameGet+0x130>

        default:
             OSSchedUnlock();
3000b1ac:	ebffdd3c 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
3000b1b0:	e51b3018 	ldr	r3, [fp, #-24]
3000b1b4:	e3e02072 	mvn	r2, #114	; 0x72
3000b1b8:	e5c32000 	strb	r2, [r3]
             return (0u);
3000b1bc:	e3a03000 	mov	r3, #0
    }
}
3000b1c0:	e1a00003 	mov	r0, r3
3000b1c4:	e24bd004 	sub	sp, fp, #4
3000b1c8:	e8bd4800 	pop	{fp, lr}
3000b1cc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000b1d0:	30017bdc 	.word	0x30017bdc

3000b1d4 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0u
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
3000b1d4:	e92d4800 	push	{fp, lr}
3000b1d8:	e28db004 	add	fp, sp, #4
3000b1dc:	e24dd010 	sub	sp, sp, #16
3000b1e0:	e50b0010 	str	r0, [fp, #-16]
3000b1e4:	e50b1014 	str	r1, [fp, #-20]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (ptmr == (OS_TMR *)0) {
3000b1e8:	e51b3010 	ldr	r3, [fp, #-16]
3000b1ec:	e3530000 	cmp	r3, #0
3000b1f0:	1a000004 	bne	3000b208 <OSTmrRemainGet+0x34>
        *perr = OS_ERR_TMR_INVALID;
3000b1f4:	e51b3014 	ldr	r3, [fp, #-20]
3000b1f8:	e3e02075 	mvn	r2, #117	; 0x75
3000b1fc:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b200:	e3a03000 	mov	r3, #0
3000b204:	ea000055 	b	3000b360 <OSTmrRemainGet+0x18c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
3000b208:	e51b3010 	ldr	r3, [fp, #-16]
3000b20c:	e5d33000 	ldrb	r3, [r3]
3000b210:	e3530064 	cmp	r3, #100	; 0x64
3000b214:	0a000004 	beq	3000b22c <OSTmrRemainGet+0x58>
        *perr = OS_ERR_TMR_INVALID_TYPE;
3000b218:	e51b3014 	ldr	r3, [fp, #-20]
3000b21c:	e3e02076 	mvn	r2, #118	; 0x76
3000b220:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b224:	e3a03000 	mov	r3, #0
3000b228:	ea00004c 	b	3000b360 <OSTmrRemainGet+0x18c>
    }
    if (OSIntNesting > 0u) {                           /* See if trying to call from an ISR                           */
3000b22c:	e59f313c 	ldr	r3, [pc, #316]	; 3000b370 <OSTmrRemainGet+0x19c>
3000b230:	e5d33000 	ldrb	r3, [r3]
3000b234:	e3530000 	cmp	r3, #0
3000b238:	0a000004 	beq	3000b250 <OSTmrRemainGet+0x7c>
        *perr = OS_ERR_TMR_ISR;
3000b23c:	e51b3014 	ldr	r3, [fp, #-20]
3000b240:	e3e02074 	mvn	r2, #116	; 0x74
3000b244:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b248:	e3a03000 	mov	r3, #0
3000b24c:	ea000043 	b	3000b360 <OSTmrRemainGet+0x18c>
    }
    OSSchedLock();
3000b250:	ebffdcf1 	bl	3000261c <OSSchedLock>
    switch (ptmr->OSTmrState) {
3000b254:	e51b3010 	ldr	r3, [fp, #-16]
3000b258:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
3000b25c:	e3530003 	cmp	r3, #3
3000b260:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
3000b264:	ea000038 	b	3000b34c <OSTmrRemainGet+0x178>
3000b268:	3000b334 	.word	0x3000b334
3000b26c:	3000b2a8 	.word	0x3000b2a8
3000b270:	3000b31c 	.word	0x3000b31c
3000b274:	3000b278 	.word	0x3000b278
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
3000b278:	e51b3010 	ldr	r3, [fp, #-16]
3000b27c:	e5932014 	ldr	r2, [r3, #20]
3000b280:	e59f30ec 	ldr	r3, [pc, #236]	; 3000b374 <OSTmrRemainGet+0x1a0>
3000b284:	e5933000 	ldr	r3, [r3]
3000b288:	e0633002 	rsb	r3, r3, r2
3000b28c:	e50b3008 	str	r3, [fp, #-8]
             OSSchedUnlock();
3000b290:	ebffdd03 	bl	300026a4 <OSSchedUnlock>
             *perr  = OS_ERR_NONE;
3000b294:	e51b3014 	ldr	r3, [fp, #-20]
3000b298:	e3a02000 	mov	r2, #0
3000b29c:	e5c32000 	strb	r2, [r3]
             return (remain);
3000b2a0:	e51b3008 	ldr	r3, [fp, #-8]
3000b2a4:	ea00002d 	b	3000b360 <OSTmrRemainGet+0x18c>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
3000b2a8:	e51b3010 	ldr	r3, [fp, #-16]
3000b2ac:	e5d33024 	ldrb	r3, [r3, #36]	; 0x24
3000b2b0:	e3530002 	cmp	r3, #2
3000b2b4:	1a00000f 	bne	3000b2f8 <OSTmrRemainGet+0x124>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0u) {
3000b2b8:	e51b3010 	ldr	r3, [fp, #-16]
3000b2bc:	e5933018 	ldr	r3, [r3, #24]
3000b2c0:	e3530000 	cmp	r3, #0
3000b2c4:	1a000003 	bne	3000b2d8 <OSTmrRemainGet+0x104>
                          remain = ptmr->OSTmrPeriod;
3000b2c8:	e51b3010 	ldr	r3, [fp, #-16]
3000b2cc:	e593301c 	ldr	r3, [r3, #28]
3000b2d0:	e50b3008 	str	r3, [fp, #-8]
3000b2d4:	ea000002 	b	3000b2e4 <OSTmrRemainGet+0x110>
                      } else {
                          remain = ptmr->OSTmrDly;
3000b2d8:	e51b3010 	ldr	r3, [fp, #-16]
3000b2dc:	e5933018 	ldr	r3, [r3, #24]
3000b2e0:	e50b3008 	str	r3, [fp, #-8]
                      }
                      OSSchedUnlock();
3000b2e4:	ebffdcee 	bl	300026a4 <OSSchedUnlock>
                      *perr  = OS_ERR_NONE;
3000b2e8:	e51b3014 	ldr	r3, [fp, #-20]
3000b2ec:	e3a02000 	mov	r2, #0
3000b2f0:	e5c32000 	strb	r2, [r3]
                      break;
3000b2f4:	ea000006 	b	3000b314 <OSTmrRemainGet+0x140>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
3000b2f8:	e51b3010 	ldr	r3, [fp, #-16]
3000b2fc:	e5933018 	ldr	r3, [r3, #24]
3000b300:	e50b3008 	str	r3, [fp, #-8]
                      OSSchedUnlock();
3000b304:	ebffdce6 	bl	300026a4 <OSSchedUnlock>
                      *perr  = OS_ERR_NONE;
3000b308:	e51b3014 	ldr	r3, [fp, #-20]
3000b30c:	e3a02000 	mov	r2, #0
3000b310:	e5c32000 	strb	r2, [r3]
                      break;
             }
             return (remain);
3000b314:	e51b3008 	ldr	r3, [fp, #-8]
3000b318:	ea000010 	b	3000b360 <OSTmrRemainGet+0x18c>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSSchedUnlock();
3000b31c:	ebffdce0 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_NONE;
3000b320:	e51b3014 	ldr	r3, [fp, #-20]
3000b324:	e3a02000 	mov	r2, #0
3000b328:	e5c32000 	strb	r2, [r3]
             return (0u);
3000b32c:	e3a03000 	mov	r3, #0
3000b330:	ea00000a 	b	3000b360 <OSTmrRemainGet+0x18c>

        case OS_TMR_STATE_UNUSED:
             OSSchedUnlock();
3000b334:	ebffdcda 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INACTIVE;
3000b338:	e51b3014 	ldr	r3, [fp, #-20]
3000b33c:	e3e02078 	mvn	r2, #120	; 0x78
3000b340:	e5c32000 	strb	r2, [r3]
             return (0u);
3000b344:	e3a03000 	mov	r3, #0
3000b348:	ea000004 	b	3000b360 <OSTmrRemainGet+0x18c>

        default:
             OSSchedUnlock();
3000b34c:	ebffdcd4 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
3000b350:	e51b3014 	ldr	r3, [fp, #-20]
3000b354:	e3e02072 	mvn	r2, #114	; 0x72
3000b358:	e5c32000 	strb	r2, [r3]
             return (0u);
3000b35c:	e3a03000 	mov	r3, #0
    }
}
3000b360:	e1a00003 	mov	r0, r3
3000b364:	e24bd004 	sub	sp, fp, #4
3000b368:	e8bd4800 	pop	{fp, lr}
3000b36c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000b370:	30017bdc 	.word	0x30017bdc
3000b374:	30017be4 	.word	0x30017be4

3000b378 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
3000b378:	e92d4800 	push	{fp, lr}
3000b37c:	e28db004 	add	fp, sp, #4
3000b380:	e24dd010 	sub	sp, sp, #16
3000b384:	e50b0010 	str	r0, [fp, #-16]
3000b388:	e50b1014 	str	r1, [fp, #-20]
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (ptmr == (OS_TMR *)0) {
3000b38c:	e51b3010 	ldr	r3, [fp, #-16]
3000b390:	e3530000 	cmp	r3, #0
3000b394:	1a000004 	bne	3000b3ac <OSTmrStateGet+0x34>
        *perr = OS_ERR_TMR_INVALID;
3000b398:	e51b3014 	ldr	r3, [fp, #-20]
3000b39c:	e3e02075 	mvn	r2, #117	; 0x75
3000b3a0:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b3a4:	e3a03000 	mov	r3, #0
3000b3a8:	ea000022 	b	3000b438 <OSTmrStateGet+0xc0>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
3000b3ac:	e51b3010 	ldr	r3, [fp, #-16]
3000b3b0:	e5d33000 	ldrb	r3, [r3]
3000b3b4:	e3530064 	cmp	r3, #100	; 0x64
3000b3b8:	0a000004 	beq	3000b3d0 <OSTmrStateGet+0x58>
        *perr = OS_ERR_TMR_INVALID_TYPE;
3000b3bc:	e51b3014 	ldr	r3, [fp, #-20]
3000b3c0:	e3e02076 	mvn	r2, #118	; 0x76
3000b3c4:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b3c8:	e3a03000 	mov	r3, #0
3000b3cc:	ea000019 	b	3000b438 <OSTmrStateGet+0xc0>
    }
    if (OSIntNesting > 0u) {                           /* See if trying to call from an ISR                           */
3000b3d0:	e59f3070 	ldr	r3, [pc, #112]	; 3000b448 <OSTmrStateGet+0xd0>
3000b3d4:	e5d33000 	ldrb	r3, [r3]
3000b3d8:	e3530000 	cmp	r3, #0
3000b3dc:	0a000004 	beq	3000b3f4 <OSTmrStateGet+0x7c>
        *perr = OS_ERR_TMR_ISR;
3000b3e0:	e51b3014 	ldr	r3, [fp, #-20]
3000b3e4:	e3e02074 	mvn	r2, #116	; 0x74
3000b3e8:	e5c32000 	strb	r2, [r3]
        return (0u);
3000b3ec:	e3a03000 	mov	r3, #0
3000b3f0:	ea000010 	b	3000b438 <OSTmrStateGet+0xc0>
    }
    OSSchedLock();
3000b3f4:	ebffdc88 	bl	3000261c <OSSchedLock>
    state = ptmr->OSTmrState;
3000b3f8:	e51b3010 	ldr	r3, [fp, #-16]
3000b3fc:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
3000b400:	e54b3005 	strb	r3, [fp, #-5]
    switch (state) {
3000b404:	e55b3005 	ldrb	r3, [fp, #-5]
3000b408:	e2833000 	add	r3, r3, #0
3000b40c:	e3530003 	cmp	r3, #3
3000b410:	8a000003 	bhi	3000b424 <OSTmrStateGet+0xac>
        case OS_TMR_STATE_UNUSED:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:
             *perr = OS_ERR_NONE;
3000b414:	e51b3014 	ldr	r3, [fp, #-20]
3000b418:	e3a02000 	mov	r2, #0
3000b41c:	e5c32000 	strb	r2, [r3]
             break;
3000b420:	ea000002 	b	3000b430 <OSTmrStateGet+0xb8>

        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
3000b424:	e51b3014 	ldr	r3, [fp, #-20]
3000b428:	e3e02072 	mvn	r2, #114	; 0x72
3000b42c:	e5c32000 	strb	r2, [r3]
             break;
    }
    OSSchedUnlock();
3000b430:	ebffdc9b 	bl	300026a4 <OSSchedUnlock>
    return (state);
3000b434:	e55b3005 	ldrb	r3, [fp, #-5]
}
3000b438:	e1a00003 	mov	r0, r3
3000b43c:	e24bd004 	sub	sp, fp, #4
3000b440:	e8bd4800 	pop	{fp, lr}
3000b444:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000b448:	30017bdc 	.word	0x30017bdc

3000b44c <OSTmrStart>:
*/

#if OS_TMR_EN > 0u
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
3000b44c:	e92d4800 	push	{fp, lr}
3000b450:	e28db004 	add	fp, sp, #4
3000b454:	e24dd008 	sub	sp, sp, #8
3000b458:	e50b0008 	str	r0, [fp, #-8]
3000b45c:	e50b100c 	str	r1, [fp, #-12]
        return (OS_FALSE);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (ptmr == (OS_TMR *)0) {
3000b460:	e51b3008 	ldr	r3, [fp, #-8]
3000b464:	e3530000 	cmp	r3, #0
3000b468:	1a000004 	bne	3000b480 <OSTmrStart+0x34>
        *perr = OS_ERR_TMR_INVALID;
3000b46c:	e51b300c 	ldr	r3, [fp, #-12]
3000b470:	e3e02075 	mvn	r2, #117	; 0x75
3000b474:	e5c32000 	strb	r2, [r3]
        return (OS_FALSE);
3000b478:	e3a03000 	mov	r3, #0
3000b47c:	ea00003a 	b	3000b56c <OSTmrStart+0x120>
    }
#endif

    OS_TRACE_TMR_START_ENTER(ptmr);

    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
3000b480:	e51b3008 	ldr	r3, [fp, #-8]
3000b484:	e5d33000 	ldrb	r3, [r3]
3000b488:	e3530064 	cmp	r3, #100	; 0x64
3000b48c:	0a000004 	beq	3000b4a4 <OSTmrStart+0x58>
        *perr = OS_ERR_TMR_INVALID_TYPE;
3000b490:	e51b300c 	ldr	r3, [fp, #-12]
3000b494:	e3e02076 	mvn	r2, #118	; 0x76
3000b498:	e5c32000 	strb	r2, [r3]
        OS_TRACE_TMR_START_EXIT(*perr);
        return (OS_FALSE);
3000b49c:	e3a03000 	mov	r3, #0
3000b4a0:	ea000031 	b	3000b56c <OSTmrStart+0x120>
    }
    if (OSIntNesting > 0u) {                                /* See if trying to call from an ISR                      */
3000b4a4:	e59f30d0 	ldr	r3, [pc, #208]	; 3000b57c <OSTmrStart+0x130>
3000b4a8:	e5d33000 	ldrb	r3, [r3]
3000b4ac:	e3530000 	cmp	r3, #0
3000b4b0:	0a000004 	beq	3000b4c8 <OSTmrStart+0x7c>
        *perr  = OS_ERR_TMR_ISR;
3000b4b4:	e51b300c 	ldr	r3, [fp, #-12]
3000b4b8:	e3e02074 	mvn	r2, #116	; 0x74
3000b4bc:	e5c32000 	strb	r2, [r3]
        OS_TRACE_TMR_START_EXIT(*perr);
        return (OS_FALSE);
3000b4c0:	e3a03000 	mov	r3, #0
3000b4c4:	ea000028 	b	3000b56c <OSTmrStart+0x120>
    }
    OSSchedLock();
3000b4c8:	ebffdc53 	bl	3000261c <OSSchedLock>
    switch (ptmr->OSTmrState) {
3000b4cc:	e51b3008 	ldr	r3, [fp, #-8]
3000b4d0:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
3000b4d4:	e3530003 	cmp	r3, #3
3000b4d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
3000b4dc:	ea00001d 	b	3000b558 <OSTmrStart+0x10c>
3000b4e0:	3000b540 	.word	0x3000b540
3000b4e4:	3000b51c 	.word	0x3000b51c
3000b4e8:	3000b51c 	.word	0x3000b51c
3000b4ec:	3000b4f0 	.word	0x3000b4f0
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
3000b4f0:	e51b0008 	ldr	r0, [fp, #-8]
3000b4f4:	eb00020d 	bl	3000bd30 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
3000b4f8:	e51b0008 	ldr	r0, [fp, #-8]
3000b4fc:	e3a01000 	mov	r1, #0
3000b500:	eb0001a7 	bl	3000bba4 <OSTmr_Link>
             OSSchedUnlock();
3000b504:	ebffdc66 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_NONE;
3000b508:	e51b300c 	ldr	r3, [fp, #-12]
3000b50c:	e3a02000 	mov	r2, #0
3000b510:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_START_EXIT(*perr);
             return (OS_TRUE);
3000b514:	e3a03001 	mov	r3, #1
3000b518:	ea000013 	b	3000b56c <OSTmrStart+0x120>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
3000b51c:	e51b0008 	ldr	r0, [fp, #-8]
3000b520:	e3a01000 	mov	r1, #0
3000b524:	eb00019e 	bl	3000bba4 <OSTmr_Link>
             OSSchedUnlock();
3000b528:	ebffdc5d 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_NONE;
3000b52c:	e51b300c 	ldr	r3, [fp, #-12]
3000b530:	e3a02000 	mov	r2, #0
3000b534:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_START_EXIT(*perr);
             return (OS_TRUE);
3000b538:	e3a03001 	mov	r3, #1
3000b53c:	ea00000a 	b	3000b56c <OSTmrStart+0x120>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSSchedUnlock();
3000b540:	ebffdc57 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INACTIVE;
3000b544:	e51b300c 	ldr	r3, [fp, #-12]
3000b548:	e3e02078 	mvn	r2, #120	; 0x78
3000b54c:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_START_EXIT(*perr);
             return (OS_FALSE);
3000b550:	e3a03000 	mov	r3, #0
3000b554:	ea000004 	b	3000b56c <OSTmrStart+0x120>

        default:
             OSSchedUnlock();
3000b558:	ebffdc51 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
3000b55c:	e51b300c 	ldr	r3, [fp, #-12]
3000b560:	e3e02072 	mvn	r2, #114	; 0x72
3000b564:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_START_EXIT(*perr);
             return (OS_FALSE);
3000b568:	e3a03000 	mov	r3, #0
    }
}
3000b56c:	e1a00003 	mov	r0, r3
3000b570:	e24bd004 	sub	sp, fp, #4
3000b574:	e8bd4800 	pop	{fp, lr}
3000b578:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000b57c:	30017bdc 	.word	0x30017bdc

3000b580 <OSTmrStop>:
#if OS_TMR_EN > 0u
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
3000b580:	e92d4800 	push	{fp, lr}
3000b584:	e28db004 	add	fp, sp, #4
3000b588:	e24dd018 	sub	sp, sp, #24
3000b58c:	e50b0010 	str	r0, [fp, #-16]
3000b590:	e50b2018 	str	r2, [fp, #-24]
3000b594:	e50b301c 	str	r3, [fp, #-28]
3000b598:	e1a03001 	mov	r3, r1
3000b59c:	e54b3011 	strb	r3, [fp, #-17]
        return (OS_FALSE);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (ptmr == (OS_TMR *)0) {
3000b5a0:	e51b3010 	ldr	r3, [fp, #-16]
3000b5a4:	e3530000 	cmp	r3, #0
3000b5a8:	1a000004 	bne	3000b5c0 <OSTmrStop+0x40>
        *perr = OS_ERR_TMR_INVALID;
3000b5ac:	e51b301c 	ldr	r3, [fp, #-28]
3000b5b0:	e3e02075 	mvn	r2, #117	; 0x75
3000b5b4:	e5c32000 	strb	r2, [r3]
        return (OS_FALSE);
3000b5b8:	e3a03000 	mov	r3, #0
3000b5bc:	ea000063 	b	3000b750 <OSTmrStop+0x1d0>
    }
#endif

    OS_TRACE_TMR_STOP_ENTER(ptmr);

    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
3000b5c0:	e51b3010 	ldr	r3, [fp, #-16]
3000b5c4:	e5d33000 	ldrb	r3, [r3]
3000b5c8:	e3530064 	cmp	r3, #100	; 0x64
3000b5cc:	0a000004 	beq	3000b5e4 <OSTmrStop+0x64>
        *perr = OS_ERR_TMR_INVALID_TYPE;
3000b5d0:	e51b301c 	ldr	r3, [fp, #-28]
3000b5d4:	e3e02076 	mvn	r2, #118	; 0x76
3000b5d8:	e5c32000 	strb	r2, [r3]
        OS_TRACE_TMR_STOP_EXIT(*perr);
        return (OS_FALSE);
3000b5dc:	e3a03000 	mov	r3, #0
3000b5e0:	ea00005a 	b	3000b750 <OSTmrStop+0x1d0>
    }
    if (OSIntNesting > 0u) {                                      /* See if trying to call from an ISR                */
3000b5e4:	e59f3174 	ldr	r3, [pc, #372]	; 3000b760 <OSTmrStop+0x1e0>
3000b5e8:	e5d33000 	ldrb	r3, [r3]
3000b5ec:	e3530000 	cmp	r3, #0
3000b5f0:	0a000004 	beq	3000b608 <OSTmrStop+0x88>
        *perr  = OS_ERR_TMR_ISR;
3000b5f4:	e51b301c 	ldr	r3, [fp, #-28]
3000b5f8:	e3e02074 	mvn	r2, #116	; 0x74
3000b5fc:	e5c32000 	strb	r2, [r3]
        OS_TRACE_TMR_STOP_EXIT(*perr);
        return (OS_FALSE);
3000b600:	e3a03000 	mov	r3, #0
3000b604:	ea000051 	b	3000b750 <OSTmrStop+0x1d0>
    }
    OSSchedLock();
3000b608:	ebffdc03 	bl	3000261c <OSSchedLock>
    switch (ptmr->OSTmrState) {
3000b60c:	e51b3010 	ldr	r3, [fp, #-16]
3000b610:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
3000b614:	e3530003 	cmp	r3, #3
3000b618:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
3000b61c:	ea000046 	b	3000b73c <OSTmrStop+0x1bc>
3000b620:	3000b724 	.word	0x3000b724
3000b624:	3000b70c 	.word	0x3000b70c
3000b628:	3000b70c 	.word	0x3000b70c
3000b62c:	3000b630 	.word	0x3000b630
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
3000b630:	e51b0010 	ldr	r0, [fp, #-16]
3000b634:	eb0001bd 	bl	3000bd30 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
3000b638:	e51b301c 	ldr	r3, [fp, #-28]
3000b63c:	e3a02000 	mov	r2, #0
3000b640:	e5c32000 	strb	r2, [r3]
             switch (opt) {
3000b644:	e55b3011 	ldrb	r3, [fp, #-17]
3000b648:	e3530003 	cmp	r3, #3
3000b64c:	0a000004 	beq	3000b664 <OSTmrStop+0xe4>
3000b650:	e3530004 	cmp	r3, #4
3000b654:	0a000014 	beq	3000b6ac <OSTmrStop+0x12c>
3000b658:	e3530000 	cmp	r3, #0
3000b65c:	0a000026 	beq	3000b6fc <OSTmrStop+0x17c>
3000b660:	ea000021 	b	3000b6ec <OSTmrStop+0x16c>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
3000b664:	e51b3010 	ldr	r3, [fp, #-16]
3000b668:	e5933004 	ldr	r3, [r3, #4]
3000b66c:	e50b3008 	str	r3, [fp, #-8]
                      if (pfnct != (OS_TMR_CALLBACK)0) {
3000b670:	e51b3008 	ldr	r3, [fp, #-8]
3000b674:	e3530000 	cmp	r3, #0
3000b678:	0a000007 	beq	3000b69c <OSTmrStop+0x11c>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
3000b67c:	e51b3010 	ldr	r3, [fp, #-16]
3000b680:	e5932008 	ldr	r2, [r3, #8]
3000b684:	e51b3008 	ldr	r3, [fp, #-8]
3000b688:	e51b0010 	ldr	r0, [fp, #-16]
3000b68c:	e1a01002 	mov	r1, r2
3000b690:	e1a0e00f 	mov	lr, pc
3000b694:	e12fff13 	msr	CPSR_fsxc, r3, lsl pc
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
3000b698:	ea000018 	b	3000b700 <OSTmrStop+0x180>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
3000b69c:	e51b301c 	ldr	r3, [fp, #-28]
3000b6a0:	e3e02070 	mvn	r2, #112	; 0x70
3000b6a4:	e5c32000 	strb	r2, [r3]
                      }
                      break;
3000b6a8:	ea000014 	b	3000b700 <OSTmrStop+0x180>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
3000b6ac:	e51b3010 	ldr	r3, [fp, #-16]
3000b6b0:	e5933004 	ldr	r3, [r3, #4]
3000b6b4:	e50b3008 	str	r3, [fp, #-8]
                      if (pfnct != (OS_TMR_CALLBACK)0) {
3000b6b8:	e51b3008 	ldr	r3, [fp, #-8]
3000b6bc:	e3530000 	cmp	r3, #0
3000b6c0:	0a000005 	beq	3000b6dc <OSTmrStop+0x15c>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
3000b6c4:	e51b3008 	ldr	r3, [fp, #-8]
3000b6c8:	e51b0010 	ldr	r0, [fp, #-16]
3000b6cc:	e51b1018 	ldr	r1, [fp, #-24]
3000b6d0:	e1a0e00f 	mov	lr, pc
3000b6d4:	e12fff13 	msr	CPSR_fsxc, r3, lsl pc
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
3000b6d8:	ea000008 	b	3000b700 <OSTmrStop+0x180>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
3000b6dc:	e51b301c 	ldr	r3, [fp, #-28]
3000b6e0:	e3e02070 	mvn	r2, #112	; 0x70
3000b6e4:	e5c32000 	strb	r2, [r3]
                      }
                      break;
3000b6e8:	ea000004 	b	3000b700 <OSTmrStop+0x180>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
3000b6ec:	e51b301c 	ldr	r3, [fp, #-28]
3000b6f0:	e3e0207b 	mvn	r2, #123	; 0x7b
3000b6f4:	e5c32000 	strb	r2, [r3]
3000b6f8:	ea000000 	b	3000b700 <OSTmrStop+0x180>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
3000b6fc:	e1a00000 	nop			; (mov r0, r0)

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSSchedUnlock();
3000b700:	ebffdbe7 	bl	300026a4 <OSSchedUnlock>
             OS_TRACE_TMR_STOP_EXIT(*perr);
             return (OS_TRUE);
3000b704:	e3a03001 	mov	r3, #1
3000b708:	ea000010 	b	3000b750 <OSTmrStop+0x1d0>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSSchedUnlock();
3000b70c:	ebffdbe4 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_STOPPED;
3000b710:	e51b301c 	ldr	r3, [fp, #-28]
3000b714:	e3e02071 	mvn	r2, #113	; 0x71
3000b718:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_STOP_EXIT(*perr);
             return (OS_TRUE);
3000b71c:	e3a03001 	mov	r3, #1
3000b720:	ea00000a 	b	3000b750 <OSTmrStop+0x1d0>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSSchedUnlock();
3000b724:	ebffdbde 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INACTIVE;
3000b728:	e51b301c 	ldr	r3, [fp, #-28]
3000b72c:	e3e02078 	mvn	r2, #120	; 0x78
3000b730:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_STOP_EXIT(*perr);
             return (OS_FALSE);
3000b734:	e3a03000 	mov	r3, #0
3000b738:	ea000004 	b	3000b750 <OSTmrStop+0x1d0>

        default:
             OSSchedUnlock();
3000b73c:	ebffdbd8 	bl	300026a4 <OSSchedUnlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
3000b740:	e51b301c 	ldr	r3, [fp, #-28]
3000b744:	e3e02072 	mvn	r2, #114	; 0x72
3000b748:	e5c32000 	strb	r2, [r3]
             OS_TRACE_TMR_STOP_EXIT(*perr);
             return (OS_FALSE);
3000b74c:	e3a03000 	mov	r3, #0
    }
}
3000b750:	e1a00003 	mov	r0, r3
3000b754:	e24bd004 	sub	sp, fp, #4
3000b758:	e8bd4800 	pop	{fp, lr}
3000b75c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000b760:	30017bdc 	.word	0x30017bdc

3000b764 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
3000b764:	e92d4800 	push	{fp, lr}
3000b768:	e28db004 	add	fp, sp, #4
3000b76c:	e24dd008 	sub	sp, sp, #8
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
3000b770:	e59f3024 	ldr	r3, [pc, #36]	; 3000b79c <OSTmrSignal+0x38>
3000b774:	e5933000 	ldr	r3, [r3]
3000b778:	e1a00003 	mov	r0, r3
3000b77c:	ebfff5bc 	bl	30008e74 <OSSemPost>
3000b780:	e1a03000 	mov	r3, r0
3000b784:	e54b3005 	strb	r3, [fp, #-5]
    return (err);
3000b788:	e55b3005 	ldrb	r3, [fp, #-5]
}
3000b78c:	e1a00003 	mov	r0, r3
3000b790:	e24bd004 	sub	sp, fp, #4
3000b794:	e8bd4800 	pop	{fp, lr}
3000b798:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000b79c:	300173ec 	.word	0x300173ec

3000b7a0 <OSTmr_Alloc>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  OS_TMR  *OSTmr_Alloc (void)
{
3000b7a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
3000b7a4:	e28db000 	add	fp, sp, #0
3000b7a8:	e24dd00c 	sub	sp, sp, #12
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
3000b7ac:	e59f3094 	ldr	r3, [pc, #148]	; 3000b848 <OSTmr_Alloc+0xa8>
3000b7b0:	e5933000 	ldr	r3, [r3]
3000b7b4:	e3530000 	cmp	r3, #0
3000b7b8:	1a000001 	bne	3000b7c4 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
3000b7bc:	e3a03000 	mov	r3, #0
3000b7c0:	ea00001c 	b	3000b838 <OSTmr_Alloc+0x98>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
3000b7c4:	e59f307c 	ldr	r3, [pc, #124]	; 3000b848 <OSTmr_Alloc+0xa8>
3000b7c8:	e5933000 	ldr	r3, [r3]
3000b7cc:	e50b3008 	str	r3, [fp, #-8]
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
3000b7d0:	e51b3008 	ldr	r3, [fp, #-8]
3000b7d4:	e593300c 	ldr	r3, [r3, #12]
3000b7d8:	e1a02003 	mov	r2, r3
3000b7dc:	e59f3064 	ldr	r3, [pc, #100]	; 3000b848 <OSTmr_Alloc+0xa8>
3000b7e0:	e5832000 	str	r2, [r3]
    ptmr->OSTmrNext = (OS_TCB *)0;
3000b7e4:	e51b3008 	ldr	r3, [fp, #-8]
3000b7e8:	e3a02000 	mov	r2, #0
3000b7ec:	e583200c 	str	r2, [r3, #12]
    ptmr->OSTmrPrev = (OS_TCB *)0;
3000b7f0:	e51b3008 	ldr	r3, [fp, #-8]
3000b7f4:	e3a02000 	mov	r2, #0
3000b7f8:	e5832010 	str	r2, [r3, #16]
    OSTmrUsed++;
3000b7fc:	e59f3048 	ldr	r3, [pc, #72]	; 3000b84c <OSTmr_Alloc+0xac>
3000b800:	e1d330b0 	ldrh	r3, [r3]
3000b804:	e2833001 	add	r3, r3, #1
3000b808:	e1a03803 	lsl	r3, r3, #16
3000b80c:	e1a02823 	lsr	r2, r3, #16
3000b810:	e59f3034 	ldr	r3, [pc, #52]	; 3000b84c <OSTmr_Alloc+0xac>
3000b814:	e1c320b0 	strh	r2, [r3]
    OSTmrFree--;
3000b818:	e59f3030 	ldr	r3, [pc, #48]	; 3000b850 <OSTmr_Alloc+0xb0>
3000b81c:	e1d330b0 	ldrh	r3, [r3]
3000b820:	e2433001 	sub	r3, r3, #1
3000b824:	e1a03803 	lsl	r3, r3, #16
3000b828:	e1a02823 	lsr	r2, r3, #16
3000b82c:	e59f301c 	ldr	r3, [pc, #28]	; 3000b850 <OSTmr_Alloc+0xb0>
3000b830:	e1c320b0 	strh	r2, [r3]
    return (ptmr);
3000b834:	e51b3008 	ldr	r3, [fp, #-8]
}
3000b838:	e1a00003 	mov	r0, r3
3000b83c:	e28bd000 	add	sp, fp, #0
3000b840:	e8bd0800 	pop	{fp}
3000b844:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000b848:	300173ac 	.word	0x300173ac
3000b84c:	300173f8 	.word	0x300173f8
3000b850:	30017950 	.word	0x30017950

3000b854 <OSTmr_Free>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Free (OS_TMR *ptmr)
{
3000b854:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
3000b858:	e28db000 	add	fp, sp, #0
3000b85c:	e24dd00c 	sub	sp, sp, #12
3000b860:	e50b0008 	str	r0, [fp, #-8]
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
3000b864:	e51b3008 	ldr	r3, [fp, #-8]
3000b868:	e3a02000 	mov	r2, #0
3000b86c:	e5c32025 	strb	r2, [r3, #37]	; 0x25
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
3000b870:	e51b3008 	ldr	r3, [fp, #-8]
3000b874:	e3a02000 	mov	r2, #0
3000b878:	e5c32024 	strb	r2, [r3, #36]	; 0x24
    ptmr->OSTmrPeriod      = 0u;
3000b87c:	e51b3008 	ldr	r3, [fp, #-8]
3000b880:	e3a02000 	mov	r2, #0
3000b884:	e583201c 	str	r2, [r3, #28]
    ptmr->OSTmrMatch       = 0u;
3000b888:	e51b3008 	ldr	r3, [fp, #-8]
3000b88c:	e3a02000 	mov	r2, #0
3000b890:	e5832014 	str	r2, [r3, #20]
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
3000b894:	e51b3008 	ldr	r3, [fp, #-8]
3000b898:	e3a02000 	mov	r2, #0
3000b89c:	e5832004 	str	r2, [r3, #4]
    ptmr->OSTmrCallbackArg = (void *)0;
3000b8a0:	e51b3008 	ldr	r3, [fp, #-8]
3000b8a4:	e3a02000 	mov	r2, #0
3000b8a8:	e5832008 	str	r2, [r3, #8]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr->OSTmrName        = (INT8U *)(void *)"?";
3000b8ac:	e51b3008 	ldr	r3, [fp, #-8]
3000b8b0:	e59f206c 	ldr	r2, [pc, #108]	; 3000b924 <OSTmr_Free+0xd0>
3000b8b4:	e5832020 	str	r2, [r3, #32]
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
3000b8b8:	e51b3008 	ldr	r3, [fp, #-8]
3000b8bc:	e3a02000 	mov	r2, #0
3000b8c0:	e5832010 	str	r2, [r3, #16]
    ptmr->OSTmrNext        = OSTmrFreeList;
3000b8c4:	e59f305c 	ldr	r3, [pc, #92]	; 3000b928 <OSTmr_Free+0xd4>
3000b8c8:	e5932000 	ldr	r2, [r3]
3000b8cc:	e51b3008 	ldr	r3, [fp, #-8]
3000b8d0:	e583200c 	str	r2, [r3, #12]
    OSTmrFreeList          = ptmr;
3000b8d4:	e59f304c 	ldr	r3, [pc, #76]	; 3000b928 <OSTmr_Free+0xd4>
3000b8d8:	e51b2008 	ldr	r2, [fp, #-8]
3000b8dc:	e5832000 	str	r2, [r3]

    OSTmrUsed--;                                       /* Update timer object statistics                              */
3000b8e0:	e59f3044 	ldr	r3, [pc, #68]	; 3000b92c <OSTmr_Free+0xd8>
3000b8e4:	e1d330b0 	ldrh	r3, [r3]
3000b8e8:	e2433001 	sub	r3, r3, #1
3000b8ec:	e1a03803 	lsl	r3, r3, #16
3000b8f0:	e1a02823 	lsr	r2, r3, #16
3000b8f4:	e59f3030 	ldr	r3, [pc, #48]	; 3000b92c <OSTmr_Free+0xd8>
3000b8f8:	e1c320b0 	strh	r2, [r3]
    OSTmrFree++;
3000b8fc:	e59f302c 	ldr	r3, [pc, #44]	; 3000b930 <OSTmr_Free+0xdc>
3000b900:	e1d330b0 	ldrh	r3, [r3]
3000b904:	e2833001 	add	r3, r3, #1
3000b908:	e1a03803 	lsl	r3, r3, #16
3000b90c:	e1a02823 	lsr	r2, r3, #16
3000b910:	e59f3018 	ldr	r3, [pc, #24]	; 3000b930 <OSTmr_Free+0xdc>
3000b914:	e1c320b0 	strh	r2, [r3]
}
3000b918:	e28bd000 	add	sp, fp, #0
3000b91c:	e8bd0800 	pop	{fp}
3000b920:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000b924:	3000c278 	.word	0x3000c278
3000b928:	300173ac 	.word	0x300173ac
3000b92c:	300173f8 	.word	0x300173f8
3000b930:	30017950 	.word	0x30017950

3000b934 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
3000b934:	e92d4800 	push	{fp, lr}
3000b938:	e28db004 	add	fp, sp, #4
3000b93c:	e24dd010 	sub	sp, sp, #16
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
3000b940:	e59f31b4 	ldr	r3, [pc, #436]	; 3000bafc <OSTmr_Init+0x1c8>
3000b944:	e1a00003 	mov	r0, r3
3000b948:	e3a01d0a 	mov	r1, #640	; 0x280
3000b94c:	ebffdf0c 	bl	30003584 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
3000b950:	e59f31a8 	ldr	r3, [pc, #424]	; 3000bb00 <OSTmr_Init+0x1cc>
3000b954:	e1a00003 	mov	r0, r3
3000b958:	e3a01038 	mov	r1, #56	; 0x38
3000b95c:	ebffdf08 	bl	30003584 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
3000b960:	e3a03000 	mov	r3, #0
3000b964:	e14b31b0 	strh	r3, [fp, #-16]
3000b968:	ea000023 	b	3000b9fc <OSTmr_Init+0xc8>
        ix_next = ix + 1u;
3000b96c:	e15b31b0 	ldrh	r3, [fp, #-16]
3000b970:	e2833001 	add	r3, r3, #1
3000b974:	e14b30be 	strh	r3, [fp, #-14]
        ptmr1 = &OSTmrTbl[ix];
3000b978:	e15b21b0 	ldrh	r2, [fp, #-16]
3000b97c:	e1a03002 	mov	r3, r2
3000b980:	e1a03103 	lsl	r3, r3, #2
3000b984:	e0833002 	add	r3, r3, r2
3000b988:	e1a03183 	lsl	r3, r3, #3
3000b98c:	e1a02003 	mov	r2, r3
3000b990:	e59f3164 	ldr	r3, [pc, #356]	; 3000bafc <OSTmr_Init+0x1c8>
3000b994:	e0823003 	add	r3, r2, r3
3000b998:	e50b300c 	str	r3, [fp, #-12]
        ptmr2 = &OSTmrTbl[ix_next];
3000b99c:	e15b20be 	ldrh	r2, [fp, #-14]
3000b9a0:	e1a03002 	mov	r3, r2
3000b9a4:	e1a03103 	lsl	r3, r3, #2
3000b9a8:	e0833002 	add	r3, r3, r2
3000b9ac:	e1a03183 	lsl	r3, r3, #3
3000b9b0:	e1a02003 	mov	r2, r3
3000b9b4:	e59f3140 	ldr	r3, [pc, #320]	; 3000bafc <OSTmr_Init+0x1c8>
3000b9b8:	e0823003 	add	r3, r2, r3
3000b9bc:	e50b3008 	str	r3, [fp, #-8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
3000b9c0:	e51b300c 	ldr	r3, [fp, #-12]
3000b9c4:	e3a02064 	mov	r2, #100	; 0x64
3000b9c8:	e5c32000 	strb	r2, [r3]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
3000b9cc:	e51b300c 	ldr	r3, [fp, #-12]
3000b9d0:	e3a02000 	mov	r2, #0
3000b9d4:	e5c32025 	strb	r2, [r3, #37]	; 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
3000b9d8:	e51b300c 	ldr	r3, [fp, #-12]
3000b9dc:	e51b2008 	ldr	r2, [fp, #-8]
3000b9e0:	e583200c 	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
3000b9e4:	e51b300c 	ldr	r3, [fp, #-12]
3000b9e8:	e59f2114 	ldr	r2, [pc, #276]	; 3000bb04 <OSTmr_Init+0x1d0>
3000b9ec:	e5832020 	str	r2, [r3, #32]


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
3000b9f0:	e15b31b0 	ldrh	r3, [fp, #-16]
3000b9f4:	e2833001 	add	r3, r3, #1
3000b9f8:	e14b31b0 	strh	r3, [fp, #-16]
3000b9fc:	e15b31b0 	ldrh	r3, [fp, #-16]
3000ba00:	e353000e 	cmp	r3, #14
3000ba04:	9affffd8 	bls	3000b96c <OSTmr_Init+0x38>
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
3000ba08:	e15b21b0 	ldrh	r2, [fp, #-16]
3000ba0c:	e1a03002 	mov	r3, r2
3000ba10:	e1a03103 	lsl	r3, r3, #2
3000ba14:	e0833002 	add	r3, r3, r2
3000ba18:	e1a03183 	lsl	r3, r3, #3
3000ba1c:	e1a02003 	mov	r2, r3
3000ba20:	e59f30d4 	ldr	r3, [pc, #212]	; 3000bafc <OSTmr_Init+0x1c8>
3000ba24:	e0823003 	add	r3, r2, r3
3000ba28:	e50b300c 	str	r3, [fp, #-12]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
3000ba2c:	e51b300c 	ldr	r3, [fp, #-12]
3000ba30:	e3a02064 	mov	r2, #100	; 0x64
3000ba34:	e5c32000 	strb	r2, [r3]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
3000ba38:	e51b300c 	ldr	r3, [fp, #-12]
3000ba3c:	e3a02000 	mov	r2, #0
3000ba40:	e5c32025 	strb	r2, [r3, #37]	; 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
3000ba44:	e51b300c 	ldr	r3, [fp, #-12]
3000ba48:	e3a02000 	mov	r2, #0
3000ba4c:	e583200c 	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
3000ba50:	e51b300c 	ldr	r3, [fp, #-12]
3000ba54:	e59f20a8 	ldr	r2, [pc, #168]	; 3000bb04 <OSTmr_Init+0x1d0>
3000ba58:	e5832020 	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
3000ba5c:	e59f30a4 	ldr	r3, [pc, #164]	; 3000bb08 <OSTmr_Init+0x1d4>
3000ba60:	e3a02000 	mov	r2, #0
3000ba64:	e5832000 	str	r2, [r3]
    OSTmrUsed           = 0u;
3000ba68:	e59f309c 	ldr	r3, [pc, #156]	; 3000bb0c <OSTmr_Init+0x1d8>
3000ba6c:	e3a02000 	mov	r2, #0
3000ba70:	e1c320b0 	strh	r2, [r3]
    OSTmrFree           = OS_TMR_CFG_MAX;
3000ba74:	e59f3094 	ldr	r3, [pc, #148]	; 3000bb10 <OSTmr_Init+0x1dc>
3000ba78:	e3a02010 	mov	r2, #16
3000ba7c:	e1c320b0 	strh	r2, [r3]
    OSTmrFreeList       = &OSTmrTbl[0];
3000ba80:	e59f308c 	ldr	r3, [pc, #140]	; 3000bb14 <OSTmr_Init+0x1e0>
3000ba84:	e59f2070 	ldr	r2, [pc, #112]	; 3000bafc <OSTmr_Init+0x1c8>
3000ba88:	e5832000 	str	r2, [r3]
    OSTmrSem            = OSSemCreate(1u);
3000ba8c:	e3a00001 	mov	r0, #1
3000ba90:	ebfff35a 	bl	30008800 <OSSemCreate>
3000ba94:	e1a02000 	mov	r2, r0
3000ba98:	e59f3078 	ldr	r3, [pc, #120]	; 3000bb18 <OSTmr_Init+0x1e4>
3000ba9c:	e5832000 	str	r2, [r3]
    OSTmrSemSignal      = OSSemCreate(0u);
3000baa0:	e3a00000 	mov	r0, #0
3000baa4:	ebfff355 	bl	30008800 <OSSemCreate>
3000baa8:	e1a02000 	mov	r2, r0
3000baac:	e59f3068 	ldr	r3, [pc, #104]	; 3000bb1c <OSTmr_Init+0x1e8>
3000bab0:	e5832000 	str	r2, [r3]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
3000bab4:	e59f305c 	ldr	r3, [pc, #92]	; 3000bb18 <OSTmr_Init+0x1e4>
3000bab8:	e5932000 	ldr	r2, [r3]
3000babc:	e24b3011 	sub	r3, fp, #17
3000bac0:	e1a00002 	mov	r0, r2
3000bac4:	e59f1054 	ldr	r1, [pc, #84]	; 3000bb20 <OSTmr_Init+0x1ec>
3000bac8:	e1a02003 	mov	r2, r3
3000bacc:	ebffd883 	bl	30001ce0 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
3000bad0:	e59f3044 	ldr	r3, [pc, #68]	; 3000bb1c <OSTmr_Init+0x1e8>
3000bad4:	e5932000 	ldr	r2, [r3]
3000bad8:	e24b3011 	sub	r3, fp, #17
3000badc:	e1a00002 	mov	r0, r2
3000bae0:	e59f103c 	ldr	r1, [pc, #60]	; 3000bb24 <OSTmr_Init+0x1f0>
3000bae4:	e1a02003 	mov	r2, r3
3000bae8:	ebffd87c 	bl	30001ce0 <OSEventNameSet>
#endif

    OSTmr_InitTask();
3000baec:	eb00000d 	bl	3000bb28 <OSTmr_InitTask>
}
3000baf0:	e24bd004 	sub	sp, fp, #4
3000baf4:	e8bd4800 	pop	{fp, lr}
3000baf8:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000bafc:	3001744c 	.word	0x3001744c
3000bb00:	300173b0 	.word	0x300173b0
3000bb04:	3000c278 	.word	0x3000c278
3000bb08:	30017be4 	.word	0x30017be4
3000bb0c:	300173f8 	.word	0x300173f8
3000bb10:	30017950 	.word	0x30017950
3000bb14:	300173ac 	.word	0x300173ac
3000bb18:	30017bec 	.word	0x30017bec
3000bb1c:	300173ec 	.word	0x300173ec
3000bb20:	3000c29c 	.word	0x3000c29c
3000bb24:	3000c2b0 	.word	0x3000c2b0

3000bb28 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
3000bb28:	e92d4800 	push	{fp, lr}
3000bb2c:	e28db004 	add	fp, sp, #4
3000bb30:	e24dd020 	sub	sp, sp, #32
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
3000bb34:	e59f3054 	ldr	r3, [pc, #84]	; 3000bb90 <OSTmr_InitTask+0x68>
3000bb38:	e58d3000 	str	r3, [sp]
3000bb3c:	e59f3050 	ldr	r3, [pc, #80]	; 3000bb94 <OSTmr_InitTask+0x6c>
3000bb40:	e58d3004 	str	r3, [sp, #4]
3000bb44:	e3a03080 	mov	r3, #128	; 0x80
3000bb48:	e58d3008 	str	r3, [sp, #8]
3000bb4c:	e3a03000 	mov	r3, #0
3000bb50:	e58d300c 	str	r3, [sp, #12]
3000bb54:	e3a03003 	mov	r3, #3
3000bb58:	e58d3010 	str	r3, [sp, #16]
3000bb5c:	e59f0034 	ldr	r0, [pc, #52]	; 3000bb98 <OSTmr_InitTask+0x70>
3000bb60:	e3a01000 	mov	r1, #0
3000bb64:	e59f2030 	ldr	r2, [pc, #48]	; 3000bb9c <OSTmr_InitTask+0x74>
3000bb68:	e3a0303d 	mov	r3, #61	; 0x3d
3000bb6c:	ebfff700 	bl	30009774 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
3000bb70:	e24b3005 	sub	r3, fp, #5
3000bb74:	e3a0003d 	mov	r0, #61	; 0x3d
3000bb78:	e59f1020 	ldr	r1, [pc, #32]	; 3000bba0 <OSTmr_InitTask+0x78>
3000bb7c:	e1a02003 	mov	r2, r3
3000bb80:	ebfff8cf 	bl	30009ec4 <OSTaskNameSet>
#endif
}
3000bb84:	e24bd004 	sub	sp, fp, #4
3000bb88:	e8bd4800 	pop	{fp, lr}
3000bb8c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000bb90:	0000fffd 	.word	0x0000fffd
3000bb94:	300179d8 	.word	0x300179d8
3000bb98:	3000be68 	.word	0x3000be68
3000bb9c:	30017bd4 	.word	0x30017bd4
3000bba0:	3000c2c4 	.word	0x3000c2c4

3000bba4 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
3000bba4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
3000bba8:	e28db000 	add	fp, sp, #0
3000bbac:	e24dd01c 	sub	sp, sp, #28
3000bbb0:	e50b0018 	str	r0, [fp, #-24]
3000bbb4:	e1a03001 	mov	r3, r1
3000bbb8:	e54b3019 	strb	r3, [fp, #-25]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
3000bbbc:	e51b3018 	ldr	r3, [fp, #-24]
3000bbc0:	e3a02003 	mov	r2, #3
3000bbc4:	e5c32025 	strb	r2, [r3, #37]	; 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
3000bbc8:	e55b3019 	ldrb	r3, [fp, #-25]
3000bbcc:	e3530001 	cmp	r3, #1
3000bbd0:	1a000007 	bne	3000bbf4 <OSTmr_Link+0x50>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
3000bbd4:	e51b3018 	ldr	r3, [fp, #-24]
3000bbd8:	e593201c 	ldr	r2, [r3, #28]
3000bbdc:	e59f3140 	ldr	r3, [pc, #320]	; 3000bd24 <OSTmr_Link+0x180>
3000bbe0:	e5933000 	ldr	r3, [r3]
3000bbe4:	e0822003 	add	r2, r2, r3
3000bbe8:	e51b3018 	ldr	r3, [fp, #-24]
3000bbec:	e5832014 	str	r2, [r3, #20]
3000bbf0:	ea000012 	b	3000bc40 <OSTmr_Link+0x9c>
    } else {
        if (ptmr->OSTmrDly == 0u) {
3000bbf4:	e51b3018 	ldr	r3, [fp, #-24]
3000bbf8:	e5933018 	ldr	r3, [r3, #24]
3000bbfc:	e3530000 	cmp	r3, #0
3000bc00:	1a000007 	bne	3000bc24 <OSTmr_Link+0x80>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
3000bc04:	e51b3018 	ldr	r3, [fp, #-24]
3000bc08:	e593201c 	ldr	r2, [r3, #28]
3000bc0c:	e59f3110 	ldr	r3, [pc, #272]	; 3000bd24 <OSTmr_Link+0x180>
3000bc10:	e5933000 	ldr	r3, [r3]
3000bc14:	e0822003 	add	r2, r2, r3
3000bc18:	e51b3018 	ldr	r3, [fp, #-24]
3000bc1c:	e5832014 	str	r2, [r3, #20]
3000bc20:	ea000006 	b	3000bc40 <OSTmr_Link+0x9c>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
3000bc24:	e51b3018 	ldr	r3, [fp, #-24]
3000bc28:	e5932018 	ldr	r2, [r3, #24]
3000bc2c:	e59f30f0 	ldr	r3, [pc, #240]	; 3000bd24 <OSTmr_Link+0x180>
3000bc30:	e5933000 	ldr	r3, [r3]
3000bc34:	e0822003 	add	r2, r2, r3
3000bc38:	e51b3018 	ldr	r3, [fp, #-24]
3000bc3c:	e5832014 	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
3000bc40:	e51b3018 	ldr	r3, [fp, #-24]
3000bc44:	e5931014 	ldr	r1, [r3, #20]
3000bc48:	e59f20d8 	ldr	r2, [pc, #216]	; 3000bd28 <OSTmr_Link+0x184>
3000bc4c:	e0830192 	umull	r0, r3, r2, r1
3000bc50:	e0632001 	rsb	r2, r3, r1
3000bc54:	e1a020a2 	lsr	r2, r2, #1
3000bc58:	e0833002 	add	r3, r3, r2
3000bc5c:	e1a03123 	lsr	r3, r3, #2
3000bc60:	e1a02003 	mov	r2, r3
3000bc64:	e1a02182 	lsl	r2, r2, #3
3000bc68:	e0632002 	rsb	r2, r3, r2
3000bc6c:	e0623001 	rsb	r3, r2, r1
3000bc70:	e14b30b6 	strh	r3, [fp, #-6]
    pspoke = &OSTmrWheelTbl[spoke];
3000bc74:	e15b30b6 	ldrh	r3, [fp, #-6]
3000bc78:	e1a02183 	lsl	r2, r3, #3
3000bc7c:	e59f30a8 	ldr	r3, [pc, #168]	; 3000bd2c <OSTmr_Link+0x188>
3000bc80:	e0823003 	add	r3, r2, r3
3000bc84:	e50b300c 	str	r3, [fp, #-12]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
3000bc88:	e51b300c 	ldr	r3, [fp, #-12]
3000bc8c:	e5933000 	ldr	r3, [r3]
3000bc90:	e3530000 	cmp	r3, #0
3000bc94:	1a000009 	bne	3000bcc0 <OSTmr_Link+0x11c>
        pspoke->OSTmrFirst   = ptmr;
3000bc98:	e51b300c 	ldr	r3, [fp, #-12]
3000bc9c:	e51b2018 	ldr	r2, [fp, #-24]
3000bca0:	e5832000 	str	r2, [r3]
        ptmr->OSTmrNext      = (OS_TMR *)0;
3000bca4:	e51b3018 	ldr	r3, [fp, #-24]
3000bca8:	e3a02000 	mov	r2, #0
3000bcac:	e583200c 	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
3000bcb0:	e51b300c 	ldr	r3, [fp, #-12]
3000bcb4:	e3a02001 	mov	r2, #1
3000bcb8:	e1c320b4 	strh	r2, [r3, #4]
3000bcbc:	ea000012 	b	3000bd0c <OSTmr_Link+0x168>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
3000bcc0:	e51b300c 	ldr	r3, [fp, #-12]
3000bcc4:	e5933000 	ldr	r3, [r3]
3000bcc8:	e50b3010 	str	r3, [fp, #-16]
        pspoke->OSTmrFirst   = ptmr;
3000bccc:	e51b300c 	ldr	r3, [fp, #-12]
3000bcd0:	e51b2018 	ldr	r2, [fp, #-24]
3000bcd4:	e5832000 	str	r2, [r3]
        ptmr->OSTmrNext      = (void *)ptmr1;
3000bcd8:	e51b3018 	ldr	r3, [fp, #-24]
3000bcdc:	e51b2010 	ldr	r2, [fp, #-16]
3000bce0:	e583200c 	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
3000bce4:	e51b3010 	ldr	r3, [fp, #-16]
3000bce8:	e51b2018 	ldr	r2, [fp, #-24]
3000bcec:	e5832010 	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
3000bcf0:	e51b300c 	ldr	r3, [fp, #-12]
3000bcf4:	e1d330b4 	ldrh	r3, [r3, #4]
3000bcf8:	e2833001 	add	r3, r3, #1
3000bcfc:	e1a03803 	lsl	r3, r3, #16
3000bd00:	e1a02823 	lsr	r2, r3, #16
3000bd04:	e51b300c 	ldr	r3, [fp, #-12]
3000bd08:	e1c320b4 	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
3000bd0c:	e51b3018 	ldr	r3, [fp, #-24]
3000bd10:	e3a02000 	mov	r2, #0
3000bd14:	e5832010 	str	r2, [r3, #16]
}
3000bd18:	e28bd000 	add	sp, fp, #0
3000bd1c:	e8bd0800 	pop	{fp}
3000bd20:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000bd24:	30017be4 	.word	0x30017be4
3000bd28:	24924925 	.word	0x24924925
3000bd2c:	300173b0 	.word	0x300173b0

3000bd30 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
3000bd30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
3000bd34:	e28db000 	add	fp, sp, #0
3000bd38:	e24dd01c 	sub	sp, sp, #28
3000bd3c:	e50b0018 	str	r0, [fp, #-24]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
3000bd40:	e51b3018 	ldr	r3, [fp, #-24]
3000bd44:	e5931014 	ldr	r1, [r3, #20]
3000bd48:	e59f2110 	ldr	r2, [pc, #272]	; 3000be60 <OSTmr_Unlink+0x130>
3000bd4c:	e0830192 	umull	r0, r3, r2, r1
3000bd50:	e0632001 	rsb	r2, r3, r1
3000bd54:	e1a020a2 	lsr	r2, r2, #1
3000bd58:	e0833002 	add	r3, r3, r2
3000bd5c:	e1a03123 	lsr	r3, r3, #2
3000bd60:	e1a02003 	mov	r2, r3
3000bd64:	e1a02182 	lsl	r2, r2, #3
3000bd68:	e0632002 	rsb	r2, r3, r2
3000bd6c:	e0623001 	rsb	r3, r2, r1
3000bd70:	e14b30b6 	strh	r3, [fp, #-6]
    pspoke = &OSTmrWheelTbl[spoke];
3000bd74:	e15b30b6 	ldrh	r3, [fp, #-6]
3000bd78:	e1a02183 	lsl	r2, r3, #3
3000bd7c:	e59f30e0 	ldr	r3, [pc, #224]	; 3000be64 <OSTmr_Unlink+0x134>
3000bd80:	e0823003 	add	r3, r2, r3
3000bd84:	e50b300c 	str	r3, [fp, #-12]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
3000bd88:	e51b300c 	ldr	r3, [fp, #-12]
3000bd8c:	e5932000 	ldr	r2, [r3]
3000bd90:	e51b3018 	ldr	r3, [fp, #-24]
3000bd94:	e1520003 	cmp	r2, r3
3000bd98:	1a00000c 	bne	3000bdd0 <OSTmr_Unlink+0xa0>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
3000bd9c:	e51b3018 	ldr	r3, [fp, #-24]
3000bda0:	e593300c 	ldr	r3, [r3, #12]
3000bda4:	e50b3014 	str	r3, [fp, #-20]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
3000bda8:	e51b300c 	ldr	r3, [fp, #-12]
3000bdac:	e51b2014 	ldr	r2, [fp, #-20]
3000bdb0:	e5832000 	str	r2, [r3]
        if (ptmr1 != (OS_TMR *)0) {
3000bdb4:	e51b3014 	ldr	r3, [fp, #-20]
3000bdb8:	e3530000 	cmp	r3, #0
3000bdbc:	0a000013 	beq	3000be10 <OSTmr_Unlink+0xe0>
            ptmr1->OSTmrPrev = (void *)0;
3000bdc0:	e51b3014 	ldr	r3, [fp, #-20]
3000bdc4:	e3a02000 	mov	r2, #0
3000bdc8:	e5832010 	str	r2, [r3, #16]
3000bdcc:	ea000010 	b	3000be14 <OSTmr_Unlink+0xe4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
3000bdd0:	e51b3018 	ldr	r3, [fp, #-24]
3000bdd4:	e5933010 	ldr	r3, [r3, #16]
3000bdd8:	e50b3014 	str	r3, [fp, #-20]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
3000bddc:	e51b3018 	ldr	r3, [fp, #-24]
3000bde0:	e593300c 	ldr	r3, [r3, #12]
3000bde4:	e50b3010 	str	r3, [fp, #-16]
        ptmr1->OSTmrNext = ptmr2;
3000bde8:	e51b3014 	ldr	r3, [fp, #-20]
3000bdec:	e51b2010 	ldr	r2, [fp, #-16]
3000bdf0:	e583200c 	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
3000bdf4:	e51b3010 	ldr	r3, [fp, #-16]
3000bdf8:	e3530000 	cmp	r3, #0
3000bdfc:	0a000004 	beq	3000be14 <OSTmr_Unlink+0xe4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
3000be00:	e51b3010 	ldr	r3, [fp, #-16]
3000be04:	e51b2014 	ldr	r2, [fp, #-20]
3000be08:	e5832010 	str	r2, [r3, #16]
3000be0c:	ea000000 	b	3000be14 <OSTmr_Unlink+0xe4>

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
        if (ptmr1 != (OS_TMR *)0) {
            ptmr1->OSTmrPrev = (void *)0;
3000be10:	e1a00000 	nop			; (mov r0, r0)
        ptmr1->OSTmrNext = ptmr2;
        if (ptmr2 != (OS_TMR *)0) {
            ptmr2->OSTmrPrev = (void *)ptmr1;
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
3000be14:	e51b3018 	ldr	r3, [fp, #-24]
3000be18:	e3a02001 	mov	r2, #1
3000be1c:	e5c32025 	strb	r2, [r3, #37]	; 0x25
    ptmr->OSTmrNext  = (void *)0;
3000be20:	e51b3018 	ldr	r3, [fp, #-24]
3000be24:	e3a02000 	mov	r2, #0
3000be28:	e583200c 	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
3000be2c:	e51b3018 	ldr	r3, [fp, #-24]
3000be30:	e3a02000 	mov	r2, #0
3000be34:	e5832010 	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
3000be38:	e51b300c 	ldr	r3, [fp, #-12]
3000be3c:	e1d330b4 	ldrh	r3, [r3, #4]
3000be40:	e2433001 	sub	r3, r3, #1
3000be44:	e1a03803 	lsl	r3, r3, #16
3000be48:	e1a02823 	lsr	r2, r3, #16
3000be4c:	e51b300c 	ldr	r3, [fp, #-12]
3000be50:	e1c320b4 	strh	r2, [r3, #4]
}
3000be54:	e28bd000 	add	sp, fp, #0
3000be58:	e8bd0800 	pop	{fp}
3000be5c:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000be60:	24924925 	.word	0x24924925
3000be64:	300173b0 	.word	0x300173b0

3000be68 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
3000be68:	e92d4800 	push	{fp, lr}
3000be6c:	e28db004 	add	fp, sp, #4
3000be70:	e24dd020 	sub	sp, sp, #32
3000be74:	e50b0020 	str	r0, [fp, #-32]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
3000be78:	e59f312c 	ldr	r3, [pc, #300]	; 3000bfac <OSTmr_Task+0x144>
3000be7c:	e5932000 	ldr	r2, [r3]
3000be80:	e24b3019 	sub	r3, fp, #25
3000be84:	e1a00002 	mov	r0, r2
3000be88:	e3a01000 	mov	r1, #0
3000be8c:	e1a02003 	mov	r2, r3
3000be90:	ebfff320 	bl	30008b18 <OSSemPend>
        OSSchedLock();
3000be94:	ebffd9e0 	bl	3000261c <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
3000be98:	e59f3110 	ldr	r3, [pc, #272]	; 3000bfb0 <OSTmr_Task+0x148>
3000be9c:	e5933000 	ldr	r3, [r3]
3000bea0:	e2832001 	add	r2, r3, #1
3000bea4:	e59f3104 	ldr	r3, [pc, #260]	; 3000bfb0 <OSTmr_Task+0x148>
3000bea8:	e5832000 	str	r2, [r3]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
3000beac:	e59f30fc 	ldr	r3, [pc, #252]	; 3000bfb0 <OSTmr_Task+0x148>
3000beb0:	e5931000 	ldr	r1, [r3]
3000beb4:	e59f20f8 	ldr	r2, [pc, #248]	; 3000bfb4 <OSTmr_Task+0x14c>
3000beb8:	e0830192 	umull	r0, r3, r2, r1
3000bebc:	e0632001 	rsb	r2, r3, r1
3000bec0:	e1a020a2 	lsr	r2, r2, #1
3000bec4:	e0833002 	add	r3, r3, r2
3000bec8:	e1a03123 	lsr	r3, r3, #2
3000becc:	e1a02003 	mov	r2, r3
3000bed0:	e1a02182 	lsl	r2, r2, #3
3000bed4:	e0632002 	rsb	r2, r3, r2
3000bed8:	e0623001 	rsb	r3, r2, r1
3000bedc:	e14b30b6 	strh	r3, [fp, #-6]
        pspoke = &OSTmrWheelTbl[spoke];
3000bee0:	e15b30b6 	ldrh	r3, [fp, #-6]
3000bee4:	e1a02183 	lsl	r2, r3, #3
3000bee8:	e59f30c8 	ldr	r3, [pc, #200]	; 3000bfb8 <OSTmr_Task+0x150>
3000beec:	e0823003 	add	r3, r2, r3
3000bef0:	e50b300c 	str	r3, [fp, #-12]
        ptmr   = pspoke->OSTmrFirst;
3000bef4:	e51b300c 	ldr	r3, [fp, #-12]
3000bef8:	e5933000 	ldr	r3, [r3]
3000befc:	e50b3018 	str	r3, [fp, #-24]
        while (ptmr != (OS_TMR *)0) {
3000bf00:	ea000024 	b	3000bf98 <OSTmr_Task+0x130>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
3000bf04:	e51b3018 	ldr	r3, [fp, #-24]
3000bf08:	e593300c 	ldr	r3, [r3, #12]
3000bf0c:	e50b3014 	str	r3, [fp, #-20]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
3000bf10:	e51b3018 	ldr	r3, [fp, #-24]
3000bf14:	e5932014 	ldr	r2, [r3, #20]
3000bf18:	e59f3090 	ldr	r3, [pc, #144]	; 3000bfb0 <OSTmr_Task+0x148>
3000bf1c:	e5933000 	ldr	r3, [r3]
3000bf20:	e1520003 	cmp	r2, r3
3000bf24:	1a000019 	bne	3000bf90 <OSTmr_Task+0x128>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
3000bf28:	e51b0018 	ldr	r0, [fp, #-24]
3000bf2c:	ebffff7f 	bl	3000bd30 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
3000bf30:	e51b3018 	ldr	r3, [fp, #-24]
3000bf34:	e5d33024 	ldrb	r3, [r3, #36]	; 0x24
3000bf38:	e3530002 	cmp	r3, #2
3000bf3c:	1a000003 	bne	3000bf50 <OSTmr_Task+0xe8>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
3000bf40:	e51b0018 	ldr	r0, [fp, #-24]
3000bf44:	e3a01001 	mov	r1, #1
3000bf48:	ebffff15 	bl	3000bba4 <OSTmr_Link>
3000bf4c:	ea000002 	b	3000bf5c <OSTmr_Task+0xf4>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
3000bf50:	e51b3018 	ldr	r3, [fp, #-24]
3000bf54:	e3a02002 	mov	r2, #2
3000bf58:	e5c32025 	strb	r2, [r3, #37]	; 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
3000bf5c:	e51b3018 	ldr	r3, [fp, #-24]
3000bf60:	e5933004 	ldr	r3, [r3, #4]
3000bf64:	e50b3010 	str	r3, [fp, #-16]
                if (pfnct != (OS_TMR_CALLBACK)0) {
3000bf68:	e51b3010 	ldr	r3, [fp, #-16]
3000bf6c:	e3530000 	cmp	r3, #0
3000bf70:	0a000006 	beq	3000bf90 <OSTmr_Task+0x128>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
3000bf74:	e51b3018 	ldr	r3, [fp, #-24]
3000bf78:	e5932008 	ldr	r2, [r3, #8]
3000bf7c:	e51b3010 	ldr	r3, [fp, #-16]
3000bf80:	e51b0018 	ldr	r0, [fp, #-24]
3000bf84:	e1a01002 	mov	r1, r2
3000bf88:	e1a0e00f 	mov	lr, pc
3000bf8c:	e12fff13 	msr	CPSR_fsxc, r3, lsl pc
                }
            }
            ptmr = ptmr_next;
3000bf90:	e51b3014 	ldr	r3, [fp, #-20]
3000bf94:	e50b3018 	str	r3, [fp, #-24]
        OSSchedLock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
3000bf98:	e51b3018 	ldr	r3, [fp, #-24]
3000bf9c:	e3530000 	cmp	r3, #0
3000bfa0:	1affffd7 	bne	3000bf04 <OSTmr_Task+0x9c>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
                }
            }
            ptmr = ptmr_next;
        }
        OSSchedUnlock();
3000bfa4:	ebffd9be 	bl	300026a4 <OSSchedUnlock>
    }
3000bfa8:	eaffffb2 	b	3000be78 <OSTmr_Task+0x10>
3000bfac:	300173ec 	.word	0x300173ec
3000bfb0:	30017be4 	.word	0x30017be4
3000bfb4:	24924925 	.word	0x24924925
3000bfb8:	300173b0 	.word	0x300173b0

3000bfbc <__aeabi_uidiv>:
3000bfbc:	e2512001 	subs	r2, r1, #1
3000bfc0:	012fff1e 	msreq	CPSR_fsxc, lr, lsl pc
3000bfc4:	3a000036 	bcc	3000c0a4 <__aeabi_uidiv+0xe8>
3000bfc8:	e1500001 	cmp	r0, r1
3000bfcc:	9a000022 	bls	3000c05c <__aeabi_uidiv+0xa0>
3000bfd0:	e1110002 	tst	r1, r2
3000bfd4:	0a000023 	beq	3000c068 <__aeabi_uidiv+0xac>
3000bfd8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
3000bfdc:	01a01181 	lsleq	r1, r1, #3
3000bfe0:	03a03008 	moveq	r3, #8
3000bfe4:	13a03001 	movne	r3, #1
3000bfe8:	e3510201 	cmp	r1, #268435456	; 0x10000000
3000bfec:	31510000 	cmpcc	r1, r0
3000bff0:	31a01201 	lslcc	r1, r1, #4
3000bff4:	31a03203 	lslcc	r3, r3, #4
3000bff8:	3afffffa 	bcc	3000bfe8 <__aeabi_uidiv+0x2c>
3000bffc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
3000c000:	31510000 	cmpcc	r1, r0
3000c004:	31a01081 	lslcc	r1, r1, #1
3000c008:	31a03083 	lslcc	r3, r3, #1
3000c00c:	3afffffa 	bcc	3000bffc <__aeabi_uidiv+0x40>
3000c010:	e3a02000 	mov	r2, #0
3000c014:	e1500001 	cmp	r0, r1
3000c018:	20400001 	subcs	r0, r0, r1
3000c01c:	21822003 	orrcs	r2, r2, r3
3000c020:	e15000a1 	cmp	r0, r1, lsr #1
3000c024:	204000a1 	subcs	r0, r0, r1, lsr #1
3000c028:	218220a3 	orrcs	r2, r2, r3, lsr #1
3000c02c:	e1500121 	cmp	r0, r1, lsr #2
3000c030:	20400121 	subcs	r0, r0, r1, lsr #2
3000c034:	21822123 	orrcs	r2, r2, r3, lsr #2
3000c038:	e15001a1 	cmp	r0, r1, lsr #3
3000c03c:	204001a1 	subcs	r0, r0, r1, lsr #3
3000c040:	218221a3 	orrcs	r2, r2, r3, lsr #3
3000c044:	e3500000 	cmp	r0, #0
3000c048:	11b03223 	lsrsne	r3, r3, #4
3000c04c:	11a01221 	lsrne	r1, r1, #4
3000c050:	1affffef 	bne	3000c014 <__aeabi_uidiv+0x58>
3000c054:	e1a00002 	mov	r0, r2
3000c058:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000c05c:	03a00001 	moveq	r0, #1
3000c060:	13a00000 	movne	r0, #0
3000c064:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000c068:	e3510801 	cmp	r1, #65536	; 0x10000
3000c06c:	21a01821 	lsrcs	r1, r1, #16
3000c070:	23a02010 	movcs	r2, #16
3000c074:	33a02000 	movcc	r2, #0
3000c078:	e3510c01 	cmp	r1, #256	; 0x100
3000c07c:	21a01421 	lsrcs	r1, r1, #8
3000c080:	22822008 	addcs	r2, r2, #8
3000c084:	e3510010 	cmp	r1, #16
3000c088:	21a01221 	lsrcs	r1, r1, #4
3000c08c:	22822004 	addcs	r2, r2, #4
3000c090:	e3510004 	cmp	r1, #4
3000c094:	82822003 	addhi	r2, r2, #3
3000c098:	908220a1 	addls	r2, r2, r1, lsr #1
3000c09c:	e1a00230 	lsr	r0, r0, r2
3000c0a0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
3000c0a4:	e52de008 	str	lr, [sp, #-8]!
3000c0a8:	eb000008 	bl	3000c0d0 <__div0>
3000c0ac:	e3a00000 	mov	r0, #0
3000c0b0:	e49de008 	ldr	lr, [sp], #8
3000c0b4:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

3000c0b8 <__aeabi_uidivmod>:
3000c0b8:	e92d4003 	push	{r0, r1, lr}
3000c0bc:	ebffffbe 	bl	3000bfbc <__aeabi_uidiv>
3000c0c0:	e8bd4006 	pop	{r1, r2, lr}
3000c0c4:	e0030092 	mul	r3, r2, r0
3000c0c8:	e0411003 	sub	r1, r1, r3
3000c0cc:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc

3000c0d0 <__div0>:
3000c0d0:	e92d4002 	push	{r1, lr}
3000c0d4:	e3a00008 	mov	r0, #8
3000c0d8:	ebffd5bf 	bl	300017dc <raise>
3000c0dc:	e8bd4002 	pop	{r1, lr}
3000c0e0:	e12fff1e 	msr	CPSR_fsxc, lr, lsl pc
